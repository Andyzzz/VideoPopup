// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video_popup.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "video_popup.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace video_popup {

namespace {

const ::google::protobuf::Descriptor* NeighborhoodPara_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NeighborhoodPara_reflection_ = NULL;
const ::google::protobuf::Descriptor* GRICModelSelectionPara_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GRICModelSelectionPara_reflection_ = NULL;
const ::google::protobuf::Descriptor* PerspFittingPara_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerspFittingPara_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PerspFittingPara_FHFitting_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PerspFittingPara_FittingError_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OrthoFittingPara_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrthoFittingPara_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubspaceFittingPara_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubspaceFittingPara_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelFittingPara_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelFittingPara_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelFittingPara_GraphCutPara_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelFittingPara_GraphCutPara_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModelFittingPara_GraphCutPara_Engine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ModelFittingPara_FittingModel_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SegmentationPara_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationPara_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrthoReconstructionPara_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrthoReconstructionPara_reflection_ = NULL;
const ::google::protobuf::Descriptor* PerspReconstructionPara_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerspReconstructionPara_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReconstructionPara_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconstructionPara_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReconstructionPara_ReconstructionPipeline_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_video_5fpopup_2eproto() {
  protobuf_AddDesc_video_5fpopup_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "video_popup.proto");
  GOOGLE_CHECK(file != NULL);
  NeighborhoodPara_descriptor_ = file->message_type(0);
  static const int NeighborhoodPara_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighborhoodPara, velocity_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighborhoodPara, top_frames_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighborhoodPara, dist_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighborhoodPara, occlusion_penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighborhoodPara, max_occlusion_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighborhoodPara, color_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighborhoodPara, neighbor_num_),
  };
  NeighborhoodPara_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NeighborhoodPara_descriptor_,
      NeighborhoodPara::default_instance_,
      NeighborhoodPara_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighborhoodPara, _has_bits_[0]),
      -1,
      -1,
      sizeof(NeighborhoodPara),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeighborhoodPara, _internal_metadata_),
      -1);
  GRICModelSelectionPara_descriptor_ = file->message_type(1);
  static const int GRICModelSelectionPara_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRICModelSelectionPara, noise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRICModelSelectionPara, lambda1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRICModelSelectionPara, lamnda2_),
  };
  GRICModelSelectionPara_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GRICModelSelectionPara_descriptor_,
      GRICModelSelectionPara::default_instance_,
      GRICModelSelectionPara_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRICModelSelectionPara, _has_bits_[0]),
      -1,
      -1,
      sizeof(GRICModelSelectionPara),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRICModelSelectionPara, _internal_metadata_),
      -1);
  PerspFittingPara_descriptor_ = file->message_type(2);
  static const int PerspFittingPara_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerspFittingPara, fh_fitting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerspFittingPara, fitting_error_),
  };
  PerspFittingPara_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PerspFittingPara_descriptor_,
      PerspFittingPara::default_instance_,
      PerspFittingPara_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerspFittingPara, _has_bits_[0]),
      -1,
      -1,
      sizeof(PerspFittingPara),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerspFittingPara, _internal_metadata_),
      -1);
  PerspFittingPara_FHFitting_descriptor_ = PerspFittingPara_descriptor_->enum_type(0);
  PerspFittingPara_FittingError_descriptor_ = PerspFittingPara_descriptor_->enum_type(1);
  OrthoFittingPara_descriptor_ = file->message_type(3);
  static const int OrthoFittingPara_offsets_[1] = {
  };
  OrthoFittingPara_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OrthoFittingPara_descriptor_,
      OrthoFittingPara::default_instance_,
      OrthoFittingPara_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoFittingPara, _has_bits_[0]),
      -1,
      -1,
      sizeof(OrthoFittingPara),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoFittingPara, _internal_metadata_),
      -1);
  SubspaceFittingPara_descriptor_ = file->message_type(4);
  static const int SubspaceFittingPara_offsets_[1] = {
  };
  SubspaceFittingPara_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubspaceFittingPara_descriptor_,
      SubspaceFittingPara::default_instance_,
      SubspaceFittingPara_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubspaceFittingPara, _has_bits_[0]),
      -1,
      -1,
      sizeof(SubspaceFittingPara),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubspaceFittingPara, _internal_metadata_),
      -1);
  ModelFittingPara_descriptor_ = file->message_type(5);
  static const int ModelFittingPara_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara, init_proposal_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara, mdl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara, iters_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara, persp_fitting_para_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara, ortho_fitting_para_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara, subspace_fitting_para_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara, fitting_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara, use_gric_model_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara, gric_model_selection_para_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara, graph_cut_para_),
  };
  ModelFittingPara_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelFittingPara_descriptor_,
      ModelFittingPara::default_instance_,
      ModelFittingPara_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara, _has_bits_[0]),
      -1,
      -1,
      sizeof(ModelFittingPara),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara, _internal_metadata_),
      -1);
  ModelFittingPara_GraphCutPara_descriptor_ = ModelFittingPara_descriptor_->nested_type(0);
  static const int ModelFittingPara_GraphCutPara_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara_GraphCutPara, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara_GraphCutPara, overlap_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara_GraphCutPara, pointwise_breaking_lambda_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara_GraphCutPara, pointwise_outlier_lambda_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara_GraphCutPara, pairwise_breaking_ma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara_GraphCutPara, pairwise_breaking_mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara_GraphCutPara, pairwise_breaking_mc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara_GraphCutPara, pairwise_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara_GraphCutPara, pairwise_sigma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara_GraphCutPara, neighbors_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara_GraphCutPara, overlap_neighbor_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara_GraphCutPara, lambda_weight_),
  };
  ModelFittingPara_GraphCutPara_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelFittingPara_GraphCutPara_descriptor_,
      ModelFittingPara_GraphCutPara::default_instance_,
      ModelFittingPara_GraphCutPara_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara_GraphCutPara, _has_bits_[0]),
      -1,
      -1,
      sizeof(ModelFittingPara_GraphCutPara),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelFittingPara_GraphCutPara, _internal_metadata_),
      -1);
  ModelFittingPara_GraphCutPara_Engine_descriptor_ = ModelFittingPara_GraphCutPara_descriptor_->enum_type(0);
  ModelFittingPara_FittingModel_descriptor_ = ModelFittingPara_descriptor_->enum_type(0);
  SegmentationPara_descriptor_ = file->message_type(6);
  static const int SegmentationPara_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationPara, tracks_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationPara, images_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationPara, min_vis_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationPara, model_fitting_para_),
  };
  SegmentationPara_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SegmentationPara_descriptor_,
      SegmentationPara::default_instance_,
      SegmentationPara_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationPara, _has_bits_[0]),
      -1,
      -1,
      sizeof(SegmentationPara),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationPara, _internal_metadata_),
      -1);
  OrthoReconstructionPara_descriptor_ = file->message_type(7);
  static const int OrthoReconstructionPara_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoReconstructionPara, mc1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoReconstructionPara, mc2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoReconstructionPara, mc3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoReconstructionPara, ba_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoReconstructionPara, alpha_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoReconstructionPara, alpha_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoReconstructionPara, alpha_prior_),
  };
  OrthoReconstructionPara_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OrthoReconstructionPara_descriptor_,
      OrthoReconstructionPara::default_instance_,
      OrthoReconstructionPara_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoReconstructionPara, _has_bits_[0]),
      -1,
      -1,
      sizeof(OrthoReconstructionPara),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrthoReconstructionPara, _internal_metadata_),
      -1);
  PerspReconstructionPara_descriptor_ = file->message_type(8);
  static const int PerspReconstructionPara_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerspReconstructionPara, fx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerspReconstructionPara, fy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerspReconstructionPara, u0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerspReconstructionPara, v0_),
  };
  PerspReconstructionPara_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PerspReconstructionPara_descriptor_,
      PerspReconstructionPara::default_instance_,
      PerspReconstructionPara_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerspReconstructionPara, _has_bits_[0]),
      -1,
      -1,
      sizeof(PerspReconstructionPara),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerspReconstructionPara, _internal_metadata_),
      -1);
  ReconstructionPara_descriptor_ = file->message_type(9);
  static const int ReconstructionPara_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconstructionPara, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconstructionPara, ortho_reconstruction_para_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconstructionPara, persp_reconstruction_para_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconstructionPara, thresh_),
  };
  ReconstructionPara_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReconstructionPara_descriptor_,
      ReconstructionPara::default_instance_,
      ReconstructionPara_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconstructionPara, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReconstructionPara),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconstructionPara, _internal_metadata_),
      -1);
  ReconstructionPara_ReconstructionPipeline_descriptor_ = ReconstructionPara_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_video_5fpopup_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NeighborhoodPara_descriptor_, &NeighborhoodPara::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GRICModelSelectionPara_descriptor_, &GRICModelSelectionPara::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PerspFittingPara_descriptor_, &PerspFittingPara::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OrthoFittingPara_descriptor_, &OrthoFittingPara::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubspaceFittingPara_descriptor_, &SubspaceFittingPara::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelFittingPara_descriptor_, &ModelFittingPara::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelFittingPara_GraphCutPara_descriptor_, &ModelFittingPara_GraphCutPara::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SegmentationPara_descriptor_, &SegmentationPara::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OrthoReconstructionPara_descriptor_, &OrthoReconstructionPara::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PerspReconstructionPara_descriptor_, &PerspReconstructionPara::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReconstructionPara_descriptor_, &ReconstructionPara::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_video_5fpopup_2eproto() {
  delete NeighborhoodPara::default_instance_;
  delete NeighborhoodPara_reflection_;
  delete GRICModelSelectionPara::default_instance_;
  delete GRICModelSelectionPara_reflection_;
  delete PerspFittingPara::default_instance_;
  delete PerspFittingPara_reflection_;
  delete OrthoFittingPara::default_instance_;
  delete OrthoFittingPara_reflection_;
  delete SubspaceFittingPara::default_instance_;
  delete SubspaceFittingPara_reflection_;
  delete ModelFittingPara::default_instance_;
  delete ModelFittingPara_reflection_;
  delete ModelFittingPara_GraphCutPara::default_instance_;
  delete ModelFittingPara_GraphCutPara_reflection_;
  delete SegmentationPara::default_instance_;
  delete SegmentationPara_reflection_;
  delete OrthoReconstructionPara::default_instance_;
  delete OrthoReconstructionPara_reflection_;
  delete PerspReconstructionPara::default_instance_;
  delete PerspReconstructionPara_reflection_;
  delete ReconstructionPara::default_instance_;
  delete ReconstructionPara_reflection_;
}

void protobuf_AddDesc_video_5fpopup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021video_popup.proto\022\013video_popup\"\343\001\n\020Nei"
    "ghborhoodPara\022\035\n\017velocity_weight\030\001 \001(\002:\004"
    "2000\022\032\n\016top_frames_num\030\002 \001(\005:\002-1\022\035\n\016dist"
    "_threshold\030\003 \001(\002:\00510000\022\036\n\021occlusion_pen"
    "alty\030\004 \001(\002:\003500\022 \n\024max_occlusion_frames\030"
    "\005 \001(\005:\00245\022\031\n\014color_weight\030\006 \001(\002:\0032.5\022\030\n\014"
    "neighbor_num\030\007 \001(\005:\00210\"X\n\026GRICModelSelec"
    "tionPara\022\023\n\005noise\030\001 \001(\002:\0040.05\022\022\n\007lambda1"
    "\030\002 \001(\002:\0011\022\025\n\007lamnda2\030\003 \001(\002:\0040.01\"\211\002\n\020Per"
    "spFittingPara\022B\n\nfh_fitting\030\001 \001(\0162\'.vide"
    "o_popup.PerspFittingPara.FHFitting:\005FONL"
    "Y\022J\n\rfitting_error\030\002 \001(\0162*.video_popup.P"
    "erspFittingPara.FittingError:\007ALGEBRA\",\n"
    "\tFHFitting\022\t\n\005FONLY\020\000\022\t\n\005HONLY\020\001\022\t\n\005FAND"
    "H\020\002\"7\n\014FittingError\022\013\n\007ALGEBRA\020\000\022\013\n\007SAMP"
    "SON\020\001\022\r\n\tGEOMETRIC\020\002\"\022\n\020OrthoFittingPara"
    "\"\025\n\023SubspaceFittingPara\"\267\010\n\020ModelFitting"
    "Para\022\014\n\004name\030\001 \001(\t\022\036\n\021init_proposal_num\030"
    "\002 \001(\005:\003200\022\021\n\003mdl\030\003 \001(\002:\0044000\022\024\n\titers_n"
    "um\030\004 \001(\002:\0015\0229\n\022persp_fitting_para\030e \001(\0132"
    "\035.video_popup.PerspFittingPara\0229\n\022ortho_"
    "fitting_para\030f \001(\0132\035.video_popup.OrthoFi"
    "ttingPara\022\?\n\025subspace_fitting_para\030g \001(\013"
    "2 .video_popup.SubspaceFittingPara\022H\n\rfi"
    "tting_model\030h \001(\0162*.video_popup.ModelFit"
    "tingPara.FittingModel:\005PERSP\022(\n\030use_gric"
    "_model_selection\030\311\001 \001(\010:\005false\022G\n\031gric_m"
    "odel_selection_para\030\312\001 \001(\0132#.video_popup"
    ".GRICModelSelectionPara\022C\n\016graph_cut_par"
    "a\030\255\002 \001(\0132*.video_popup.ModelFittingPara."
    "GraphCutPara\032\336\003\n\014GraphCutPara\022H\n\006engine\030"
    "\001 \001(\01621.video_popup.ModelFittingPara.Gra"
    "phCutPara.Engine:\005ALLGC\022\027\n\014overlap_cost\030"
    "\002 \001(\002:\0011\022$\n\031pointwise_breaking_lambda\030\003 "
    "\001(\002:\0011\022#\n\030pointwise_outlier_lambda\030\004 \001(\002"
    ":\0011\022!\n\024pairwise_breaking_ma\030\005 \001(\002:\003100\022!"
    "\n\024pairwise_breaking_mb\030\006 \001(\002:\003100\022 \n\024pai"
    "rwise_breaking_mc\030\007 \001(\002:\00230\022\034\n\017pairwise_"
    "weight\030\010 \001(\002:\003100\022\032\n\016pairwise_sigma\030\t \001("
    "\002:\00210\022\030\n\rneighbors_num\030\n \001(\005:\0015\022\037\n\024overl"
    "ap_neighbor_num\030\013 \001(\005:\0015\022\030\n\rlambda_weigh"
    "t\030\014 \001(\002:\0011\")\n\006Engine\022\t\n\005ALPHA\020\000\022\t\n\005MULTI"
    "\020\001\022\t\n\005ALLGC\020\002\"2\n\014FittingModel\022\t\n\005PERSP\020\000"
    "\022\t\n\005ORTHO\020\001\022\014\n\010SUBSPACE\020\002\"\222\001\n\020Segmentati"
    "onPara\022\023\n\013tracks_path\030\001 \001(\t\022\023\n\013images_pa"
    "th\030\002 \001(\t\022\031\n\016min_vis_frames\030\003 \001(\005:\0015\0229\n\022m"
    "odel_fitting_para\030e \001(\0132\035.video_popup.Mo"
    "delFittingPara\"\253\001\n\027OrthoReconstructionPa"
    "ra\022\022\n\003MC1\030\001 \001(\002:\0050.001\022\017\n\003MC2\030\002 \001(\002:\00220\022"
    "\017\n\003MC3\030\003 \001(\002:\00210\022\023\n\010ba_model\030\004 \001(\005:\0010\022\025\n"
    "\007alpha_s\030\005 \001(\002:\0040.01\022\025\n\007alpha_z\030\006 \001(\002:\0040"
    ".01\022\027\n\013alpha_prior\030\007 \001(\002:\00210\"]\n\027PerspRec"
    "onstructionPara\022\017\n\002fx\030\001 \001(\002:\003800\022\017\n\002fy\030\002"
    " \001(\002:\003800\022\017\n\002u0\030\003 \001(\002:\003640\022\017\n\002v0\030\004 \001(\002:\003"
    "360\"\322\003\n\022ReconstructionPara\022a\n\006method\030\001 \001"
    "(\01626.video_popup.ReconstructionPara.Reco"
    "nstructionPipeline:\031ORTHO_PIECEWISE_STIT"
    "CHING\022G\n\031ortho_reconstruction_para\030\002 \001(\013"
    "2$.video_popup.OrthoReconstructionPara\022G"
    "\n\031persp_reconstruction_para\030\003 \001(\0132$.vide"
    "o_popup.PerspReconstructionPara\022\022\n\006thres"
    "h\030e \001(\005:\00250\"\262\001\n\026ReconstructionPipeline\022\035"
    "\n\031ORTHO_PIECEWISE_STITCHING\020\000\022\032\n\026ORTHO_P"
    "IECEWISE_GLOBAL\020\001\022\020\n\014ORTHO_GLOBAL\020\002\022\035\n\031P"
    "ERSP_PIECEWISE_STITCHING\020\003\022\032\n\026PERSP_PIEC"
    "EWISE_GLOBAL\020\004\022\020\n\014PERSP_GLOBAL\020\005", 2632);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "video_popup.proto", &protobuf_RegisterTypes);
  NeighborhoodPara::default_instance_ = new NeighborhoodPara();
  GRICModelSelectionPara::default_instance_ = new GRICModelSelectionPara();
  PerspFittingPara::default_instance_ = new PerspFittingPara();
  OrthoFittingPara::default_instance_ = new OrthoFittingPara();
  SubspaceFittingPara::default_instance_ = new SubspaceFittingPara();
  ModelFittingPara::default_instance_ = new ModelFittingPara();
  ModelFittingPara_GraphCutPara::default_instance_ = new ModelFittingPara_GraphCutPara();
  SegmentationPara::default_instance_ = new SegmentationPara();
  OrthoReconstructionPara::default_instance_ = new OrthoReconstructionPara();
  PerspReconstructionPara::default_instance_ = new PerspReconstructionPara();
  ReconstructionPara::default_instance_ = new ReconstructionPara();
  NeighborhoodPara::default_instance_->InitAsDefaultInstance();
  GRICModelSelectionPara::default_instance_->InitAsDefaultInstance();
  PerspFittingPara::default_instance_->InitAsDefaultInstance();
  OrthoFittingPara::default_instance_->InitAsDefaultInstance();
  SubspaceFittingPara::default_instance_->InitAsDefaultInstance();
  ModelFittingPara::default_instance_->InitAsDefaultInstance();
  ModelFittingPara_GraphCutPara::default_instance_->InitAsDefaultInstance();
  SegmentationPara::default_instance_->InitAsDefaultInstance();
  OrthoReconstructionPara::default_instance_->InitAsDefaultInstance();
  PerspReconstructionPara::default_instance_->InitAsDefaultInstance();
  ReconstructionPara::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_video_5fpopup_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_video_5fpopup_2eproto {
  StaticDescriptorInitializer_video_5fpopup_2eproto() {
    protobuf_AddDesc_video_5fpopup_2eproto();
  }
} static_descriptor_initializer_video_5fpopup_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NeighborhoodPara::kVelocityWeightFieldNumber;
const int NeighborhoodPara::kTopFramesNumFieldNumber;
const int NeighborhoodPara::kDistThresholdFieldNumber;
const int NeighborhoodPara::kOcclusionPenaltyFieldNumber;
const int NeighborhoodPara::kMaxOcclusionFramesFieldNumber;
const int NeighborhoodPara::kColorWeightFieldNumber;
const int NeighborhoodPara::kNeighborNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NeighborhoodPara::NeighborhoodPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_popup.NeighborhoodPara)
}

void NeighborhoodPara::InitAsDefaultInstance() {
}

NeighborhoodPara::NeighborhoodPara(const NeighborhoodPara& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_popup.NeighborhoodPara)
}

void NeighborhoodPara::SharedCtor() {
  _cached_size_ = 0;
  velocity_weight_ = 2000;
  top_frames_num_ = -1;
  dist_threshold_ = 10000;
  occlusion_penalty_ = 500;
  max_occlusion_frames_ = 45;
  color_weight_ = 2.5f;
  neighbor_num_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NeighborhoodPara::~NeighborhoodPara() {
  // @@protoc_insertion_point(destructor:video_popup.NeighborhoodPara)
  SharedDtor();
}

void NeighborhoodPara::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NeighborhoodPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeighborhoodPara::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NeighborhoodPara_descriptor_;
}

const NeighborhoodPara& NeighborhoodPara::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_5fpopup_2eproto();
  return *default_instance_;
}

NeighborhoodPara* NeighborhoodPara::default_instance_ = NULL;

NeighborhoodPara* NeighborhoodPara::New(::google::protobuf::Arena* arena) const {
  NeighborhoodPara* n = new NeighborhoodPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NeighborhoodPara::Clear() {
  if (_has_bits_[0 / 32] & 127u) {
    velocity_weight_ = 2000;
    top_frames_num_ = -1;
    dist_threshold_ = 10000;
    occlusion_penalty_ = 500;
    max_occlusion_frames_ = 45;
    color_weight_ = 2.5f;
    neighbor_num_ = 10;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NeighborhoodPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_popup.NeighborhoodPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float velocity_weight = 1 [default = 2000];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_weight_)));
          set_has_velocity_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_top_frames_num;
        break;
      }

      // optional int32 top_frames_num = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_top_frames_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_frames_num_)));
          set_has_top_frames_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_dist_threshold;
        break;
      }

      // optional float dist_threshold = 3 [default = 10000];
      case 3: {
        if (tag == 29) {
         parse_dist_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dist_threshold_)));
          set_has_dist_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_occlusion_penalty;
        break;
      }

      // optional float occlusion_penalty = 4 [default = 500];
      case 4: {
        if (tag == 37) {
         parse_occlusion_penalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &occlusion_penalty_)));
          set_has_occlusion_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_occlusion_frames;
        break;
      }

      // optional int32 max_occlusion_frames = 5 [default = 45];
      case 5: {
        if (tag == 40) {
         parse_max_occlusion_frames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_occlusion_frames_)));
          set_has_max_occlusion_frames();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_color_weight;
        break;
      }

      // optional float color_weight = 6 [default = 2.5];
      case 6: {
        if (tag == 53) {
         parse_color_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_weight_)));
          set_has_color_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_neighbor_num;
        break;
      }

      // optional int32 neighbor_num = 7 [default = 10];
      case 7: {
        if (tag == 56) {
         parse_neighbor_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &neighbor_num_)));
          set_has_neighbor_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_popup.NeighborhoodPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_popup.NeighborhoodPara)
  return false;
#undef DO_
}

void NeighborhoodPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_popup.NeighborhoodPara)
  // optional float velocity_weight = 1 [default = 2000];
  if (has_velocity_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->velocity_weight(), output);
  }

  // optional int32 top_frames_num = 2 [default = -1];
  if (has_top_frames_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->top_frames_num(), output);
  }

  // optional float dist_threshold = 3 [default = 10000];
  if (has_dist_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dist_threshold(), output);
  }

  // optional float occlusion_penalty = 4 [default = 500];
  if (has_occlusion_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->occlusion_penalty(), output);
  }

  // optional int32 max_occlusion_frames = 5 [default = 45];
  if (has_max_occlusion_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_occlusion_frames(), output);
  }

  // optional float color_weight = 6 [default = 2.5];
  if (has_color_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->color_weight(), output);
  }

  // optional int32 neighbor_num = 7 [default = 10];
  if (has_neighbor_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->neighbor_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_popup.NeighborhoodPara)
}

::google::protobuf::uint8* NeighborhoodPara::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_popup.NeighborhoodPara)
  // optional float velocity_weight = 1 [default = 2000];
  if (has_velocity_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->velocity_weight(), target);
  }

  // optional int32 top_frames_num = 2 [default = -1];
  if (has_top_frames_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->top_frames_num(), target);
  }

  // optional float dist_threshold = 3 [default = 10000];
  if (has_dist_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dist_threshold(), target);
  }

  // optional float occlusion_penalty = 4 [default = 500];
  if (has_occlusion_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->occlusion_penalty(), target);
  }

  // optional int32 max_occlusion_frames = 5 [default = 45];
  if (has_max_occlusion_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_occlusion_frames(), target);
  }

  // optional float color_weight = 6 [default = 2.5];
  if (has_color_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->color_weight(), target);
  }

  // optional int32 neighbor_num = 7 [default = 10];
  if (has_neighbor_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->neighbor_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_popup.NeighborhoodPara)
  return target;
}

int NeighborhoodPara::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional float velocity_weight = 1 [default = 2000];
    if (has_velocity_weight()) {
      total_size += 1 + 4;
    }

    // optional int32 top_frames_num = 2 [default = -1];
    if (has_top_frames_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_frames_num());
    }

    // optional float dist_threshold = 3 [default = 10000];
    if (has_dist_threshold()) {
      total_size += 1 + 4;
    }

    // optional float occlusion_penalty = 4 [default = 500];
    if (has_occlusion_penalty()) {
      total_size += 1 + 4;
    }

    // optional int32 max_occlusion_frames = 5 [default = 45];
    if (has_max_occlusion_frames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_occlusion_frames());
    }

    // optional float color_weight = 6 [default = 2.5];
    if (has_color_weight()) {
      total_size += 1 + 4;
    }

    // optional int32 neighbor_num = 7 [default = 10];
    if (has_neighbor_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->neighbor_num());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeighborhoodPara::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NeighborhoodPara* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NeighborhoodPara>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NeighborhoodPara::MergeFrom(const NeighborhoodPara& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_velocity_weight()) {
      set_velocity_weight(from.velocity_weight());
    }
    if (from.has_top_frames_num()) {
      set_top_frames_num(from.top_frames_num());
    }
    if (from.has_dist_threshold()) {
      set_dist_threshold(from.dist_threshold());
    }
    if (from.has_occlusion_penalty()) {
      set_occlusion_penalty(from.occlusion_penalty());
    }
    if (from.has_max_occlusion_frames()) {
      set_max_occlusion_frames(from.max_occlusion_frames());
    }
    if (from.has_color_weight()) {
      set_color_weight(from.color_weight());
    }
    if (from.has_neighbor_num()) {
      set_neighbor_num(from.neighbor_num());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NeighborhoodPara::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeighborhoodPara::CopyFrom(const NeighborhoodPara& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighborhoodPara::IsInitialized() const {

  return true;
}

void NeighborhoodPara::Swap(NeighborhoodPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NeighborhoodPara::InternalSwap(NeighborhoodPara* other) {
  std::swap(velocity_weight_, other->velocity_weight_);
  std::swap(top_frames_num_, other->top_frames_num_);
  std::swap(dist_threshold_, other->dist_threshold_);
  std::swap(occlusion_penalty_, other->occlusion_penalty_);
  std::swap(max_occlusion_frames_, other->max_occlusion_frames_);
  std::swap(color_weight_, other->color_weight_);
  std::swap(neighbor_num_, other->neighbor_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NeighborhoodPara::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NeighborhoodPara_descriptor_;
  metadata.reflection = NeighborhoodPara_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NeighborhoodPara

// optional float velocity_weight = 1 [default = 2000];
bool NeighborhoodPara::has_velocity_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NeighborhoodPara::set_has_velocity_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void NeighborhoodPara::clear_has_velocity_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void NeighborhoodPara::clear_velocity_weight() {
  velocity_weight_ = 2000;
  clear_has_velocity_weight();
}
 float NeighborhoodPara::velocity_weight() const {
  // @@protoc_insertion_point(field_get:video_popup.NeighborhoodPara.velocity_weight)
  return velocity_weight_;
}
 void NeighborhoodPara::set_velocity_weight(float value) {
  set_has_velocity_weight();
  velocity_weight_ = value;
  // @@protoc_insertion_point(field_set:video_popup.NeighborhoodPara.velocity_weight)
}

// optional int32 top_frames_num = 2 [default = -1];
bool NeighborhoodPara::has_top_frames_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NeighborhoodPara::set_has_top_frames_num() {
  _has_bits_[0] |= 0x00000002u;
}
void NeighborhoodPara::clear_has_top_frames_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void NeighborhoodPara::clear_top_frames_num() {
  top_frames_num_ = -1;
  clear_has_top_frames_num();
}
 ::google::protobuf::int32 NeighborhoodPara::top_frames_num() const {
  // @@protoc_insertion_point(field_get:video_popup.NeighborhoodPara.top_frames_num)
  return top_frames_num_;
}
 void NeighborhoodPara::set_top_frames_num(::google::protobuf::int32 value) {
  set_has_top_frames_num();
  top_frames_num_ = value;
  // @@protoc_insertion_point(field_set:video_popup.NeighborhoodPara.top_frames_num)
}

// optional float dist_threshold = 3 [default = 10000];
bool NeighborhoodPara::has_dist_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NeighborhoodPara::set_has_dist_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
void NeighborhoodPara::clear_has_dist_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
void NeighborhoodPara::clear_dist_threshold() {
  dist_threshold_ = 10000;
  clear_has_dist_threshold();
}
 float NeighborhoodPara::dist_threshold() const {
  // @@protoc_insertion_point(field_get:video_popup.NeighborhoodPara.dist_threshold)
  return dist_threshold_;
}
 void NeighborhoodPara::set_dist_threshold(float value) {
  set_has_dist_threshold();
  dist_threshold_ = value;
  // @@protoc_insertion_point(field_set:video_popup.NeighborhoodPara.dist_threshold)
}

// optional float occlusion_penalty = 4 [default = 500];
bool NeighborhoodPara::has_occlusion_penalty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NeighborhoodPara::set_has_occlusion_penalty() {
  _has_bits_[0] |= 0x00000008u;
}
void NeighborhoodPara::clear_has_occlusion_penalty() {
  _has_bits_[0] &= ~0x00000008u;
}
void NeighborhoodPara::clear_occlusion_penalty() {
  occlusion_penalty_ = 500;
  clear_has_occlusion_penalty();
}
 float NeighborhoodPara::occlusion_penalty() const {
  // @@protoc_insertion_point(field_get:video_popup.NeighborhoodPara.occlusion_penalty)
  return occlusion_penalty_;
}
 void NeighborhoodPara::set_occlusion_penalty(float value) {
  set_has_occlusion_penalty();
  occlusion_penalty_ = value;
  // @@protoc_insertion_point(field_set:video_popup.NeighborhoodPara.occlusion_penalty)
}

// optional int32 max_occlusion_frames = 5 [default = 45];
bool NeighborhoodPara::has_max_occlusion_frames() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NeighborhoodPara::set_has_max_occlusion_frames() {
  _has_bits_[0] |= 0x00000010u;
}
void NeighborhoodPara::clear_has_max_occlusion_frames() {
  _has_bits_[0] &= ~0x00000010u;
}
void NeighborhoodPara::clear_max_occlusion_frames() {
  max_occlusion_frames_ = 45;
  clear_has_max_occlusion_frames();
}
 ::google::protobuf::int32 NeighborhoodPara::max_occlusion_frames() const {
  // @@protoc_insertion_point(field_get:video_popup.NeighborhoodPara.max_occlusion_frames)
  return max_occlusion_frames_;
}
 void NeighborhoodPara::set_max_occlusion_frames(::google::protobuf::int32 value) {
  set_has_max_occlusion_frames();
  max_occlusion_frames_ = value;
  // @@protoc_insertion_point(field_set:video_popup.NeighborhoodPara.max_occlusion_frames)
}

// optional float color_weight = 6 [default = 2.5];
bool NeighborhoodPara::has_color_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NeighborhoodPara::set_has_color_weight() {
  _has_bits_[0] |= 0x00000020u;
}
void NeighborhoodPara::clear_has_color_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
void NeighborhoodPara::clear_color_weight() {
  color_weight_ = 2.5f;
  clear_has_color_weight();
}
 float NeighborhoodPara::color_weight() const {
  // @@protoc_insertion_point(field_get:video_popup.NeighborhoodPara.color_weight)
  return color_weight_;
}
 void NeighborhoodPara::set_color_weight(float value) {
  set_has_color_weight();
  color_weight_ = value;
  // @@protoc_insertion_point(field_set:video_popup.NeighborhoodPara.color_weight)
}

// optional int32 neighbor_num = 7 [default = 10];
bool NeighborhoodPara::has_neighbor_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NeighborhoodPara::set_has_neighbor_num() {
  _has_bits_[0] |= 0x00000040u;
}
void NeighborhoodPara::clear_has_neighbor_num() {
  _has_bits_[0] &= ~0x00000040u;
}
void NeighborhoodPara::clear_neighbor_num() {
  neighbor_num_ = 10;
  clear_has_neighbor_num();
}
 ::google::protobuf::int32 NeighborhoodPara::neighbor_num() const {
  // @@protoc_insertion_point(field_get:video_popup.NeighborhoodPara.neighbor_num)
  return neighbor_num_;
}
 void NeighborhoodPara::set_neighbor_num(::google::protobuf::int32 value) {
  set_has_neighbor_num();
  neighbor_num_ = value;
  // @@protoc_insertion_point(field_set:video_popup.NeighborhoodPara.neighbor_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GRICModelSelectionPara::kNoiseFieldNumber;
const int GRICModelSelectionPara::kLambda1FieldNumber;
const int GRICModelSelectionPara::kLamnda2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GRICModelSelectionPara::GRICModelSelectionPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_popup.GRICModelSelectionPara)
}

void GRICModelSelectionPara::InitAsDefaultInstance() {
}

GRICModelSelectionPara::GRICModelSelectionPara(const GRICModelSelectionPara& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_popup.GRICModelSelectionPara)
}

void GRICModelSelectionPara::SharedCtor() {
  _cached_size_ = 0;
  noise_ = 0.05f;
  lambda1_ = 1;
  lamnda2_ = 0.01f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GRICModelSelectionPara::~GRICModelSelectionPara() {
  // @@protoc_insertion_point(destructor:video_popup.GRICModelSelectionPara)
  SharedDtor();
}

void GRICModelSelectionPara::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GRICModelSelectionPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GRICModelSelectionPara::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GRICModelSelectionPara_descriptor_;
}

const GRICModelSelectionPara& GRICModelSelectionPara::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_5fpopup_2eproto();
  return *default_instance_;
}

GRICModelSelectionPara* GRICModelSelectionPara::default_instance_ = NULL;

GRICModelSelectionPara* GRICModelSelectionPara::New(::google::protobuf::Arena* arena) const {
  GRICModelSelectionPara* n = new GRICModelSelectionPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GRICModelSelectionPara::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    noise_ = 0.05f;
    lambda1_ = 1;
    lamnda2_ = 0.01f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GRICModelSelectionPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_popup.GRICModelSelectionPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float noise = 1 [default = 0.05];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &noise_)));
          set_has_noise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_lambda1;
        break;
      }

      // optional float lambda1 = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_lambda1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lambda1_)));
          set_has_lambda1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_lamnda2;
        break;
      }

      // optional float lamnda2 = 3 [default = 0.01];
      case 3: {
        if (tag == 29) {
         parse_lamnda2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lamnda2_)));
          set_has_lamnda2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_popup.GRICModelSelectionPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_popup.GRICModelSelectionPara)
  return false;
#undef DO_
}

void GRICModelSelectionPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_popup.GRICModelSelectionPara)
  // optional float noise = 1 [default = 0.05];
  if (has_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->noise(), output);
  }

  // optional float lambda1 = 2 [default = 1];
  if (has_lambda1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lambda1(), output);
  }

  // optional float lamnda2 = 3 [default = 0.01];
  if (has_lamnda2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lamnda2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_popup.GRICModelSelectionPara)
}

::google::protobuf::uint8* GRICModelSelectionPara::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_popup.GRICModelSelectionPara)
  // optional float noise = 1 [default = 0.05];
  if (has_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->noise(), target);
  }

  // optional float lambda1 = 2 [default = 1];
  if (has_lambda1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lambda1(), target);
  }

  // optional float lamnda2 = 3 [default = 0.01];
  if (has_lamnda2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lamnda2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_popup.GRICModelSelectionPara)
  return target;
}

int GRICModelSelectionPara::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float noise = 1 [default = 0.05];
    if (has_noise()) {
      total_size += 1 + 4;
    }

    // optional float lambda1 = 2 [default = 1];
    if (has_lambda1()) {
      total_size += 1 + 4;
    }

    // optional float lamnda2 = 3 [default = 0.01];
    if (has_lamnda2()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GRICModelSelectionPara::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GRICModelSelectionPara* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GRICModelSelectionPara>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GRICModelSelectionPara::MergeFrom(const GRICModelSelectionPara& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noise()) {
      set_noise(from.noise());
    }
    if (from.has_lambda1()) {
      set_lambda1(from.lambda1());
    }
    if (from.has_lamnda2()) {
      set_lamnda2(from.lamnda2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GRICModelSelectionPara::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GRICModelSelectionPara::CopyFrom(const GRICModelSelectionPara& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GRICModelSelectionPara::IsInitialized() const {

  return true;
}

void GRICModelSelectionPara::Swap(GRICModelSelectionPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GRICModelSelectionPara::InternalSwap(GRICModelSelectionPara* other) {
  std::swap(noise_, other->noise_);
  std::swap(lambda1_, other->lambda1_);
  std::swap(lamnda2_, other->lamnda2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GRICModelSelectionPara::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GRICModelSelectionPara_descriptor_;
  metadata.reflection = GRICModelSelectionPara_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GRICModelSelectionPara

// optional float noise = 1 [default = 0.05];
bool GRICModelSelectionPara::has_noise() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GRICModelSelectionPara::set_has_noise() {
  _has_bits_[0] |= 0x00000001u;
}
void GRICModelSelectionPara::clear_has_noise() {
  _has_bits_[0] &= ~0x00000001u;
}
void GRICModelSelectionPara::clear_noise() {
  noise_ = 0.05f;
  clear_has_noise();
}
 float GRICModelSelectionPara::noise() const {
  // @@protoc_insertion_point(field_get:video_popup.GRICModelSelectionPara.noise)
  return noise_;
}
 void GRICModelSelectionPara::set_noise(float value) {
  set_has_noise();
  noise_ = value;
  // @@protoc_insertion_point(field_set:video_popup.GRICModelSelectionPara.noise)
}

// optional float lambda1 = 2 [default = 1];
bool GRICModelSelectionPara::has_lambda1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GRICModelSelectionPara::set_has_lambda1() {
  _has_bits_[0] |= 0x00000002u;
}
void GRICModelSelectionPara::clear_has_lambda1() {
  _has_bits_[0] &= ~0x00000002u;
}
void GRICModelSelectionPara::clear_lambda1() {
  lambda1_ = 1;
  clear_has_lambda1();
}
 float GRICModelSelectionPara::lambda1() const {
  // @@protoc_insertion_point(field_get:video_popup.GRICModelSelectionPara.lambda1)
  return lambda1_;
}
 void GRICModelSelectionPara::set_lambda1(float value) {
  set_has_lambda1();
  lambda1_ = value;
  // @@protoc_insertion_point(field_set:video_popup.GRICModelSelectionPara.lambda1)
}

// optional float lamnda2 = 3 [default = 0.01];
bool GRICModelSelectionPara::has_lamnda2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GRICModelSelectionPara::set_has_lamnda2() {
  _has_bits_[0] |= 0x00000004u;
}
void GRICModelSelectionPara::clear_has_lamnda2() {
  _has_bits_[0] &= ~0x00000004u;
}
void GRICModelSelectionPara::clear_lamnda2() {
  lamnda2_ = 0.01f;
  clear_has_lamnda2();
}
 float GRICModelSelectionPara::lamnda2() const {
  // @@protoc_insertion_point(field_get:video_popup.GRICModelSelectionPara.lamnda2)
  return lamnda2_;
}
 void GRICModelSelectionPara::set_lamnda2(float value) {
  set_has_lamnda2();
  lamnda2_ = value;
  // @@protoc_insertion_point(field_set:video_popup.GRICModelSelectionPara.lamnda2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PerspFittingPara_FHFitting_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerspFittingPara_FHFitting_descriptor_;
}
bool PerspFittingPara_FHFitting_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerspFittingPara_FHFitting PerspFittingPara::FONLY;
const PerspFittingPara_FHFitting PerspFittingPara::HONLY;
const PerspFittingPara_FHFitting PerspFittingPara::FANDH;
const PerspFittingPara_FHFitting PerspFittingPara::FHFitting_MIN;
const PerspFittingPara_FHFitting PerspFittingPara::FHFitting_MAX;
const int PerspFittingPara::FHFitting_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PerspFittingPara_FittingError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerspFittingPara_FittingError_descriptor_;
}
bool PerspFittingPara_FittingError_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerspFittingPara_FittingError PerspFittingPara::ALGEBRA;
const PerspFittingPara_FittingError PerspFittingPara::SAMPSON;
const PerspFittingPara_FittingError PerspFittingPara::GEOMETRIC;
const PerspFittingPara_FittingError PerspFittingPara::FittingError_MIN;
const PerspFittingPara_FittingError PerspFittingPara::FittingError_MAX;
const int PerspFittingPara::FittingError_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerspFittingPara::kFhFittingFieldNumber;
const int PerspFittingPara::kFittingErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerspFittingPara::PerspFittingPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_popup.PerspFittingPara)
}

void PerspFittingPara::InitAsDefaultInstance() {
}

PerspFittingPara::PerspFittingPara(const PerspFittingPara& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_popup.PerspFittingPara)
}

void PerspFittingPara::SharedCtor() {
  _cached_size_ = 0;
  fh_fitting_ = 0;
  fitting_error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerspFittingPara::~PerspFittingPara() {
  // @@protoc_insertion_point(destructor:video_popup.PerspFittingPara)
  SharedDtor();
}

void PerspFittingPara::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PerspFittingPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerspFittingPara::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerspFittingPara_descriptor_;
}

const PerspFittingPara& PerspFittingPara::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_5fpopup_2eproto();
  return *default_instance_;
}

PerspFittingPara* PerspFittingPara::default_instance_ = NULL;

PerspFittingPara* PerspFittingPara::New(::google::protobuf::Arena* arena) const {
  PerspFittingPara* n = new PerspFittingPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerspFittingPara::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PerspFittingPara*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fh_fitting_, fitting_error_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PerspFittingPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_popup.PerspFittingPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .video_popup.PerspFittingPara.FHFitting fh_fitting = 1 [default = FONLY];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::video_popup::PerspFittingPara_FHFitting_IsValid(value)) {
            set_fh_fitting(static_cast< ::video_popup::PerspFittingPara_FHFitting >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fitting_error;
        break;
      }

      // optional .video_popup.PerspFittingPara.FittingError fitting_error = 2 [default = ALGEBRA];
      case 2: {
        if (tag == 16) {
         parse_fitting_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::video_popup::PerspFittingPara_FittingError_IsValid(value)) {
            set_fitting_error(static_cast< ::video_popup::PerspFittingPara_FittingError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_popup.PerspFittingPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_popup.PerspFittingPara)
  return false;
#undef DO_
}

void PerspFittingPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_popup.PerspFittingPara)
  // optional .video_popup.PerspFittingPara.FHFitting fh_fitting = 1 [default = FONLY];
  if (has_fh_fitting()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->fh_fitting(), output);
  }

  // optional .video_popup.PerspFittingPara.FittingError fitting_error = 2 [default = ALGEBRA];
  if (has_fitting_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->fitting_error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_popup.PerspFittingPara)
}

::google::protobuf::uint8* PerspFittingPara::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_popup.PerspFittingPara)
  // optional .video_popup.PerspFittingPara.FHFitting fh_fitting = 1 [default = FONLY];
  if (has_fh_fitting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->fh_fitting(), target);
  }

  // optional .video_popup.PerspFittingPara.FittingError fitting_error = 2 [default = ALGEBRA];
  if (has_fitting_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->fitting_error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_popup.PerspFittingPara)
  return target;
}

int PerspFittingPara::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .video_popup.PerspFittingPara.FHFitting fh_fitting = 1 [default = FONLY];
    if (has_fh_fitting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fh_fitting());
    }

    // optional .video_popup.PerspFittingPara.FittingError fitting_error = 2 [default = ALGEBRA];
    if (has_fitting_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fitting_error());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerspFittingPara::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PerspFittingPara* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PerspFittingPara>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PerspFittingPara::MergeFrom(const PerspFittingPara& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fh_fitting()) {
      set_fh_fitting(from.fh_fitting());
    }
    if (from.has_fitting_error()) {
      set_fitting_error(from.fitting_error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PerspFittingPara::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerspFittingPara::CopyFrom(const PerspFittingPara& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerspFittingPara::IsInitialized() const {

  return true;
}

void PerspFittingPara::Swap(PerspFittingPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerspFittingPara::InternalSwap(PerspFittingPara* other) {
  std::swap(fh_fitting_, other->fh_fitting_);
  std::swap(fitting_error_, other->fitting_error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerspFittingPara::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerspFittingPara_descriptor_;
  metadata.reflection = PerspFittingPara_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerspFittingPara

// optional .video_popup.PerspFittingPara.FHFitting fh_fitting = 1 [default = FONLY];
bool PerspFittingPara::has_fh_fitting() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerspFittingPara::set_has_fh_fitting() {
  _has_bits_[0] |= 0x00000001u;
}
void PerspFittingPara::clear_has_fh_fitting() {
  _has_bits_[0] &= ~0x00000001u;
}
void PerspFittingPara::clear_fh_fitting() {
  fh_fitting_ = 0;
  clear_has_fh_fitting();
}
 ::video_popup::PerspFittingPara_FHFitting PerspFittingPara::fh_fitting() const {
  // @@protoc_insertion_point(field_get:video_popup.PerspFittingPara.fh_fitting)
  return static_cast< ::video_popup::PerspFittingPara_FHFitting >(fh_fitting_);
}
 void PerspFittingPara::set_fh_fitting(::video_popup::PerspFittingPara_FHFitting value) {
  assert(::video_popup::PerspFittingPara_FHFitting_IsValid(value));
  set_has_fh_fitting();
  fh_fitting_ = value;
  // @@protoc_insertion_point(field_set:video_popup.PerspFittingPara.fh_fitting)
}

// optional .video_popup.PerspFittingPara.FittingError fitting_error = 2 [default = ALGEBRA];
bool PerspFittingPara::has_fitting_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerspFittingPara::set_has_fitting_error() {
  _has_bits_[0] |= 0x00000002u;
}
void PerspFittingPara::clear_has_fitting_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerspFittingPara::clear_fitting_error() {
  fitting_error_ = 0;
  clear_has_fitting_error();
}
 ::video_popup::PerspFittingPara_FittingError PerspFittingPara::fitting_error() const {
  // @@protoc_insertion_point(field_get:video_popup.PerspFittingPara.fitting_error)
  return static_cast< ::video_popup::PerspFittingPara_FittingError >(fitting_error_);
}
 void PerspFittingPara::set_fitting_error(::video_popup::PerspFittingPara_FittingError value) {
  assert(::video_popup::PerspFittingPara_FittingError_IsValid(value));
  set_has_fitting_error();
  fitting_error_ = value;
  // @@protoc_insertion_point(field_set:video_popup.PerspFittingPara.fitting_error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrthoFittingPara::OrthoFittingPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_popup.OrthoFittingPara)
}

void OrthoFittingPara::InitAsDefaultInstance() {
}

OrthoFittingPara::OrthoFittingPara(const OrthoFittingPara& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_popup.OrthoFittingPara)
}

void OrthoFittingPara::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrthoFittingPara::~OrthoFittingPara() {
  // @@protoc_insertion_point(destructor:video_popup.OrthoFittingPara)
  SharedDtor();
}

void OrthoFittingPara::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrthoFittingPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrthoFittingPara::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrthoFittingPara_descriptor_;
}

const OrthoFittingPara& OrthoFittingPara::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_5fpopup_2eproto();
  return *default_instance_;
}

OrthoFittingPara* OrthoFittingPara::default_instance_ = NULL;

OrthoFittingPara* OrthoFittingPara::New(::google::protobuf::Arena* arena) const {
  OrthoFittingPara* n = new OrthoFittingPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrthoFittingPara::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OrthoFittingPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_popup.OrthoFittingPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:video_popup.OrthoFittingPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_popup.OrthoFittingPara)
  return false;
#undef DO_
}

void OrthoFittingPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_popup.OrthoFittingPara)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_popup.OrthoFittingPara)
}

::google::protobuf::uint8* OrthoFittingPara::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_popup.OrthoFittingPara)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_popup.OrthoFittingPara)
  return target;
}

int OrthoFittingPara::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrthoFittingPara::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OrthoFittingPara* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OrthoFittingPara>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrthoFittingPara::MergeFrom(const OrthoFittingPara& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OrthoFittingPara::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrthoFittingPara::CopyFrom(const OrthoFittingPara& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrthoFittingPara::IsInitialized() const {

  return true;
}

void OrthoFittingPara::Swap(OrthoFittingPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrthoFittingPara::InternalSwap(OrthoFittingPara* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrthoFittingPara::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrthoFittingPara_descriptor_;
  metadata.reflection = OrthoFittingPara_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrthoFittingPara

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubspaceFittingPara::SubspaceFittingPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_popup.SubspaceFittingPara)
}

void SubspaceFittingPara::InitAsDefaultInstance() {
}

SubspaceFittingPara::SubspaceFittingPara(const SubspaceFittingPara& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_popup.SubspaceFittingPara)
}

void SubspaceFittingPara::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubspaceFittingPara::~SubspaceFittingPara() {
  // @@protoc_insertion_point(destructor:video_popup.SubspaceFittingPara)
  SharedDtor();
}

void SubspaceFittingPara::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubspaceFittingPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubspaceFittingPara::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubspaceFittingPara_descriptor_;
}

const SubspaceFittingPara& SubspaceFittingPara::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_5fpopup_2eproto();
  return *default_instance_;
}

SubspaceFittingPara* SubspaceFittingPara::default_instance_ = NULL;

SubspaceFittingPara* SubspaceFittingPara::New(::google::protobuf::Arena* arena) const {
  SubspaceFittingPara* n = new SubspaceFittingPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubspaceFittingPara::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubspaceFittingPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_popup.SubspaceFittingPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:video_popup.SubspaceFittingPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_popup.SubspaceFittingPara)
  return false;
#undef DO_
}

void SubspaceFittingPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_popup.SubspaceFittingPara)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_popup.SubspaceFittingPara)
}

::google::protobuf::uint8* SubspaceFittingPara::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_popup.SubspaceFittingPara)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_popup.SubspaceFittingPara)
  return target;
}

int SubspaceFittingPara::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubspaceFittingPara::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubspaceFittingPara* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubspaceFittingPara>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubspaceFittingPara::MergeFrom(const SubspaceFittingPara& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SubspaceFittingPara::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubspaceFittingPara::CopyFrom(const SubspaceFittingPara& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubspaceFittingPara::IsInitialized() const {

  return true;
}

void SubspaceFittingPara::Swap(SubspaceFittingPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubspaceFittingPara::InternalSwap(SubspaceFittingPara* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubspaceFittingPara::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubspaceFittingPara_descriptor_;
  metadata.reflection = SubspaceFittingPara_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubspaceFittingPara

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ModelFittingPara_FittingModel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelFittingPara_FittingModel_descriptor_;
}
bool ModelFittingPara_FittingModel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ModelFittingPara_FittingModel ModelFittingPara::PERSP;
const ModelFittingPara_FittingModel ModelFittingPara::ORTHO;
const ModelFittingPara_FittingModel ModelFittingPara::SUBSPACE;
const ModelFittingPara_FittingModel ModelFittingPara::FittingModel_MIN;
const ModelFittingPara_FittingModel ModelFittingPara::FittingModel_MAX;
const int ModelFittingPara::FittingModel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ModelFittingPara_GraphCutPara_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelFittingPara_GraphCutPara_Engine_descriptor_;
}
bool ModelFittingPara_GraphCutPara_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ModelFittingPara_GraphCutPara_Engine ModelFittingPara_GraphCutPara::ALPHA;
const ModelFittingPara_GraphCutPara_Engine ModelFittingPara_GraphCutPara::MULTI;
const ModelFittingPara_GraphCutPara_Engine ModelFittingPara_GraphCutPara::ALLGC;
const ModelFittingPara_GraphCutPara_Engine ModelFittingPara_GraphCutPara::Engine_MIN;
const ModelFittingPara_GraphCutPara_Engine ModelFittingPara_GraphCutPara::Engine_MAX;
const int ModelFittingPara_GraphCutPara::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelFittingPara_GraphCutPara::kEngineFieldNumber;
const int ModelFittingPara_GraphCutPara::kOverlapCostFieldNumber;
const int ModelFittingPara_GraphCutPara::kPointwiseBreakingLambdaFieldNumber;
const int ModelFittingPara_GraphCutPara::kPointwiseOutlierLambdaFieldNumber;
const int ModelFittingPara_GraphCutPara::kPairwiseBreakingMaFieldNumber;
const int ModelFittingPara_GraphCutPara::kPairwiseBreakingMbFieldNumber;
const int ModelFittingPara_GraphCutPara::kPairwiseBreakingMcFieldNumber;
const int ModelFittingPara_GraphCutPara::kPairwiseWeightFieldNumber;
const int ModelFittingPara_GraphCutPara::kPairwiseSigmaFieldNumber;
const int ModelFittingPara_GraphCutPara::kNeighborsNumFieldNumber;
const int ModelFittingPara_GraphCutPara::kOverlapNeighborNumFieldNumber;
const int ModelFittingPara_GraphCutPara::kLambdaWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelFittingPara_GraphCutPara::ModelFittingPara_GraphCutPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_popup.ModelFittingPara.GraphCutPara)
}

void ModelFittingPara_GraphCutPara::InitAsDefaultInstance() {
}

ModelFittingPara_GraphCutPara::ModelFittingPara_GraphCutPara(const ModelFittingPara_GraphCutPara& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_popup.ModelFittingPara.GraphCutPara)
}

void ModelFittingPara_GraphCutPara::SharedCtor() {
  _cached_size_ = 0;
  engine_ = 2;
  overlap_cost_ = 1;
  pointwise_breaking_lambda_ = 1;
  pointwise_outlier_lambda_ = 1;
  pairwise_breaking_ma_ = 100;
  pairwise_breaking_mb_ = 100;
  pairwise_breaking_mc_ = 30;
  pairwise_weight_ = 100;
  pairwise_sigma_ = 10;
  neighbors_num_ = 5;
  overlap_neighbor_num_ = 5;
  lambda_weight_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelFittingPara_GraphCutPara::~ModelFittingPara_GraphCutPara() {
  // @@protoc_insertion_point(destructor:video_popup.ModelFittingPara.GraphCutPara)
  SharedDtor();
}

void ModelFittingPara_GraphCutPara::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModelFittingPara_GraphCutPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelFittingPara_GraphCutPara::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelFittingPara_GraphCutPara_descriptor_;
}

const ModelFittingPara_GraphCutPara& ModelFittingPara_GraphCutPara::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_5fpopup_2eproto();
  return *default_instance_;
}

ModelFittingPara_GraphCutPara* ModelFittingPara_GraphCutPara::default_instance_ = NULL;

ModelFittingPara_GraphCutPara* ModelFittingPara_GraphCutPara::New(::google::protobuf::Arena* arena) const {
  ModelFittingPara_GraphCutPara* n = new ModelFittingPara_GraphCutPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelFittingPara_GraphCutPara::Clear() {
  if (_has_bits_[0 / 32] & 255u) {
    engine_ = 2;
    overlap_cost_ = 1;
    pointwise_breaking_lambda_ = 1;
    pointwise_outlier_lambda_ = 1;
    pairwise_breaking_ma_ = 100;
    pairwise_breaking_mb_ = 100;
    pairwise_breaking_mc_ = 30;
    pairwise_weight_ = 100;
  }
  if (_has_bits_[8 / 32] & 3840u) {
    pairwise_sigma_ = 10;
    neighbors_num_ = 5;
    overlap_neighbor_num_ = 5;
    lambda_weight_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModelFittingPara_GraphCutPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_popup.ModelFittingPara.GraphCutPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .video_popup.ModelFittingPara.GraphCutPara.Engine engine = 1 [default = ALLGC];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::video_popup::ModelFittingPara_GraphCutPara_Engine_IsValid(value)) {
            set_engine(static_cast< ::video_popup::ModelFittingPara_GraphCutPara_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_overlap_cost;
        break;
      }

      // optional float overlap_cost = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_overlap_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overlap_cost_)));
          set_has_overlap_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_pointwise_breaking_lambda;
        break;
      }

      // optional float pointwise_breaking_lambda = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_pointwise_breaking_lambda:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pointwise_breaking_lambda_)));
          set_has_pointwise_breaking_lambda();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_pointwise_outlier_lambda;
        break;
      }

      // optional float pointwise_outlier_lambda = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_pointwise_outlier_lambda:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pointwise_outlier_lambda_)));
          set_has_pointwise_outlier_lambda();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_pairwise_breaking_ma;
        break;
      }

      // optional float pairwise_breaking_ma = 5 [default = 100];
      case 5: {
        if (tag == 45) {
         parse_pairwise_breaking_ma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pairwise_breaking_ma_)));
          set_has_pairwise_breaking_ma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_pairwise_breaking_mb;
        break;
      }

      // optional float pairwise_breaking_mb = 6 [default = 100];
      case 6: {
        if (tag == 53) {
         parse_pairwise_breaking_mb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pairwise_breaking_mb_)));
          set_has_pairwise_breaking_mb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_pairwise_breaking_mc;
        break;
      }

      // optional float pairwise_breaking_mc = 7 [default = 30];
      case 7: {
        if (tag == 61) {
         parse_pairwise_breaking_mc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pairwise_breaking_mc_)));
          set_has_pairwise_breaking_mc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_pairwise_weight;
        break;
      }

      // optional float pairwise_weight = 8 [default = 100];
      case 8: {
        if (tag == 69) {
         parse_pairwise_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pairwise_weight_)));
          set_has_pairwise_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_pairwise_sigma;
        break;
      }

      // optional float pairwise_sigma = 9 [default = 10];
      case 9: {
        if (tag == 77) {
         parse_pairwise_sigma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pairwise_sigma_)));
          set_has_pairwise_sigma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_neighbors_num;
        break;
      }

      // optional int32 neighbors_num = 10 [default = 5];
      case 10: {
        if (tag == 80) {
         parse_neighbors_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &neighbors_num_)));
          set_has_neighbors_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_overlap_neighbor_num;
        break;
      }

      // optional int32 overlap_neighbor_num = 11 [default = 5];
      case 11: {
        if (tag == 88) {
         parse_overlap_neighbor_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overlap_neighbor_num_)));
          set_has_overlap_neighbor_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_lambda_weight;
        break;
      }

      // optional float lambda_weight = 12 [default = 1];
      case 12: {
        if (tag == 101) {
         parse_lambda_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lambda_weight_)));
          set_has_lambda_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_popup.ModelFittingPara.GraphCutPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_popup.ModelFittingPara.GraphCutPara)
  return false;
#undef DO_
}

void ModelFittingPara_GraphCutPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_popup.ModelFittingPara.GraphCutPara)
  // optional .video_popup.ModelFittingPara.GraphCutPara.Engine engine = 1 [default = ALLGC];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  // optional float overlap_cost = 2 [default = 1];
  if (has_overlap_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->overlap_cost(), output);
  }

  // optional float pointwise_breaking_lambda = 3 [default = 1];
  if (has_pointwise_breaking_lambda()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pointwise_breaking_lambda(), output);
  }

  // optional float pointwise_outlier_lambda = 4 [default = 1];
  if (has_pointwise_outlier_lambda()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pointwise_outlier_lambda(), output);
  }

  // optional float pairwise_breaking_ma = 5 [default = 100];
  if (has_pairwise_breaking_ma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pairwise_breaking_ma(), output);
  }

  // optional float pairwise_breaking_mb = 6 [default = 100];
  if (has_pairwise_breaking_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pairwise_breaking_mb(), output);
  }

  // optional float pairwise_breaking_mc = 7 [default = 30];
  if (has_pairwise_breaking_mc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pairwise_breaking_mc(), output);
  }

  // optional float pairwise_weight = 8 [default = 100];
  if (has_pairwise_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->pairwise_weight(), output);
  }

  // optional float pairwise_sigma = 9 [default = 10];
  if (has_pairwise_sigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pairwise_sigma(), output);
  }

  // optional int32 neighbors_num = 10 [default = 5];
  if (has_neighbors_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->neighbors_num(), output);
  }

  // optional int32 overlap_neighbor_num = 11 [default = 5];
  if (has_overlap_neighbor_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->overlap_neighbor_num(), output);
  }

  // optional float lambda_weight = 12 [default = 1];
  if (has_lambda_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->lambda_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_popup.ModelFittingPara.GraphCutPara)
}

::google::protobuf::uint8* ModelFittingPara_GraphCutPara::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_popup.ModelFittingPara.GraphCutPara)
  // optional .video_popup.ModelFittingPara.GraphCutPara.Engine engine = 1 [default = ALLGC];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  // optional float overlap_cost = 2 [default = 1];
  if (has_overlap_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->overlap_cost(), target);
  }

  // optional float pointwise_breaking_lambda = 3 [default = 1];
  if (has_pointwise_breaking_lambda()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pointwise_breaking_lambda(), target);
  }

  // optional float pointwise_outlier_lambda = 4 [default = 1];
  if (has_pointwise_outlier_lambda()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pointwise_outlier_lambda(), target);
  }

  // optional float pairwise_breaking_ma = 5 [default = 100];
  if (has_pairwise_breaking_ma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pairwise_breaking_ma(), target);
  }

  // optional float pairwise_breaking_mb = 6 [default = 100];
  if (has_pairwise_breaking_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pairwise_breaking_mb(), target);
  }

  // optional float pairwise_breaking_mc = 7 [default = 30];
  if (has_pairwise_breaking_mc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pairwise_breaking_mc(), target);
  }

  // optional float pairwise_weight = 8 [default = 100];
  if (has_pairwise_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->pairwise_weight(), target);
  }

  // optional float pairwise_sigma = 9 [default = 10];
  if (has_pairwise_sigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pairwise_sigma(), target);
  }

  // optional int32 neighbors_num = 10 [default = 5];
  if (has_neighbors_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->neighbors_num(), target);
  }

  // optional int32 overlap_neighbor_num = 11 [default = 5];
  if (has_overlap_neighbor_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->overlap_neighbor_num(), target);
  }

  // optional float lambda_weight = 12 [default = 1];
  if (has_lambda_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->lambda_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_popup.ModelFittingPara.GraphCutPara)
  return target;
}

int ModelFittingPara_GraphCutPara::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .video_popup.ModelFittingPara.GraphCutPara.Engine engine = 1 [default = ALLGC];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional float overlap_cost = 2 [default = 1];
    if (has_overlap_cost()) {
      total_size += 1 + 4;
    }

    // optional float pointwise_breaking_lambda = 3 [default = 1];
    if (has_pointwise_breaking_lambda()) {
      total_size += 1 + 4;
    }

    // optional float pointwise_outlier_lambda = 4 [default = 1];
    if (has_pointwise_outlier_lambda()) {
      total_size += 1 + 4;
    }

    // optional float pairwise_breaking_ma = 5 [default = 100];
    if (has_pairwise_breaking_ma()) {
      total_size += 1 + 4;
    }

    // optional float pairwise_breaking_mb = 6 [default = 100];
    if (has_pairwise_breaking_mb()) {
      total_size += 1 + 4;
    }

    // optional float pairwise_breaking_mc = 7 [default = 30];
    if (has_pairwise_breaking_mc()) {
      total_size += 1 + 4;
    }

    // optional float pairwise_weight = 8 [default = 100];
    if (has_pairwise_weight()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional float pairwise_sigma = 9 [default = 10];
    if (has_pairwise_sigma()) {
      total_size += 1 + 4;
    }

    // optional int32 neighbors_num = 10 [default = 5];
    if (has_neighbors_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->neighbors_num());
    }

    // optional int32 overlap_neighbor_num = 11 [default = 5];
    if (has_overlap_neighbor_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overlap_neighbor_num());
    }

    // optional float lambda_weight = 12 [default = 1];
    if (has_lambda_weight()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelFittingPara_GraphCutPara::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModelFittingPara_GraphCutPara* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelFittingPara_GraphCutPara>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelFittingPara_GraphCutPara::MergeFrom(const ModelFittingPara_GraphCutPara& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_engine()) {
      set_engine(from.engine());
    }
    if (from.has_overlap_cost()) {
      set_overlap_cost(from.overlap_cost());
    }
    if (from.has_pointwise_breaking_lambda()) {
      set_pointwise_breaking_lambda(from.pointwise_breaking_lambda());
    }
    if (from.has_pointwise_outlier_lambda()) {
      set_pointwise_outlier_lambda(from.pointwise_outlier_lambda());
    }
    if (from.has_pairwise_breaking_ma()) {
      set_pairwise_breaking_ma(from.pairwise_breaking_ma());
    }
    if (from.has_pairwise_breaking_mb()) {
      set_pairwise_breaking_mb(from.pairwise_breaking_mb());
    }
    if (from.has_pairwise_breaking_mc()) {
      set_pairwise_breaking_mc(from.pairwise_breaking_mc());
    }
    if (from.has_pairwise_weight()) {
      set_pairwise_weight(from.pairwise_weight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pairwise_sigma()) {
      set_pairwise_sigma(from.pairwise_sigma());
    }
    if (from.has_neighbors_num()) {
      set_neighbors_num(from.neighbors_num());
    }
    if (from.has_overlap_neighbor_num()) {
      set_overlap_neighbor_num(from.overlap_neighbor_num());
    }
    if (from.has_lambda_weight()) {
      set_lambda_weight(from.lambda_weight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ModelFittingPara_GraphCutPara::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelFittingPara_GraphCutPara::CopyFrom(const ModelFittingPara_GraphCutPara& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelFittingPara_GraphCutPara::IsInitialized() const {

  return true;
}

void ModelFittingPara_GraphCutPara::Swap(ModelFittingPara_GraphCutPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelFittingPara_GraphCutPara::InternalSwap(ModelFittingPara_GraphCutPara* other) {
  std::swap(engine_, other->engine_);
  std::swap(overlap_cost_, other->overlap_cost_);
  std::swap(pointwise_breaking_lambda_, other->pointwise_breaking_lambda_);
  std::swap(pointwise_outlier_lambda_, other->pointwise_outlier_lambda_);
  std::swap(pairwise_breaking_ma_, other->pairwise_breaking_ma_);
  std::swap(pairwise_breaking_mb_, other->pairwise_breaking_mb_);
  std::swap(pairwise_breaking_mc_, other->pairwise_breaking_mc_);
  std::swap(pairwise_weight_, other->pairwise_weight_);
  std::swap(pairwise_sigma_, other->pairwise_sigma_);
  std::swap(neighbors_num_, other->neighbors_num_);
  std::swap(overlap_neighbor_num_, other->overlap_neighbor_num_);
  std::swap(lambda_weight_, other->lambda_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelFittingPara_GraphCutPara::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelFittingPara_GraphCutPara_descriptor_;
  metadata.reflection = ModelFittingPara_GraphCutPara_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelFittingPara::kNameFieldNumber;
const int ModelFittingPara::kInitProposalNumFieldNumber;
const int ModelFittingPara::kMdlFieldNumber;
const int ModelFittingPara::kItersNumFieldNumber;
const int ModelFittingPara::kPerspFittingParaFieldNumber;
const int ModelFittingPara::kOrthoFittingParaFieldNumber;
const int ModelFittingPara::kSubspaceFittingParaFieldNumber;
const int ModelFittingPara::kFittingModelFieldNumber;
const int ModelFittingPara::kUseGricModelSelectionFieldNumber;
const int ModelFittingPara::kGricModelSelectionParaFieldNumber;
const int ModelFittingPara::kGraphCutParaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelFittingPara::ModelFittingPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_popup.ModelFittingPara)
}

void ModelFittingPara::InitAsDefaultInstance() {
  persp_fitting_para_ = const_cast< ::video_popup::PerspFittingPara*>(&::video_popup::PerspFittingPara::default_instance());
  ortho_fitting_para_ = const_cast< ::video_popup::OrthoFittingPara*>(&::video_popup::OrthoFittingPara::default_instance());
  subspace_fitting_para_ = const_cast< ::video_popup::SubspaceFittingPara*>(&::video_popup::SubspaceFittingPara::default_instance());
  gric_model_selection_para_ = const_cast< ::video_popup::GRICModelSelectionPara*>(&::video_popup::GRICModelSelectionPara::default_instance());
  graph_cut_para_ = const_cast< ::video_popup::ModelFittingPara_GraphCutPara*>(&::video_popup::ModelFittingPara_GraphCutPara::default_instance());
}

ModelFittingPara::ModelFittingPara(const ModelFittingPara& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_popup.ModelFittingPara)
}

void ModelFittingPara::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  init_proposal_num_ = 200;
  mdl_ = 4000;
  iters_num_ = 5;
  persp_fitting_para_ = NULL;
  ortho_fitting_para_ = NULL;
  subspace_fitting_para_ = NULL;
  fitting_model_ = 0;
  use_gric_model_selection_ = false;
  gric_model_selection_para_ = NULL;
  graph_cut_para_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelFittingPara::~ModelFittingPara() {
  // @@protoc_insertion_point(destructor:video_popup.ModelFittingPara)
  SharedDtor();
}

void ModelFittingPara::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete persp_fitting_para_;
    delete ortho_fitting_para_;
    delete subspace_fitting_para_;
    delete gric_model_selection_para_;
    delete graph_cut_para_;
  }
}

void ModelFittingPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelFittingPara::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelFittingPara_descriptor_;
}

const ModelFittingPara& ModelFittingPara::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_5fpopup_2eproto();
  return *default_instance_;
}

ModelFittingPara* ModelFittingPara::default_instance_ = NULL;

ModelFittingPara* ModelFittingPara::New(::google::protobuf::Arena* arena) const {
  ModelFittingPara* n = new ModelFittingPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelFittingPara::Clear() {
  if (_has_bits_[0 / 32] & 255u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    init_proposal_num_ = 200;
    mdl_ = 4000;
    iters_num_ = 5;
    if (has_persp_fitting_para()) {
      if (persp_fitting_para_ != NULL) persp_fitting_para_->::video_popup::PerspFittingPara::Clear();
    }
    if (has_ortho_fitting_para()) {
      if (ortho_fitting_para_ != NULL) ortho_fitting_para_->::video_popup::OrthoFittingPara::Clear();
    }
    if (has_subspace_fitting_para()) {
      if (subspace_fitting_para_ != NULL) subspace_fitting_para_->::video_popup::SubspaceFittingPara::Clear();
    }
    fitting_model_ = 0;
  }
  if (_has_bits_[8 / 32] & 1792u) {
    use_gric_model_selection_ = false;
    if (has_gric_model_selection_para()) {
      if (gric_model_selection_para_ != NULL) gric_model_selection_para_->::video_popup::GRICModelSelectionPara::Clear();
    }
    if (has_graph_cut_para()) {
      if (graph_cut_para_ != NULL) graph_cut_para_->::video_popup::ModelFittingPara_GraphCutPara::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModelFittingPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_popup.ModelFittingPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_popup.ModelFittingPara.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_init_proposal_num;
        break;
      }

      // optional int32 init_proposal_num = 2 [default = 200];
      case 2: {
        if (tag == 16) {
         parse_init_proposal_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_proposal_num_)));
          set_has_init_proposal_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_mdl;
        break;
      }

      // optional float mdl = 3 [default = 4000];
      case 3: {
        if (tag == 29) {
         parse_mdl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mdl_)));
          set_has_mdl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_iters_num;
        break;
      }

      // optional float iters_num = 4 [default = 5];
      case 4: {
        if (tag == 37) {
         parse_iters_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iters_num_)));
          set_has_iters_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_persp_fitting_para;
        break;
      }

      // optional .video_popup.PerspFittingPara persp_fitting_para = 101;
      case 101: {
        if (tag == 810) {
         parse_persp_fitting_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_persp_fitting_para()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_ortho_fitting_para;
        break;
      }

      // optional .video_popup.OrthoFittingPara ortho_fitting_para = 102;
      case 102: {
        if (tag == 818) {
         parse_ortho_fitting_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ortho_fitting_para()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_subspace_fitting_para;
        break;
      }

      // optional .video_popup.SubspaceFittingPara subspace_fitting_para = 103;
      case 103: {
        if (tag == 826) {
         parse_subspace_fitting_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subspace_fitting_para()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(832)) goto parse_fitting_model;
        break;
      }

      // optional .video_popup.ModelFittingPara.FittingModel fitting_model = 104 [default = PERSP];
      case 104: {
        if (tag == 832) {
         parse_fitting_model:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::video_popup::ModelFittingPara_FittingModel_IsValid(value)) {
            set_fitting_model(static_cast< ::video_popup::ModelFittingPara_FittingModel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(104, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1608)) goto parse_use_gric_model_selection;
        break;
      }

      // optional bool use_gric_model_selection = 201 [default = false];
      case 201: {
        if (tag == 1608) {
         parse_use_gric_model_selection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_gric_model_selection_)));
          set_has_use_gric_model_selection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_gric_model_selection_para;
        break;
      }

      // optional .video_popup.GRICModelSelectionPara gric_model_selection_para = 202;
      case 202: {
        if (tag == 1618) {
         parse_gric_model_selection_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gric_model_selection_para()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2410)) goto parse_graph_cut_para;
        break;
      }

      // optional .video_popup.ModelFittingPara.GraphCutPara graph_cut_para = 301;
      case 301: {
        if (tag == 2410) {
         parse_graph_cut_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_cut_para()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_popup.ModelFittingPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_popup.ModelFittingPara)
  return false;
#undef DO_
}

void ModelFittingPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_popup.ModelFittingPara)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_popup.ModelFittingPara.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 init_proposal_num = 2 [default = 200];
  if (has_init_proposal_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->init_proposal_num(), output);
  }

  // optional float mdl = 3 [default = 4000];
  if (has_mdl()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mdl(), output);
  }

  // optional float iters_num = 4 [default = 5];
  if (has_iters_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->iters_num(), output);
  }

  // optional .video_popup.PerspFittingPara persp_fitting_para = 101;
  if (has_persp_fitting_para()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->persp_fitting_para_, output);
  }

  // optional .video_popup.OrthoFittingPara ortho_fitting_para = 102;
  if (has_ortho_fitting_para()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *this->ortho_fitting_para_, output);
  }

  // optional .video_popup.SubspaceFittingPara subspace_fitting_para = 103;
  if (has_subspace_fitting_para()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *this->subspace_fitting_para_, output);
  }

  // optional .video_popup.ModelFittingPara.FittingModel fitting_model = 104 [default = PERSP];
  if (has_fitting_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      104, this->fitting_model(), output);
  }

  // optional bool use_gric_model_selection = 201 [default = false];
  if (has_use_gric_model_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(201, this->use_gric_model_selection(), output);
  }

  // optional .video_popup.GRICModelSelectionPara gric_model_selection_para = 202;
  if (has_gric_model_selection_para()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      202, *this->gric_model_selection_para_, output);
  }

  // optional .video_popup.ModelFittingPara.GraphCutPara graph_cut_para = 301;
  if (has_graph_cut_para()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      301, *this->graph_cut_para_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_popup.ModelFittingPara)
}

::google::protobuf::uint8* ModelFittingPara::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_popup.ModelFittingPara)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_popup.ModelFittingPara.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 init_proposal_num = 2 [default = 200];
  if (has_init_proposal_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->init_proposal_num(), target);
  }

  // optional float mdl = 3 [default = 4000];
  if (has_mdl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mdl(), target);
  }

  // optional float iters_num = 4 [default = 5];
  if (has_iters_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->iters_num(), target);
  }

  // optional .video_popup.PerspFittingPara persp_fitting_para = 101;
  if (has_persp_fitting_para()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, *this->persp_fitting_para_, target);
  }

  // optional .video_popup.OrthoFittingPara ortho_fitting_para = 102;
  if (has_ortho_fitting_para()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, *this->ortho_fitting_para_, target);
  }

  // optional .video_popup.SubspaceFittingPara subspace_fitting_para = 103;
  if (has_subspace_fitting_para()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, *this->subspace_fitting_para_, target);
  }

  // optional .video_popup.ModelFittingPara.FittingModel fitting_model = 104 [default = PERSP];
  if (has_fitting_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      104, this->fitting_model(), target);
  }

  // optional bool use_gric_model_selection = 201 [default = false];
  if (has_use_gric_model_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(201, this->use_gric_model_selection(), target);
  }

  // optional .video_popup.GRICModelSelectionPara gric_model_selection_para = 202;
  if (has_gric_model_selection_para()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        202, *this->gric_model_selection_para_, target);
  }

  // optional .video_popup.ModelFittingPara.GraphCutPara graph_cut_para = 301;
  if (has_graph_cut_para()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        301, *this->graph_cut_para_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_popup.ModelFittingPara)
  return target;
}

int ModelFittingPara::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 init_proposal_num = 2 [default = 200];
    if (has_init_proposal_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_proposal_num());
    }

    // optional float mdl = 3 [default = 4000];
    if (has_mdl()) {
      total_size += 1 + 4;
    }

    // optional float iters_num = 4 [default = 5];
    if (has_iters_num()) {
      total_size += 1 + 4;
    }

    // optional .video_popup.PerspFittingPara persp_fitting_para = 101;
    if (has_persp_fitting_para()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->persp_fitting_para_);
    }

    // optional .video_popup.OrthoFittingPara ortho_fitting_para = 102;
    if (has_ortho_fitting_para()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ortho_fitting_para_);
    }

    // optional .video_popup.SubspaceFittingPara subspace_fitting_para = 103;
    if (has_subspace_fitting_para()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->subspace_fitting_para_);
    }

    // optional .video_popup.ModelFittingPara.FittingModel fitting_model = 104 [default = PERSP];
    if (has_fitting_model()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fitting_model());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool use_gric_model_selection = 201 [default = false];
    if (has_use_gric_model_selection()) {
      total_size += 2 + 1;
    }

    // optional .video_popup.GRICModelSelectionPara gric_model_selection_para = 202;
    if (has_gric_model_selection_para()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gric_model_selection_para_);
    }

    // optional .video_popup.ModelFittingPara.GraphCutPara graph_cut_para = 301;
    if (has_graph_cut_para()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->graph_cut_para_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelFittingPara::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModelFittingPara* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelFittingPara>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelFittingPara::MergeFrom(const ModelFittingPara& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_init_proposal_num()) {
      set_init_proposal_num(from.init_proposal_num());
    }
    if (from.has_mdl()) {
      set_mdl(from.mdl());
    }
    if (from.has_iters_num()) {
      set_iters_num(from.iters_num());
    }
    if (from.has_persp_fitting_para()) {
      mutable_persp_fitting_para()->::video_popup::PerspFittingPara::MergeFrom(from.persp_fitting_para());
    }
    if (from.has_ortho_fitting_para()) {
      mutable_ortho_fitting_para()->::video_popup::OrthoFittingPara::MergeFrom(from.ortho_fitting_para());
    }
    if (from.has_subspace_fitting_para()) {
      mutable_subspace_fitting_para()->::video_popup::SubspaceFittingPara::MergeFrom(from.subspace_fitting_para());
    }
    if (from.has_fitting_model()) {
      set_fitting_model(from.fitting_model());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_use_gric_model_selection()) {
      set_use_gric_model_selection(from.use_gric_model_selection());
    }
    if (from.has_gric_model_selection_para()) {
      mutable_gric_model_selection_para()->::video_popup::GRICModelSelectionPara::MergeFrom(from.gric_model_selection_para());
    }
    if (from.has_graph_cut_para()) {
      mutable_graph_cut_para()->::video_popup::ModelFittingPara_GraphCutPara::MergeFrom(from.graph_cut_para());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ModelFittingPara::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelFittingPara::CopyFrom(const ModelFittingPara& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelFittingPara::IsInitialized() const {

  return true;
}

void ModelFittingPara::Swap(ModelFittingPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelFittingPara::InternalSwap(ModelFittingPara* other) {
  name_.Swap(&other->name_);
  std::swap(init_proposal_num_, other->init_proposal_num_);
  std::swap(mdl_, other->mdl_);
  std::swap(iters_num_, other->iters_num_);
  std::swap(persp_fitting_para_, other->persp_fitting_para_);
  std::swap(ortho_fitting_para_, other->ortho_fitting_para_);
  std::swap(subspace_fitting_para_, other->subspace_fitting_para_);
  std::swap(fitting_model_, other->fitting_model_);
  std::swap(use_gric_model_selection_, other->use_gric_model_selection_);
  std::swap(gric_model_selection_para_, other->gric_model_selection_para_);
  std::swap(graph_cut_para_, other->graph_cut_para_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelFittingPara::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelFittingPara_descriptor_;
  metadata.reflection = ModelFittingPara_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelFittingPara_GraphCutPara

// optional .video_popup.ModelFittingPara.GraphCutPara.Engine engine = 1 [default = ALLGC];
bool ModelFittingPara_GraphCutPara::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelFittingPara_GraphCutPara::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelFittingPara_GraphCutPara::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelFittingPara_GraphCutPara::clear_engine() {
  engine_ = 2;
  clear_has_engine();
}
 ::video_popup::ModelFittingPara_GraphCutPara_Engine ModelFittingPara_GraphCutPara::engine() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.engine)
  return static_cast< ::video_popup::ModelFittingPara_GraphCutPara_Engine >(engine_);
}
 void ModelFittingPara_GraphCutPara::set_engine(::video_popup::ModelFittingPara_GraphCutPara_Engine value) {
  assert(::video_popup::ModelFittingPara_GraphCutPara_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.engine)
}

// optional float overlap_cost = 2 [default = 1];
bool ModelFittingPara_GraphCutPara::has_overlap_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelFittingPara_GraphCutPara::set_has_overlap_cost() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelFittingPara_GraphCutPara::clear_has_overlap_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelFittingPara_GraphCutPara::clear_overlap_cost() {
  overlap_cost_ = 1;
  clear_has_overlap_cost();
}
 float ModelFittingPara_GraphCutPara::overlap_cost() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.overlap_cost)
  return overlap_cost_;
}
 void ModelFittingPara_GraphCutPara::set_overlap_cost(float value) {
  set_has_overlap_cost();
  overlap_cost_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.overlap_cost)
}

// optional float pointwise_breaking_lambda = 3 [default = 1];
bool ModelFittingPara_GraphCutPara::has_pointwise_breaking_lambda() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelFittingPara_GraphCutPara::set_has_pointwise_breaking_lambda() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelFittingPara_GraphCutPara::clear_has_pointwise_breaking_lambda() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelFittingPara_GraphCutPara::clear_pointwise_breaking_lambda() {
  pointwise_breaking_lambda_ = 1;
  clear_has_pointwise_breaking_lambda();
}
 float ModelFittingPara_GraphCutPara::pointwise_breaking_lambda() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.pointwise_breaking_lambda)
  return pointwise_breaking_lambda_;
}
 void ModelFittingPara_GraphCutPara::set_pointwise_breaking_lambda(float value) {
  set_has_pointwise_breaking_lambda();
  pointwise_breaking_lambda_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.pointwise_breaking_lambda)
}

// optional float pointwise_outlier_lambda = 4 [default = 1];
bool ModelFittingPara_GraphCutPara::has_pointwise_outlier_lambda() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModelFittingPara_GraphCutPara::set_has_pointwise_outlier_lambda() {
  _has_bits_[0] |= 0x00000008u;
}
void ModelFittingPara_GraphCutPara::clear_has_pointwise_outlier_lambda() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModelFittingPara_GraphCutPara::clear_pointwise_outlier_lambda() {
  pointwise_outlier_lambda_ = 1;
  clear_has_pointwise_outlier_lambda();
}
 float ModelFittingPara_GraphCutPara::pointwise_outlier_lambda() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.pointwise_outlier_lambda)
  return pointwise_outlier_lambda_;
}
 void ModelFittingPara_GraphCutPara::set_pointwise_outlier_lambda(float value) {
  set_has_pointwise_outlier_lambda();
  pointwise_outlier_lambda_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.pointwise_outlier_lambda)
}

// optional float pairwise_breaking_ma = 5 [default = 100];
bool ModelFittingPara_GraphCutPara::has_pairwise_breaking_ma() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModelFittingPara_GraphCutPara::set_has_pairwise_breaking_ma() {
  _has_bits_[0] |= 0x00000010u;
}
void ModelFittingPara_GraphCutPara::clear_has_pairwise_breaking_ma() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModelFittingPara_GraphCutPara::clear_pairwise_breaking_ma() {
  pairwise_breaking_ma_ = 100;
  clear_has_pairwise_breaking_ma();
}
 float ModelFittingPara_GraphCutPara::pairwise_breaking_ma() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.pairwise_breaking_ma)
  return pairwise_breaking_ma_;
}
 void ModelFittingPara_GraphCutPara::set_pairwise_breaking_ma(float value) {
  set_has_pairwise_breaking_ma();
  pairwise_breaking_ma_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.pairwise_breaking_ma)
}

// optional float pairwise_breaking_mb = 6 [default = 100];
bool ModelFittingPara_GraphCutPara::has_pairwise_breaking_mb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModelFittingPara_GraphCutPara::set_has_pairwise_breaking_mb() {
  _has_bits_[0] |= 0x00000020u;
}
void ModelFittingPara_GraphCutPara::clear_has_pairwise_breaking_mb() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModelFittingPara_GraphCutPara::clear_pairwise_breaking_mb() {
  pairwise_breaking_mb_ = 100;
  clear_has_pairwise_breaking_mb();
}
 float ModelFittingPara_GraphCutPara::pairwise_breaking_mb() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.pairwise_breaking_mb)
  return pairwise_breaking_mb_;
}
 void ModelFittingPara_GraphCutPara::set_pairwise_breaking_mb(float value) {
  set_has_pairwise_breaking_mb();
  pairwise_breaking_mb_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.pairwise_breaking_mb)
}

// optional float pairwise_breaking_mc = 7 [default = 30];
bool ModelFittingPara_GraphCutPara::has_pairwise_breaking_mc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModelFittingPara_GraphCutPara::set_has_pairwise_breaking_mc() {
  _has_bits_[0] |= 0x00000040u;
}
void ModelFittingPara_GraphCutPara::clear_has_pairwise_breaking_mc() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModelFittingPara_GraphCutPara::clear_pairwise_breaking_mc() {
  pairwise_breaking_mc_ = 30;
  clear_has_pairwise_breaking_mc();
}
 float ModelFittingPara_GraphCutPara::pairwise_breaking_mc() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.pairwise_breaking_mc)
  return pairwise_breaking_mc_;
}
 void ModelFittingPara_GraphCutPara::set_pairwise_breaking_mc(float value) {
  set_has_pairwise_breaking_mc();
  pairwise_breaking_mc_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.pairwise_breaking_mc)
}

// optional float pairwise_weight = 8 [default = 100];
bool ModelFittingPara_GraphCutPara::has_pairwise_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ModelFittingPara_GraphCutPara::set_has_pairwise_weight() {
  _has_bits_[0] |= 0x00000080u;
}
void ModelFittingPara_GraphCutPara::clear_has_pairwise_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
void ModelFittingPara_GraphCutPara::clear_pairwise_weight() {
  pairwise_weight_ = 100;
  clear_has_pairwise_weight();
}
 float ModelFittingPara_GraphCutPara::pairwise_weight() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.pairwise_weight)
  return pairwise_weight_;
}
 void ModelFittingPara_GraphCutPara::set_pairwise_weight(float value) {
  set_has_pairwise_weight();
  pairwise_weight_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.pairwise_weight)
}

// optional float pairwise_sigma = 9 [default = 10];
bool ModelFittingPara_GraphCutPara::has_pairwise_sigma() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ModelFittingPara_GraphCutPara::set_has_pairwise_sigma() {
  _has_bits_[0] |= 0x00000100u;
}
void ModelFittingPara_GraphCutPara::clear_has_pairwise_sigma() {
  _has_bits_[0] &= ~0x00000100u;
}
void ModelFittingPara_GraphCutPara::clear_pairwise_sigma() {
  pairwise_sigma_ = 10;
  clear_has_pairwise_sigma();
}
 float ModelFittingPara_GraphCutPara::pairwise_sigma() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.pairwise_sigma)
  return pairwise_sigma_;
}
 void ModelFittingPara_GraphCutPara::set_pairwise_sigma(float value) {
  set_has_pairwise_sigma();
  pairwise_sigma_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.pairwise_sigma)
}

// optional int32 neighbors_num = 10 [default = 5];
bool ModelFittingPara_GraphCutPara::has_neighbors_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ModelFittingPara_GraphCutPara::set_has_neighbors_num() {
  _has_bits_[0] |= 0x00000200u;
}
void ModelFittingPara_GraphCutPara::clear_has_neighbors_num() {
  _has_bits_[0] &= ~0x00000200u;
}
void ModelFittingPara_GraphCutPara::clear_neighbors_num() {
  neighbors_num_ = 5;
  clear_has_neighbors_num();
}
 ::google::protobuf::int32 ModelFittingPara_GraphCutPara::neighbors_num() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.neighbors_num)
  return neighbors_num_;
}
 void ModelFittingPara_GraphCutPara::set_neighbors_num(::google::protobuf::int32 value) {
  set_has_neighbors_num();
  neighbors_num_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.neighbors_num)
}

// optional int32 overlap_neighbor_num = 11 [default = 5];
bool ModelFittingPara_GraphCutPara::has_overlap_neighbor_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ModelFittingPara_GraphCutPara::set_has_overlap_neighbor_num() {
  _has_bits_[0] |= 0x00000400u;
}
void ModelFittingPara_GraphCutPara::clear_has_overlap_neighbor_num() {
  _has_bits_[0] &= ~0x00000400u;
}
void ModelFittingPara_GraphCutPara::clear_overlap_neighbor_num() {
  overlap_neighbor_num_ = 5;
  clear_has_overlap_neighbor_num();
}
 ::google::protobuf::int32 ModelFittingPara_GraphCutPara::overlap_neighbor_num() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.overlap_neighbor_num)
  return overlap_neighbor_num_;
}
 void ModelFittingPara_GraphCutPara::set_overlap_neighbor_num(::google::protobuf::int32 value) {
  set_has_overlap_neighbor_num();
  overlap_neighbor_num_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.overlap_neighbor_num)
}

// optional float lambda_weight = 12 [default = 1];
bool ModelFittingPara_GraphCutPara::has_lambda_weight() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ModelFittingPara_GraphCutPara::set_has_lambda_weight() {
  _has_bits_[0] |= 0x00000800u;
}
void ModelFittingPara_GraphCutPara::clear_has_lambda_weight() {
  _has_bits_[0] &= ~0x00000800u;
}
void ModelFittingPara_GraphCutPara::clear_lambda_weight() {
  lambda_weight_ = 1;
  clear_has_lambda_weight();
}
 float ModelFittingPara_GraphCutPara::lambda_weight() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.lambda_weight)
  return lambda_weight_;
}
 void ModelFittingPara_GraphCutPara::set_lambda_weight(float value) {
  set_has_lambda_weight();
  lambda_weight_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.lambda_weight)
}

// -------------------------------------------------------------------

// ModelFittingPara

// optional string name = 1;
bool ModelFittingPara::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelFittingPara::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelFittingPara::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelFittingPara::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ModelFittingPara::name() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelFittingPara::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.name)
}
 void ModelFittingPara::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_popup.ModelFittingPara.name)
}
 void ModelFittingPara::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_popup.ModelFittingPara.name)
}
 ::std::string* ModelFittingPara::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:video_popup.ModelFittingPara.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelFittingPara::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelFittingPara::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:video_popup.ModelFittingPara.name)
}

// optional int32 init_proposal_num = 2 [default = 200];
bool ModelFittingPara::has_init_proposal_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelFittingPara::set_has_init_proposal_num() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelFittingPara::clear_has_init_proposal_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelFittingPara::clear_init_proposal_num() {
  init_proposal_num_ = 200;
  clear_has_init_proposal_num();
}
 ::google::protobuf::int32 ModelFittingPara::init_proposal_num() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.init_proposal_num)
  return init_proposal_num_;
}
 void ModelFittingPara::set_init_proposal_num(::google::protobuf::int32 value) {
  set_has_init_proposal_num();
  init_proposal_num_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.init_proposal_num)
}

// optional float mdl = 3 [default = 4000];
bool ModelFittingPara::has_mdl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelFittingPara::set_has_mdl() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelFittingPara::clear_has_mdl() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelFittingPara::clear_mdl() {
  mdl_ = 4000;
  clear_has_mdl();
}
 float ModelFittingPara::mdl() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.mdl)
  return mdl_;
}
 void ModelFittingPara::set_mdl(float value) {
  set_has_mdl();
  mdl_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.mdl)
}

// optional float iters_num = 4 [default = 5];
bool ModelFittingPara::has_iters_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModelFittingPara::set_has_iters_num() {
  _has_bits_[0] |= 0x00000008u;
}
void ModelFittingPara::clear_has_iters_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModelFittingPara::clear_iters_num() {
  iters_num_ = 5;
  clear_has_iters_num();
}
 float ModelFittingPara::iters_num() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.iters_num)
  return iters_num_;
}
 void ModelFittingPara::set_iters_num(float value) {
  set_has_iters_num();
  iters_num_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.iters_num)
}

// optional .video_popup.PerspFittingPara persp_fitting_para = 101;
bool ModelFittingPara::has_persp_fitting_para() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModelFittingPara::set_has_persp_fitting_para() {
  _has_bits_[0] |= 0x00000010u;
}
void ModelFittingPara::clear_has_persp_fitting_para() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModelFittingPara::clear_persp_fitting_para() {
  if (persp_fitting_para_ != NULL) persp_fitting_para_->::video_popup::PerspFittingPara::Clear();
  clear_has_persp_fitting_para();
}
const ::video_popup::PerspFittingPara& ModelFittingPara::persp_fitting_para() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.persp_fitting_para)
  return persp_fitting_para_ != NULL ? *persp_fitting_para_ : *default_instance_->persp_fitting_para_;
}
::video_popup::PerspFittingPara* ModelFittingPara::mutable_persp_fitting_para() {
  set_has_persp_fitting_para();
  if (persp_fitting_para_ == NULL) {
    persp_fitting_para_ = new ::video_popup::PerspFittingPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.ModelFittingPara.persp_fitting_para)
  return persp_fitting_para_;
}
::video_popup::PerspFittingPara* ModelFittingPara::release_persp_fitting_para() {
  clear_has_persp_fitting_para();
  ::video_popup::PerspFittingPara* temp = persp_fitting_para_;
  persp_fitting_para_ = NULL;
  return temp;
}
void ModelFittingPara::set_allocated_persp_fitting_para(::video_popup::PerspFittingPara* persp_fitting_para) {
  delete persp_fitting_para_;
  persp_fitting_para_ = persp_fitting_para;
  if (persp_fitting_para) {
    set_has_persp_fitting_para();
  } else {
    clear_has_persp_fitting_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.ModelFittingPara.persp_fitting_para)
}

// optional .video_popup.OrthoFittingPara ortho_fitting_para = 102;
bool ModelFittingPara::has_ortho_fitting_para() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModelFittingPara::set_has_ortho_fitting_para() {
  _has_bits_[0] |= 0x00000020u;
}
void ModelFittingPara::clear_has_ortho_fitting_para() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModelFittingPara::clear_ortho_fitting_para() {
  if (ortho_fitting_para_ != NULL) ortho_fitting_para_->::video_popup::OrthoFittingPara::Clear();
  clear_has_ortho_fitting_para();
}
const ::video_popup::OrthoFittingPara& ModelFittingPara::ortho_fitting_para() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.ortho_fitting_para)
  return ortho_fitting_para_ != NULL ? *ortho_fitting_para_ : *default_instance_->ortho_fitting_para_;
}
::video_popup::OrthoFittingPara* ModelFittingPara::mutable_ortho_fitting_para() {
  set_has_ortho_fitting_para();
  if (ortho_fitting_para_ == NULL) {
    ortho_fitting_para_ = new ::video_popup::OrthoFittingPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.ModelFittingPara.ortho_fitting_para)
  return ortho_fitting_para_;
}
::video_popup::OrthoFittingPara* ModelFittingPara::release_ortho_fitting_para() {
  clear_has_ortho_fitting_para();
  ::video_popup::OrthoFittingPara* temp = ortho_fitting_para_;
  ortho_fitting_para_ = NULL;
  return temp;
}
void ModelFittingPara::set_allocated_ortho_fitting_para(::video_popup::OrthoFittingPara* ortho_fitting_para) {
  delete ortho_fitting_para_;
  ortho_fitting_para_ = ortho_fitting_para;
  if (ortho_fitting_para) {
    set_has_ortho_fitting_para();
  } else {
    clear_has_ortho_fitting_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.ModelFittingPara.ortho_fitting_para)
}

// optional .video_popup.SubspaceFittingPara subspace_fitting_para = 103;
bool ModelFittingPara::has_subspace_fitting_para() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModelFittingPara::set_has_subspace_fitting_para() {
  _has_bits_[0] |= 0x00000040u;
}
void ModelFittingPara::clear_has_subspace_fitting_para() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModelFittingPara::clear_subspace_fitting_para() {
  if (subspace_fitting_para_ != NULL) subspace_fitting_para_->::video_popup::SubspaceFittingPara::Clear();
  clear_has_subspace_fitting_para();
}
const ::video_popup::SubspaceFittingPara& ModelFittingPara::subspace_fitting_para() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.subspace_fitting_para)
  return subspace_fitting_para_ != NULL ? *subspace_fitting_para_ : *default_instance_->subspace_fitting_para_;
}
::video_popup::SubspaceFittingPara* ModelFittingPara::mutable_subspace_fitting_para() {
  set_has_subspace_fitting_para();
  if (subspace_fitting_para_ == NULL) {
    subspace_fitting_para_ = new ::video_popup::SubspaceFittingPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.ModelFittingPara.subspace_fitting_para)
  return subspace_fitting_para_;
}
::video_popup::SubspaceFittingPara* ModelFittingPara::release_subspace_fitting_para() {
  clear_has_subspace_fitting_para();
  ::video_popup::SubspaceFittingPara* temp = subspace_fitting_para_;
  subspace_fitting_para_ = NULL;
  return temp;
}
void ModelFittingPara::set_allocated_subspace_fitting_para(::video_popup::SubspaceFittingPara* subspace_fitting_para) {
  delete subspace_fitting_para_;
  subspace_fitting_para_ = subspace_fitting_para;
  if (subspace_fitting_para) {
    set_has_subspace_fitting_para();
  } else {
    clear_has_subspace_fitting_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.ModelFittingPara.subspace_fitting_para)
}

// optional .video_popup.ModelFittingPara.FittingModel fitting_model = 104 [default = PERSP];
bool ModelFittingPara::has_fitting_model() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ModelFittingPara::set_has_fitting_model() {
  _has_bits_[0] |= 0x00000080u;
}
void ModelFittingPara::clear_has_fitting_model() {
  _has_bits_[0] &= ~0x00000080u;
}
void ModelFittingPara::clear_fitting_model() {
  fitting_model_ = 0;
  clear_has_fitting_model();
}
 ::video_popup::ModelFittingPara_FittingModel ModelFittingPara::fitting_model() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.fitting_model)
  return static_cast< ::video_popup::ModelFittingPara_FittingModel >(fitting_model_);
}
 void ModelFittingPara::set_fitting_model(::video_popup::ModelFittingPara_FittingModel value) {
  assert(::video_popup::ModelFittingPara_FittingModel_IsValid(value));
  set_has_fitting_model();
  fitting_model_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.fitting_model)
}

// optional bool use_gric_model_selection = 201 [default = false];
bool ModelFittingPara::has_use_gric_model_selection() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ModelFittingPara::set_has_use_gric_model_selection() {
  _has_bits_[0] |= 0x00000100u;
}
void ModelFittingPara::clear_has_use_gric_model_selection() {
  _has_bits_[0] &= ~0x00000100u;
}
void ModelFittingPara::clear_use_gric_model_selection() {
  use_gric_model_selection_ = false;
  clear_has_use_gric_model_selection();
}
 bool ModelFittingPara::use_gric_model_selection() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.use_gric_model_selection)
  return use_gric_model_selection_;
}
 void ModelFittingPara::set_use_gric_model_selection(bool value) {
  set_has_use_gric_model_selection();
  use_gric_model_selection_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.use_gric_model_selection)
}

// optional .video_popup.GRICModelSelectionPara gric_model_selection_para = 202;
bool ModelFittingPara::has_gric_model_selection_para() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ModelFittingPara::set_has_gric_model_selection_para() {
  _has_bits_[0] |= 0x00000200u;
}
void ModelFittingPara::clear_has_gric_model_selection_para() {
  _has_bits_[0] &= ~0x00000200u;
}
void ModelFittingPara::clear_gric_model_selection_para() {
  if (gric_model_selection_para_ != NULL) gric_model_selection_para_->::video_popup::GRICModelSelectionPara::Clear();
  clear_has_gric_model_selection_para();
}
const ::video_popup::GRICModelSelectionPara& ModelFittingPara::gric_model_selection_para() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.gric_model_selection_para)
  return gric_model_selection_para_ != NULL ? *gric_model_selection_para_ : *default_instance_->gric_model_selection_para_;
}
::video_popup::GRICModelSelectionPara* ModelFittingPara::mutable_gric_model_selection_para() {
  set_has_gric_model_selection_para();
  if (gric_model_selection_para_ == NULL) {
    gric_model_selection_para_ = new ::video_popup::GRICModelSelectionPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.ModelFittingPara.gric_model_selection_para)
  return gric_model_selection_para_;
}
::video_popup::GRICModelSelectionPara* ModelFittingPara::release_gric_model_selection_para() {
  clear_has_gric_model_selection_para();
  ::video_popup::GRICModelSelectionPara* temp = gric_model_selection_para_;
  gric_model_selection_para_ = NULL;
  return temp;
}
void ModelFittingPara::set_allocated_gric_model_selection_para(::video_popup::GRICModelSelectionPara* gric_model_selection_para) {
  delete gric_model_selection_para_;
  gric_model_selection_para_ = gric_model_selection_para;
  if (gric_model_selection_para) {
    set_has_gric_model_selection_para();
  } else {
    clear_has_gric_model_selection_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.ModelFittingPara.gric_model_selection_para)
}

// optional .video_popup.ModelFittingPara.GraphCutPara graph_cut_para = 301;
bool ModelFittingPara::has_graph_cut_para() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ModelFittingPara::set_has_graph_cut_para() {
  _has_bits_[0] |= 0x00000400u;
}
void ModelFittingPara::clear_has_graph_cut_para() {
  _has_bits_[0] &= ~0x00000400u;
}
void ModelFittingPara::clear_graph_cut_para() {
  if (graph_cut_para_ != NULL) graph_cut_para_->::video_popup::ModelFittingPara_GraphCutPara::Clear();
  clear_has_graph_cut_para();
}
const ::video_popup::ModelFittingPara_GraphCutPara& ModelFittingPara::graph_cut_para() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.graph_cut_para)
  return graph_cut_para_ != NULL ? *graph_cut_para_ : *default_instance_->graph_cut_para_;
}
::video_popup::ModelFittingPara_GraphCutPara* ModelFittingPara::mutable_graph_cut_para() {
  set_has_graph_cut_para();
  if (graph_cut_para_ == NULL) {
    graph_cut_para_ = new ::video_popup::ModelFittingPara_GraphCutPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.ModelFittingPara.graph_cut_para)
  return graph_cut_para_;
}
::video_popup::ModelFittingPara_GraphCutPara* ModelFittingPara::release_graph_cut_para() {
  clear_has_graph_cut_para();
  ::video_popup::ModelFittingPara_GraphCutPara* temp = graph_cut_para_;
  graph_cut_para_ = NULL;
  return temp;
}
void ModelFittingPara::set_allocated_graph_cut_para(::video_popup::ModelFittingPara_GraphCutPara* graph_cut_para) {
  delete graph_cut_para_;
  graph_cut_para_ = graph_cut_para;
  if (graph_cut_para) {
    set_has_graph_cut_para();
  } else {
    clear_has_graph_cut_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.ModelFittingPara.graph_cut_para)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SegmentationPara::kTracksPathFieldNumber;
const int SegmentationPara::kImagesPathFieldNumber;
const int SegmentationPara::kMinVisFramesFieldNumber;
const int SegmentationPara::kModelFittingParaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SegmentationPara::SegmentationPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_popup.SegmentationPara)
}

void SegmentationPara::InitAsDefaultInstance() {
  model_fitting_para_ = const_cast< ::video_popup::ModelFittingPara*>(&::video_popup::ModelFittingPara::default_instance());
}

SegmentationPara::SegmentationPara(const SegmentationPara& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_popup.SegmentationPara)
}

void SegmentationPara::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tracks_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  images_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_vis_frames_ = 5;
  model_fitting_para_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationPara::~SegmentationPara() {
  // @@protoc_insertion_point(destructor:video_popup.SegmentationPara)
  SharedDtor();
}

void SegmentationPara::SharedDtor() {
  tracks_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  images_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete model_fitting_para_;
  }
}

void SegmentationPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationPara::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationPara_descriptor_;
}

const SegmentationPara& SegmentationPara::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_5fpopup_2eproto();
  return *default_instance_;
}

SegmentationPara* SegmentationPara::default_instance_ = NULL;

SegmentationPara* SegmentationPara::New(::google::protobuf::Arena* arena) const {
  SegmentationPara* n = new SegmentationPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SegmentationPara::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_tracks_path()) {
      tracks_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_images_path()) {
      images_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    min_vis_frames_ = 5;
    if (has_model_fitting_para()) {
      if (model_fitting_para_ != NULL) model_fitting_para_->::video_popup::ModelFittingPara::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SegmentationPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_popup.SegmentationPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tracks_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tracks_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tracks_path().data(), this->tracks_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_popup.SegmentationPara.tracks_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_images_path;
        break;
      }

      // optional string images_path = 2;
      case 2: {
        if (tag == 18) {
         parse_images_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_images_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->images_path().data(), this->images_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_popup.SegmentationPara.images_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_vis_frames;
        break;
      }

      // optional int32 min_vis_frames = 3 [default = 5];
      case 3: {
        if (tag == 24) {
         parse_min_vis_frames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_vis_frames_)));
          set_has_min_vis_frames();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_model_fitting_para;
        break;
      }

      // optional .video_popup.ModelFittingPara model_fitting_para = 101;
      case 101: {
        if (tag == 810) {
         parse_model_fitting_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model_fitting_para()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_popup.SegmentationPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_popup.SegmentationPara)
  return false;
#undef DO_
}

void SegmentationPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_popup.SegmentationPara)
  // optional string tracks_path = 1;
  if (has_tracks_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tracks_path().data(), this->tracks_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_popup.SegmentationPara.tracks_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tracks_path(), output);
  }

  // optional string images_path = 2;
  if (has_images_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->images_path().data(), this->images_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_popup.SegmentationPara.images_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->images_path(), output);
  }

  // optional int32 min_vis_frames = 3 [default = 5];
  if (has_min_vis_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_vis_frames(), output);
  }

  // optional .video_popup.ModelFittingPara model_fitting_para = 101;
  if (has_model_fitting_para()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->model_fitting_para_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_popup.SegmentationPara)
}

::google::protobuf::uint8* SegmentationPara::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_popup.SegmentationPara)
  // optional string tracks_path = 1;
  if (has_tracks_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tracks_path().data(), this->tracks_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_popup.SegmentationPara.tracks_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tracks_path(), target);
  }

  // optional string images_path = 2;
  if (has_images_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->images_path().data(), this->images_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_popup.SegmentationPara.images_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->images_path(), target);
  }

  // optional int32 min_vis_frames = 3 [default = 5];
  if (has_min_vis_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_vis_frames(), target);
  }

  // optional .video_popup.ModelFittingPara model_fitting_para = 101;
  if (has_model_fitting_para()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, *this->model_fitting_para_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_popup.SegmentationPara)
  return target;
}

int SegmentationPara::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string tracks_path = 1;
    if (has_tracks_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tracks_path());
    }

    // optional string images_path = 2;
    if (has_images_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->images_path());
    }

    // optional int32 min_vis_frames = 3 [default = 5];
    if (has_min_vis_frames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_vis_frames());
    }

    // optional .video_popup.ModelFittingPara model_fitting_para = 101;
    if (has_model_fitting_para()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->model_fitting_para_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationPara::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SegmentationPara* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SegmentationPara>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationPara::MergeFrom(const SegmentationPara& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tracks_path()) {
      set_has_tracks_path();
      tracks_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tracks_path_);
    }
    if (from.has_images_path()) {
      set_has_images_path();
      images_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.images_path_);
    }
    if (from.has_min_vis_frames()) {
      set_min_vis_frames(from.min_vis_frames());
    }
    if (from.has_model_fitting_para()) {
      mutable_model_fitting_para()->::video_popup::ModelFittingPara::MergeFrom(from.model_fitting_para());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SegmentationPara::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationPara::CopyFrom(const SegmentationPara& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationPara::IsInitialized() const {

  return true;
}

void SegmentationPara::Swap(SegmentationPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SegmentationPara::InternalSwap(SegmentationPara* other) {
  tracks_path_.Swap(&other->tracks_path_);
  images_path_.Swap(&other->images_path_);
  std::swap(min_vis_frames_, other->min_vis_frames_);
  std::swap(model_fitting_para_, other->model_fitting_para_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SegmentationPara::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationPara_descriptor_;
  metadata.reflection = SegmentationPara_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SegmentationPara

// optional string tracks_path = 1;
bool SegmentationPara::has_tracks_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SegmentationPara::set_has_tracks_path() {
  _has_bits_[0] |= 0x00000001u;
}
void SegmentationPara::clear_has_tracks_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void SegmentationPara::clear_tracks_path() {
  tracks_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tracks_path();
}
 const ::std::string& SegmentationPara::tracks_path() const {
  // @@protoc_insertion_point(field_get:video_popup.SegmentationPara.tracks_path)
  return tracks_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SegmentationPara::set_tracks_path(const ::std::string& value) {
  set_has_tracks_path();
  tracks_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_popup.SegmentationPara.tracks_path)
}
 void SegmentationPara::set_tracks_path(const char* value) {
  set_has_tracks_path();
  tracks_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_popup.SegmentationPara.tracks_path)
}
 void SegmentationPara::set_tracks_path(const char* value, size_t size) {
  set_has_tracks_path();
  tracks_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_popup.SegmentationPara.tracks_path)
}
 ::std::string* SegmentationPara::mutable_tracks_path() {
  set_has_tracks_path();
  // @@protoc_insertion_point(field_mutable:video_popup.SegmentationPara.tracks_path)
  return tracks_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SegmentationPara::release_tracks_path() {
  clear_has_tracks_path();
  return tracks_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SegmentationPara::set_allocated_tracks_path(::std::string* tracks_path) {
  if (tracks_path != NULL) {
    set_has_tracks_path();
  } else {
    clear_has_tracks_path();
  }
  tracks_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracks_path);
  // @@protoc_insertion_point(field_set_allocated:video_popup.SegmentationPara.tracks_path)
}

// optional string images_path = 2;
bool SegmentationPara::has_images_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SegmentationPara::set_has_images_path() {
  _has_bits_[0] |= 0x00000002u;
}
void SegmentationPara::clear_has_images_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void SegmentationPara::clear_images_path() {
  images_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_images_path();
}
 const ::std::string& SegmentationPara::images_path() const {
  // @@protoc_insertion_point(field_get:video_popup.SegmentationPara.images_path)
  return images_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SegmentationPara::set_images_path(const ::std::string& value) {
  set_has_images_path();
  images_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_popup.SegmentationPara.images_path)
}
 void SegmentationPara::set_images_path(const char* value) {
  set_has_images_path();
  images_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_popup.SegmentationPara.images_path)
}
 void SegmentationPara::set_images_path(const char* value, size_t size) {
  set_has_images_path();
  images_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_popup.SegmentationPara.images_path)
}
 ::std::string* SegmentationPara::mutable_images_path() {
  set_has_images_path();
  // @@protoc_insertion_point(field_mutable:video_popup.SegmentationPara.images_path)
  return images_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SegmentationPara::release_images_path() {
  clear_has_images_path();
  return images_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SegmentationPara::set_allocated_images_path(::std::string* images_path) {
  if (images_path != NULL) {
    set_has_images_path();
  } else {
    clear_has_images_path();
  }
  images_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), images_path);
  // @@protoc_insertion_point(field_set_allocated:video_popup.SegmentationPara.images_path)
}

// optional int32 min_vis_frames = 3 [default = 5];
bool SegmentationPara::has_min_vis_frames() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SegmentationPara::set_has_min_vis_frames() {
  _has_bits_[0] |= 0x00000004u;
}
void SegmentationPara::clear_has_min_vis_frames() {
  _has_bits_[0] &= ~0x00000004u;
}
void SegmentationPara::clear_min_vis_frames() {
  min_vis_frames_ = 5;
  clear_has_min_vis_frames();
}
 ::google::protobuf::int32 SegmentationPara::min_vis_frames() const {
  // @@protoc_insertion_point(field_get:video_popup.SegmentationPara.min_vis_frames)
  return min_vis_frames_;
}
 void SegmentationPara::set_min_vis_frames(::google::protobuf::int32 value) {
  set_has_min_vis_frames();
  min_vis_frames_ = value;
  // @@protoc_insertion_point(field_set:video_popup.SegmentationPara.min_vis_frames)
}

// optional .video_popup.ModelFittingPara model_fitting_para = 101;
bool SegmentationPara::has_model_fitting_para() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SegmentationPara::set_has_model_fitting_para() {
  _has_bits_[0] |= 0x00000008u;
}
void SegmentationPara::clear_has_model_fitting_para() {
  _has_bits_[0] &= ~0x00000008u;
}
void SegmentationPara::clear_model_fitting_para() {
  if (model_fitting_para_ != NULL) model_fitting_para_->::video_popup::ModelFittingPara::Clear();
  clear_has_model_fitting_para();
}
const ::video_popup::ModelFittingPara& SegmentationPara::model_fitting_para() const {
  // @@protoc_insertion_point(field_get:video_popup.SegmentationPara.model_fitting_para)
  return model_fitting_para_ != NULL ? *model_fitting_para_ : *default_instance_->model_fitting_para_;
}
::video_popup::ModelFittingPara* SegmentationPara::mutable_model_fitting_para() {
  set_has_model_fitting_para();
  if (model_fitting_para_ == NULL) {
    model_fitting_para_ = new ::video_popup::ModelFittingPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.SegmentationPara.model_fitting_para)
  return model_fitting_para_;
}
::video_popup::ModelFittingPara* SegmentationPara::release_model_fitting_para() {
  clear_has_model_fitting_para();
  ::video_popup::ModelFittingPara* temp = model_fitting_para_;
  model_fitting_para_ = NULL;
  return temp;
}
void SegmentationPara::set_allocated_model_fitting_para(::video_popup::ModelFittingPara* model_fitting_para) {
  delete model_fitting_para_;
  model_fitting_para_ = model_fitting_para;
  if (model_fitting_para) {
    set_has_model_fitting_para();
  } else {
    clear_has_model_fitting_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.SegmentationPara.model_fitting_para)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrthoReconstructionPara::kMC1FieldNumber;
const int OrthoReconstructionPara::kMC2FieldNumber;
const int OrthoReconstructionPara::kMC3FieldNumber;
const int OrthoReconstructionPara::kBaModelFieldNumber;
const int OrthoReconstructionPara::kAlphaSFieldNumber;
const int OrthoReconstructionPara::kAlphaZFieldNumber;
const int OrthoReconstructionPara::kAlphaPriorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrthoReconstructionPara::OrthoReconstructionPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_popup.OrthoReconstructionPara)
}

void OrthoReconstructionPara::InitAsDefaultInstance() {
}

OrthoReconstructionPara::OrthoReconstructionPara(const OrthoReconstructionPara& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_popup.OrthoReconstructionPara)
}

void OrthoReconstructionPara::SharedCtor() {
  _cached_size_ = 0;
  mc1_ = 0.001f;
  mc2_ = 20;
  mc3_ = 10;
  ba_model_ = 0;
  alpha_s_ = 0.01f;
  alpha_z_ = 0.01f;
  alpha_prior_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrthoReconstructionPara::~OrthoReconstructionPara() {
  // @@protoc_insertion_point(destructor:video_popup.OrthoReconstructionPara)
  SharedDtor();
}

void OrthoReconstructionPara::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrthoReconstructionPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrthoReconstructionPara::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrthoReconstructionPara_descriptor_;
}

const OrthoReconstructionPara& OrthoReconstructionPara::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_5fpopup_2eproto();
  return *default_instance_;
}

OrthoReconstructionPara* OrthoReconstructionPara::default_instance_ = NULL;

OrthoReconstructionPara* OrthoReconstructionPara::New(::google::protobuf::Arena* arena) const {
  OrthoReconstructionPara* n = new OrthoReconstructionPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrthoReconstructionPara::Clear() {
  if (_has_bits_[0 / 32] & 127u) {
    mc1_ = 0.001f;
    mc2_ = 20;
    mc3_ = 10;
    ba_model_ = 0;
    alpha_s_ = 0.01f;
    alpha_z_ = 0.01f;
    alpha_prior_ = 10;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OrthoReconstructionPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_popup.OrthoReconstructionPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float MC1 = 1 [default = 0.001];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mc1_)));
          set_has_mc1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_MC2;
        break;
      }

      // optional float MC2 = 2 [default = 20];
      case 2: {
        if (tag == 21) {
         parse_MC2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mc2_)));
          set_has_mc2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_MC3;
        break;
      }

      // optional float MC3 = 3 [default = 10];
      case 3: {
        if (tag == 29) {
         parse_MC3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mc3_)));
          set_has_mc3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ba_model;
        break;
      }

      // optional int32 ba_model = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_ba_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ba_model_)));
          set_has_ba_model();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_alpha_s;
        break;
      }

      // optional float alpha_s = 5 [default = 0.01];
      case 5: {
        if (tag == 45) {
         parse_alpha_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_s_)));
          set_has_alpha_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_alpha_z;
        break;
      }

      // optional float alpha_z = 6 [default = 0.01];
      case 6: {
        if (tag == 53) {
         parse_alpha_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_z_)));
          set_has_alpha_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_alpha_prior;
        break;
      }

      // optional float alpha_prior = 7 [default = 10];
      case 7: {
        if (tag == 61) {
         parse_alpha_prior:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_prior_)));
          set_has_alpha_prior();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_popup.OrthoReconstructionPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_popup.OrthoReconstructionPara)
  return false;
#undef DO_
}

void OrthoReconstructionPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_popup.OrthoReconstructionPara)
  // optional float MC1 = 1 [default = 0.001];
  if (has_mc1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->mc1(), output);
  }

  // optional float MC2 = 2 [default = 20];
  if (has_mc2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mc2(), output);
  }

  // optional float MC3 = 3 [default = 10];
  if (has_mc3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mc3(), output);
  }

  // optional int32 ba_model = 4 [default = 0];
  if (has_ba_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ba_model(), output);
  }

  // optional float alpha_s = 5 [default = 0.01];
  if (has_alpha_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->alpha_s(), output);
  }

  // optional float alpha_z = 6 [default = 0.01];
  if (has_alpha_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->alpha_z(), output);
  }

  // optional float alpha_prior = 7 [default = 10];
  if (has_alpha_prior()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->alpha_prior(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_popup.OrthoReconstructionPara)
}

::google::protobuf::uint8* OrthoReconstructionPara::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_popup.OrthoReconstructionPara)
  // optional float MC1 = 1 [default = 0.001];
  if (has_mc1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->mc1(), target);
  }

  // optional float MC2 = 2 [default = 20];
  if (has_mc2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mc2(), target);
  }

  // optional float MC3 = 3 [default = 10];
  if (has_mc3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mc3(), target);
  }

  // optional int32 ba_model = 4 [default = 0];
  if (has_ba_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ba_model(), target);
  }

  // optional float alpha_s = 5 [default = 0.01];
  if (has_alpha_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->alpha_s(), target);
  }

  // optional float alpha_z = 6 [default = 0.01];
  if (has_alpha_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->alpha_z(), target);
  }

  // optional float alpha_prior = 7 [default = 10];
  if (has_alpha_prior()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->alpha_prior(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_popup.OrthoReconstructionPara)
  return target;
}

int OrthoReconstructionPara::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional float MC1 = 1 [default = 0.001];
    if (has_mc1()) {
      total_size += 1 + 4;
    }

    // optional float MC2 = 2 [default = 20];
    if (has_mc2()) {
      total_size += 1 + 4;
    }

    // optional float MC3 = 3 [default = 10];
    if (has_mc3()) {
      total_size += 1 + 4;
    }

    // optional int32 ba_model = 4 [default = 0];
    if (has_ba_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ba_model());
    }

    // optional float alpha_s = 5 [default = 0.01];
    if (has_alpha_s()) {
      total_size += 1 + 4;
    }

    // optional float alpha_z = 6 [default = 0.01];
    if (has_alpha_z()) {
      total_size += 1 + 4;
    }

    // optional float alpha_prior = 7 [default = 10];
    if (has_alpha_prior()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrthoReconstructionPara::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OrthoReconstructionPara* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OrthoReconstructionPara>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrthoReconstructionPara::MergeFrom(const OrthoReconstructionPara& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mc1()) {
      set_mc1(from.mc1());
    }
    if (from.has_mc2()) {
      set_mc2(from.mc2());
    }
    if (from.has_mc3()) {
      set_mc3(from.mc3());
    }
    if (from.has_ba_model()) {
      set_ba_model(from.ba_model());
    }
    if (from.has_alpha_s()) {
      set_alpha_s(from.alpha_s());
    }
    if (from.has_alpha_z()) {
      set_alpha_z(from.alpha_z());
    }
    if (from.has_alpha_prior()) {
      set_alpha_prior(from.alpha_prior());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OrthoReconstructionPara::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrthoReconstructionPara::CopyFrom(const OrthoReconstructionPara& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrthoReconstructionPara::IsInitialized() const {

  return true;
}

void OrthoReconstructionPara::Swap(OrthoReconstructionPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrthoReconstructionPara::InternalSwap(OrthoReconstructionPara* other) {
  std::swap(mc1_, other->mc1_);
  std::swap(mc2_, other->mc2_);
  std::swap(mc3_, other->mc3_);
  std::swap(ba_model_, other->ba_model_);
  std::swap(alpha_s_, other->alpha_s_);
  std::swap(alpha_z_, other->alpha_z_);
  std::swap(alpha_prior_, other->alpha_prior_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrthoReconstructionPara::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrthoReconstructionPara_descriptor_;
  metadata.reflection = OrthoReconstructionPara_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrthoReconstructionPara

// optional float MC1 = 1 [default = 0.001];
bool OrthoReconstructionPara::has_mc1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OrthoReconstructionPara::set_has_mc1() {
  _has_bits_[0] |= 0x00000001u;
}
void OrthoReconstructionPara::clear_has_mc1() {
  _has_bits_[0] &= ~0x00000001u;
}
void OrthoReconstructionPara::clear_mc1() {
  mc1_ = 0.001f;
  clear_has_mc1();
}
 float OrthoReconstructionPara::mc1() const {
  // @@protoc_insertion_point(field_get:video_popup.OrthoReconstructionPara.MC1)
  return mc1_;
}
 void OrthoReconstructionPara::set_mc1(float value) {
  set_has_mc1();
  mc1_ = value;
  // @@protoc_insertion_point(field_set:video_popup.OrthoReconstructionPara.MC1)
}

// optional float MC2 = 2 [default = 20];
bool OrthoReconstructionPara::has_mc2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OrthoReconstructionPara::set_has_mc2() {
  _has_bits_[0] |= 0x00000002u;
}
void OrthoReconstructionPara::clear_has_mc2() {
  _has_bits_[0] &= ~0x00000002u;
}
void OrthoReconstructionPara::clear_mc2() {
  mc2_ = 20;
  clear_has_mc2();
}
 float OrthoReconstructionPara::mc2() const {
  // @@protoc_insertion_point(field_get:video_popup.OrthoReconstructionPara.MC2)
  return mc2_;
}
 void OrthoReconstructionPara::set_mc2(float value) {
  set_has_mc2();
  mc2_ = value;
  // @@protoc_insertion_point(field_set:video_popup.OrthoReconstructionPara.MC2)
}

// optional float MC3 = 3 [default = 10];
bool OrthoReconstructionPara::has_mc3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OrthoReconstructionPara::set_has_mc3() {
  _has_bits_[0] |= 0x00000004u;
}
void OrthoReconstructionPara::clear_has_mc3() {
  _has_bits_[0] &= ~0x00000004u;
}
void OrthoReconstructionPara::clear_mc3() {
  mc3_ = 10;
  clear_has_mc3();
}
 float OrthoReconstructionPara::mc3() const {
  // @@protoc_insertion_point(field_get:video_popup.OrthoReconstructionPara.MC3)
  return mc3_;
}
 void OrthoReconstructionPara::set_mc3(float value) {
  set_has_mc3();
  mc3_ = value;
  // @@protoc_insertion_point(field_set:video_popup.OrthoReconstructionPara.MC3)
}

// optional int32 ba_model = 4 [default = 0];
bool OrthoReconstructionPara::has_ba_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OrthoReconstructionPara::set_has_ba_model() {
  _has_bits_[0] |= 0x00000008u;
}
void OrthoReconstructionPara::clear_has_ba_model() {
  _has_bits_[0] &= ~0x00000008u;
}
void OrthoReconstructionPara::clear_ba_model() {
  ba_model_ = 0;
  clear_has_ba_model();
}
 ::google::protobuf::int32 OrthoReconstructionPara::ba_model() const {
  // @@protoc_insertion_point(field_get:video_popup.OrthoReconstructionPara.ba_model)
  return ba_model_;
}
 void OrthoReconstructionPara::set_ba_model(::google::protobuf::int32 value) {
  set_has_ba_model();
  ba_model_ = value;
  // @@protoc_insertion_point(field_set:video_popup.OrthoReconstructionPara.ba_model)
}

// optional float alpha_s = 5 [default = 0.01];
bool OrthoReconstructionPara::has_alpha_s() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OrthoReconstructionPara::set_has_alpha_s() {
  _has_bits_[0] |= 0x00000010u;
}
void OrthoReconstructionPara::clear_has_alpha_s() {
  _has_bits_[0] &= ~0x00000010u;
}
void OrthoReconstructionPara::clear_alpha_s() {
  alpha_s_ = 0.01f;
  clear_has_alpha_s();
}
 float OrthoReconstructionPara::alpha_s() const {
  // @@protoc_insertion_point(field_get:video_popup.OrthoReconstructionPara.alpha_s)
  return alpha_s_;
}
 void OrthoReconstructionPara::set_alpha_s(float value) {
  set_has_alpha_s();
  alpha_s_ = value;
  // @@protoc_insertion_point(field_set:video_popup.OrthoReconstructionPara.alpha_s)
}

// optional float alpha_z = 6 [default = 0.01];
bool OrthoReconstructionPara::has_alpha_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OrthoReconstructionPara::set_has_alpha_z() {
  _has_bits_[0] |= 0x00000020u;
}
void OrthoReconstructionPara::clear_has_alpha_z() {
  _has_bits_[0] &= ~0x00000020u;
}
void OrthoReconstructionPara::clear_alpha_z() {
  alpha_z_ = 0.01f;
  clear_has_alpha_z();
}
 float OrthoReconstructionPara::alpha_z() const {
  // @@protoc_insertion_point(field_get:video_popup.OrthoReconstructionPara.alpha_z)
  return alpha_z_;
}
 void OrthoReconstructionPara::set_alpha_z(float value) {
  set_has_alpha_z();
  alpha_z_ = value;
  // @@protoc_insertion_point(field_set:video_popup.OrthoReconstructionPara.alpha_z)
}

// optional float alpha_prior = 7 [default = 10];
bool OrthoReconstructionPara::has_alpha_prior() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OrthoReconstructionPara::set_has_alpha_prior() {
  _has_bits_[0] |= 0x00000040u;
}
void OrthoReconstructionPara::clear_has_alpha_prior() {
  _has_bits_[0] &= ~0x00000040u;
}
void OrthoReconstructionPara::clear_alpha_prior() {
  alpha_prior_ = 10;
  clear_has_alpha_prior();
}
 float OrthoReconstructionPara::alpha_prior() const {
  // @@protoc_insertion_point(field_get:video_popup.OrthoReconstructionPara.alpha_prior)
  return alpha_prior_;
}
 void OrthoReconstructionPara::set_alpha_prior(float value) {
  set_has_alpha_prior();
  alpha_prior_ = value;
  // @@protoc_insertion_point(field_set:video_popup.OrthoReconstructionPara.alpha_prior)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerspReconstructionPara::kFxFieldNumber;
const int PerspReconstructionPara::kFyFieldNumber;
const int PerspReconstructionPara::kU0FieldNumber;
const int PerspReconstructionPara::kV0FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerspReconstructionPara::PerspReconstructionPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_popup.PerspReconstructionPara)
}

void PerspReconstructionPara::InitAsDefaultInstance() {
}

PerspReconstructionPara::PerspReconstructionPara(const PerspReconstructionPara& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_popup.PerspReconstructionPara)
}

void PerspReconstructionPara::SharedCtor() {
  _cached_size_ = 0;
  fx_ = 800;
  fy_ = 800;
  u0_ = 640;
  v0_ = 360;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerspReconstructionPara::~PerspReconstructionPara() {
  // @@protoc_insertion_point(destructor:video_popup.PerspReconstructionPara)
  SharedDtor();
}

void PerspReconstructionPara::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PerspReconstructionPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerspReconstructionPara::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerspReconstructionPara_descriptor_;
}

const PerspReconstructionPara& PerspReconstructionPara::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_5fpopup_2eproto();
  return *default_instance_;
}

PerspReconstructionPara* PerspReconstructionPara::default_instance_ = NULL;

PerspReconstructionPara* PerspReconstructionPara::New(::google::protobuf::Arena* arena) const {
  PerspReconstructionPara* n = new PerspReconstructionPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerspReconstructionPara::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    fx_ = 800;
    fy_ = 800;
    u0_ = 640;
    v0_ = 360;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PerspReconstructionPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_popup.PerspReconstructionPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float fx = 1 [default = 800];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fx_)));
          set_has_fx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_fy;
        break;
      }

      // optional float fy = 2 [default = 800];
      case 2: {
        if (tag == 21) {
         parse_fy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fy_)));
          set_has_fy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_u0;
        break;
      }

      // optional float u0 = 3 [default = 640];
      case 3: {
        if (tag == 29) {
         parse_u0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &u0_)));
          set_has_u0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_v0;
        break;
      }

      // optional float v0 = 4 [default = 360];
      case 4: {
        if (tag == 37) {
         parse_v0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v0_)));
          set_has_v0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_popup.PerspReconstructionPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_popup.PerspReconstructionPara)
  return false;
#undef DO_
}

void PerspReconstructionPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_popup.PerspReconstructionPara)
  // optional float fx = 1 [default = 800];
  if (has_fx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->fx(), output);
  }

  // optional float fy = 2 [default = 800];
  if (has_fy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fy(), output);
  }

  // optional float u0 = 3 [default = 640];
  if (has_u0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->u0(), output);
  }

  // optional float v0 = 4 [default = 360];
  if (has_v0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->v0(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_popup.PerspReconstructionPara)
}

::google::protobuf::uint8* PerspReconstructionPara::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_popup.PerspReconstructionPara)
  // optional float fx = 1 [default = 800];
  if (has_fx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->fx(), target);
  }

  // optional float fy = 2 [default = 800];
  if (has_fy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fy(), target);
  }

  // optional float u0 = 3 [default = 640];
  if (has_u0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->u0(), target);
  }

  // optional float v0 = 4 [default = 360];
  if (has_v0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->v0(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_popup.PerspReconstructionPara)
  return target;
}

int PerspReconstructionPara::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional float fx = 1 [default = 800];
    if (has_fx()) {
      total_size += 1 + 4;
    }

    // optional float fy = 2 [default = 800];
    if (has_fy()) {
      total_size += 1 + 4;
    }

    // optional float u0 = 3 [default = 640];
    if (has_u0()) {
      total_size += 1 + 4;
    }

    // optional float v0 = 4 [default = 360];
    if (has_v0()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerspReconstructionPara::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PerspReconstructionPara* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PerspReconstructionPara>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PerspReconstructionPara::MergeFrom(const PerspReconstructionPara& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fx()) {
      set_fx(from.fx());
    }
    if (from.has_fy()) {
      set_fy(from.fy());
    }
    if (from.has_u0()) {
      set_u0(from.u0());
    }
    if (from.has_v0()) {
      set_v0(from.v0());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PerspReconstructionPara::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerspReconstructionPara::CopyFrom(const PerspReconstructionPara& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerspReconstructionPara::IsInitialized() const {

  return true;
}

void PerspReconstructionPara::Swap(PerspReconstructionPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerspReconstructionPara::InternalSwap(PerspReconstructionPara* other) {
  std::swap(fx_, other->fx_);
  std::swap(fy_, other->fy_);
  std::swap(u0_, other->u0_);
  std::swap(v0_, other->v0_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerspReconstructionPara::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerspReconstructionPara_descriptor_;
  metadata.reflection = PerspReconstructionPara_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerspReconstructionPara

// optional float fx = 1 [default = 800];
bool PerspReconstructionPara::has_fx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerspReconstructionPara::set_has_fx() {
  _has_bits_[0] |= 0x00000001u;
}
void PerspReconstructionPara::clear_has_fx() {
  _has_bits_[0] &= ~0x00000001u;
}
void PerspReconstructionPara::clear_fx() {
  fx_ = 800;
  clear_has_fx();
}
 float PerspReconstructionPara::fx() const {
  // @@protoc_insertion_point(field_get:video_popup.PerspReconstructionPara.fx)
  return fx_;
}
 void PerspReconstructionPara::set_fx(float value) {
  set_has_fx();
  fx_ = value;
  // @@protoc_insertion_point(field_set:video_popup.PerspReconstructionPara.fx)
}

// optional float fy = 2 [default = 800];
bool PerspReconstructionPara::has_fy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerspReconstructionPara::set_has_fy() {
  _has_bits_[0] |= 0x00000002u;
}
void PerspReconstructionPara::clear_has_fy() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerspReconstructionPara::clear_fy() {
  fy_ = 800;
  clear_has_fy();
}
 float PerspReconstructionPara::fy() const {
  // @@protoc_insertion_point(field_get:video_popup.PerspReconstructionPara.fy)
  return fy_;
}
 void PerspReconstructionPara::set_fy(float value) {
  set_has_fy();
  fy_ = value;
  // @@protoc_insertion_point(field_set:video_popup.PerspReconstructionPara.fy)
}

// optional float u0 = 3 [default = 640];
bool PerspReconstructionPara::has_u0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerspReconstructionPara::set_has_u0() {
  _has_bits_[0] |= 0x00000004u;
}
void PerspReconstructionPara::clear_has_u0() {
  _has_bits_[0] &= ~0x00000004u;
}
void PerspReconstructionPara::clear_u0() {
  u0_ = 640;
  clear_has_u0();
}
 float PerspReconstructionPara::u0() const {
  // @@protoc_insertion_point(field_get:video_popup.PerspReconstructionPara.u0)
  return u0_;
}
 void PerspReconstructionPara::set_u0(float value) {
  set_has_u0();
  u0_ = value;
  // @@protoc_insertion_point(field_set:video_popup.PerspReconstructionPara.u0)
}

// optional float v0 = 4 [default = 360];
bool PerspReconstructionPara::has_v0() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerspReconstructionPara::set_has_v0() {
  _has_bits_[0] |= 0x00000008u;
}
void PerspReconstructionPara::clear_has_v0() {
  _has_bits_[0] &= ~0x00000008u;
}
void PerspReconstructionPara::clear_v0() {
  v0_ = 360;
  clear_has_v0();
}
 float PerspReconstructionPara::v0() const {
  // @@protoc_insertion_point(field_get:video_popup.PerspReconstructionPara.v0)
  return v0_;
}
 void PerspReconstructionPara::set_v0(float value) {
  set_has_v0();
  v0_ = value;
  // @@protoc_insertion_point(field_set:video_popup.PerspReconstructionPara.v0)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReconstructionPara_ReconstructionPipeline_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconstructionPara_ReconstructionPipeline_descriptor_;
}
bool ReconstructionPara_ReconstructionPipeline_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReconstructionPara_ReconstructionPipeline ReconstructionPara::ORTHO_PIECEWISE_STITCHING;
const ReconstructionPara_ReconstructionPipeline ReconstructionPara::ORTHO_PIECEWISE_GLOBAL;
const ReconstructionPara_ReconstructionPipeline ReconstructionPara::ORTHO_GLOBAL;
const ReconstructionPara_ReconstructionPipeline ReconstructionPara::PERSP_PIECEWISE_STITCHING;
const ReconstructionPara_ReconstructionPipeline ReconstructionPara::PERSP_PIECEWISE_GLOBAL;
const ReconstructionPara_ReconstructionPipeline ReconstructionPara::PERSP_GLOBAL;
const ReconstructionPara_ReconstructionPipeline ReconstructionPara::ReconstructionPipeline_MIN;
const ReconstructionPara_ReconstructionPipeline ReconstructionPara::ReconstructionPipeline_MAX;
const int ReconstructionPara::ReconstructionPipeline_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReconstructionPara::kMethodFieldNumber;
const int ReconstructionPara::kOrthoReconstructionParaFieldNumber;
const int ReconstructionPara::kPerspReconstructionParaFieldNumber;
const int ReconstructionPara::kThreshFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReconstructionPara::ReconstructionPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:video_popup.ReconstructionPara)
}

void ReconstructionPara::InitAsDefaultInstance() {
  ortho_reconstruction_para_ = const_cast< ::video_popup::OrthoReconstructionPara*>(&::video_popup::OrthoReconstructionPara::default_instance());
  persp_reconstruction_para_ = const_cast< ::video_popup::PerspReconstructionPara*>(&::video_popup::PerspReconstructionPara::default_instance());
}

ReconstructionPara::ReconstructionPara(const ReconstructionPara& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:video_popup.ReconstructionPara)
}

void ReconstructionPara::SharedCtor() {
  _cached_size_ = 0;
  method_ = 0;
  ortho_reconstruction_para_ = NULL;
  persp_reconstruction_para_ = NULL;
  thresh_ = 50;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconstructionPara::~ReconstructionPara() {
  // @@protoc_insertion_point(destructor:video_popup.ReconstructionPara)
  SharedDtor();
}

void ReconstructionPara::SharedDtor() {
  if (this != default_instance_) {
    delete ortho_reconstruction_para_;
    delete persp_reconstruction_para_;
  }
}

void ReconstructionPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconstructionPara::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconstructionPara_descriptor_;
}

const ReconstructionPara& ReconstructionPara::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_video_5fpopup_2eproto();
  return *default_instance_;
}

ReconstructionPara* ReconstructionPara::default_instance_ = NULL;

ReconstructionPara* ReconstructionPara::New(::google::protobuf::Arena* arena) const {
  ReconstructionPara* n = new ReconstructionPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReconstructionPara::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    method_ = 0;
    if (has_ortho_reconstruction_para()) {
      if (ortho_reconstruction_para_ != NULL) ortho_reconstruction_para_->::video_popup::OrthoReconstructionPara::Clear();
    }
    if (has_persp_reconstruction_para()) {
      if (persp_reconstruction_para_ != NULL) persp_reconstruction_para_->::video_popup::PerspReconstructionPara::Clear();
    }
    thresh_ = 50;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReconstructionPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:video_popup.ReconstructionPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .video_popup.ReconstructionPara.ReconstructionPipeline method = 1 [default = ORTHO_PIECEWISE_STITCHING];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::video_popup::ReconstructionPara_ReconstructionPipeline_IsValid(value)) {
            set_method(static_cast< ::video_popup::ReconstructionPara_ReconstructionPipeline >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ortho_reconstruction_para;
        break;
      }

      // optional .video_popup.OrthoReconstructionPara ortho_reconstruction_para = 2;
      case 2: {
        if (tag == 18) {
         parse_ortho_reconstruction_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ortho_reconstruction_para()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_persp_reconstruction_para;
        break;
      }

      // optional .video_popup.PerspReconstructionPara persp_reconstruction_para = 3;
      case 3: {
        if (tag == 26) {
         parse_persp_reconstruction_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_persp_reconstruction_para()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(808)) goto parse_thresh;
        break;
      }

      // optional int32 thresh = 101 [default = 50];
      case 101: {
        if (tag == 808) {
         parse_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thresh_)));
          set_has_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:video_popup.ReconstructionPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:video_popup.ReconstructionPara)
  return false;
#undef DO_
}

void ReconstructionPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:video_popup.ReconstructionPara)
  // optional .video_popup.ReconstructionPara.ReconstructionPipeline method = 1 [default = ORTHO_PIECEWISE_STITCHING];
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->method(), output);
  }

  // optional .video_popup.OrthoReconstructionPara ortho_reconstruction_para = 2;
  if (has_ortho_reconstruction_para()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ortho_reconstruction_para_, output);
  }

  // optional .video_popup.PerspReconstructionPara persp_reconstruction_para = 3;
  if (has_persp_reconstruction_para()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->persp_reconstruction_para_, output);
  }

  // optional int32 thresh = 101 [default = 50];
  if (has_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(101, this->thresh(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:video_popup.ReconstructionPara)
}

::google::protobuf::uint8* ReconstructionPara::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_popup.ReconstructionPara)
  // optional .video_popup.ReconstructionPara.ReconstructionPipeline method = 1 [default = ORTHO_PIECEWISE_STITCHING];
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->method(), target);
  }

  // optional .video_popup.OrthoReconstructionPara ortho_reconstruction_para = 2;
  if (has_ortho_reconstruction_para()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->ortho_reconstruction_para_, target);
  }

  // optional .video_popup.PerspReconstructionPara persp_reconstruction_para = 3;
  if (has_persp_reconstruction_para()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->persp_reconstruction_para_, target);
  }

  // optional int32 thresh = 101 [default = 50];
  if (has_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(101, this->thresh(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_popup.ReconstructionPara)
  return target;
}

int ReconstructionPara::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .video_popup.ReconstructionPara.ReconstructionPipeline method = 1 [default = ORTHO_PIECEWISE_STITCHING];
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }

    // optional .video_popup.OrthoReconstructionPara ortho_reconstruction_para = 2;
    if (has_ortho_reconstruction_para()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ortho_reconstruction_para_);
    }

    // optional .video_popup.PerspReconstructionPara persp_reconstruction_para = 3;
    if (has_persp_reconstruction_para()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->persp_reconstruction_para_);
    }

    // optional int32 thresh = 101 [default = 50];
    if (has_thresh()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thresh());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconstructionPara::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReconstructionPara* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReconstructionPara>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconstructionPara::MergeFrom(const ReconstructionPara& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_ortho_reconstruction_para()) {
      mutable_ortho_reconstruction_para()->::video_popup::OrthoReconstructionPara::MergeFrom(from.ortho_reconstruction_para());
    }
    if (from.has_persp_reconstruction_para()) {
      mutable_persp_reconstruction_para()->::video_popup::PerspReconstructionPara::MergeFrom(from.persp_reconstruction_para());
    }
    if (from.has_thresh()) {
      set_thresh(from.thresh());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReconstructionPara::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconstructionPara::CopyFrom(const ReconstructionPara& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconstructionPara::IsInitialized() const {

  return true;
}

void ReconstructionPara::Swap(ReconstructionPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReconstructionPara::InternalSwap(ReconstructionPara* other) {
  std::swap(method_, other->method_);
  std::swap(ortho_reconstruction_para_, other->ortho_reconstruction_para_);
  std::swap(persp_reconstruction_para_, other->persp_reconstruction_para_);
  std::swap(thresh_, other->thresh_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReconstructionPara::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconstructionPara_descriptor_;
  metadata.reflection = ReconstructionPara_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReconstructionPara

// optional .video_popup.ReconstructionPara.ReconstructionPipeline method = 1 [default = ORTHO_PIECEWISE_STITCHING];
bool ReconstructionPara::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReconstructionPara::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
void ReconstructionPara::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReconstructionPara::clear_method() {
  method_ = 0;
  clear_has_method();
}
 ::video_popup::ReconstructionPara_ReconstructionPipeline ReconstructionPara::method() const {
  // @@protoc_insertion_point(field_get:video_popup.ReconstructionPara.method)
  return static_cast< ::video_popup::ReconstructionPara_ReconstructionPipeline >(method_);
}
 void ReconstructionPara::set_method(::video_popup::ReconstructionPara_ReconstructionPipeline value) {
  assert(::video_popup::ReconstructionPara_ReconstructionPipeline_IsValid(value));
  set_has_method();
  method_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ReconstructionPara.method)
}

// optional .video_popup.OrthoReconstructionPara ortho_reconstruction_para = 2;
bool ReconstructionPara::has_ortho_reconstruction_para() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReconstructionPara::set_has_ortho_reconstruction_para() {
  _has_bits_[0] |= 0x00000002u;
}
void ReconstructionPara::clear_has_ortho_reconstruction_para() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReconstructionPara::clear_ortho_reconstruction_para() {
  if (ortho_reconstruction_para_ != NULL) ortho_reconstruction_para_->::video_popup::OrthoReconstructionPara::Clear();
  clear_has_ortho_reconstruction_para();
}
const ::video_popup::OrthoReconstructionPara& ReconstructionPara::ortho_reconstruction_para() const {
  // @@protoc_insertion_point(field_get:video_popup.ReconstructionPara.ortho_reconstruction_para)
  return ortho_reconstruction_para_ != NULL ? *ortho_reconstruction_para_ : *default_instance_->ortho_reconstruction_para_;
}
::video_popup::OrthoReconstructionPara* ReconstructionPara::mutable_ortho_reconstruction_para() {
  set_has_ortho_reconstruction_para();
  if (ortho_reconstruction_para_ == NULL) {
    ortho_reconstruction_para_ = new ::video_popup::OrthoReconstructionPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.ReconstructionPara.ortho_reconstruction_para)
  return ortho_reconstruction_para_;
}
::video_popup::OrthoReconstructionPara* ReconstructionPara::release_ortho_reconstruction_para() {
  clear_has_ortho_reconstruction_para();
  ::video_popup::OrthoReconstructionPara* temp = ortho_reconstruction_para_;
  ortho_reconstruction_para_ = NULL;
  return temp;
}
void ReconstructionPara::set_allocated_ortho_reconstruction_para(::video_popup::OrthoReconstructionPara* ortho_reconstruction_para) {
  delete ortho_reconstruction_para_;
  ortho_reconstruction_para_ = ortho_reconstruction_para;
  if (ortho_reconstruction_para) {
    set_has_ortho_reconstruction_para();
  } else {
    clear_has_ortho_reconstruction_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.ReconstructionPara.ortho_reconstruction_para)
}

// optional .video_popup.PerspReconstructionPara persp_reconstruction_para = 3;
bool ReconstructionPara::has_persp_reconstruction_para() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReconstructionPara::set_has_persp_reconstruction_para() {
  _has_bits_[0] |= 0x00000004u;
}
void ReconstructionPara::clear_has_persp_reconstruction_para() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReconstructionPara::clear_persp_reconstruction_para() {
  if (persp_reconstruction_para_ != NULL) persp_reconstruction_para_->::video_popup::PerspReconstructionPara::Clear();
  clear_has_persp_reconstruction_para();
}
const ::video_popup::PerspReconstructionPara& ReconstructionPara::persp_reconstruction_para() const {
  // @@protoc_insertion_point(field_get:video_popup.ReconstructionPara.persp_reconstruction_para)
  return persp_reconstruction_para_ != NULL ? *persp_reconstruction_para_ : *default_instance_->persp_reconstruction_para_;
}
::video_popup::PerspReconstructionPara* ReconstructionPara::mutable_persp_reconstruction_para() {
  set_has_persp_reconstruction_para();
  if (persp_reconstruction_para_ == NULL) {
    persp_reconstruction_para_ = new ::video_popup::PerspReconstructionPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.ReconstructionPara.persp_reconstruction_para)
  return persp_reconstruction_para_;
}
::video_popup::PerspReconstructionPara* ReconstructionPara::release_persp_reconstruction_para() {
  clear_has_persp_reconstruction_para();
  ::video_popup::PerspReconstructionPara* temp = persp_reconstruction_para_;
  persp_reconstruction_para_ = NULL;
  return temp;
}
void ReconstructionPara::set_allocated_persp_reconstruction_para(::video_popup::PerspReconstructionPara* persp_reconstruction_para) {
  delete persp_reconstruction_para_;
  persp_reconstruction_para_ = persp_reconstruction_para;
  if (persp_reconstruction_para) {
    set_has_persp_reconstruction_para();
  } else {
    clear_has_persp_reconstruction_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.ReconstructionPara.persp_reconstruction_para)
}

// optional int32 thresh = 101 [default = 50];
bool ReconstructionPara::has_thresh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReconstructionPara::set_has_thresh() {
  _has_bits_[0] |= 0x00000008u;
}
void ReconstructionPara::clear_has_thresh() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReconstructionPara::clear_thresh() {
  thresh_ = 50;
  clear_has_thresh();
}
 ::google::protobuf::int32 ReconstructionPara::thresh() const {
  // @@protoc_insertion_point(field_get:video_popup.ReconstructionPara.thresh)
  return thresh_;
}
 void ReconstructionPara::set_thresh(::google::protobuf::int32 value) {
  set_has_thresh();
  thresh_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ReconstructionPara.thresh)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace video_popup

// @@protoc_insertion_point(global_scope)
