// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video_popup.proto

#ifndef PROTOBUF_video_5fpopup_2eproto__INCLUDED
#define PROTOBUF_video_5fpopup_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace video_popup {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_video_5fpopup_2eproto();
void protobuf_AssignDesc_video_5fpopup_2eproto();
void protobuf_ShutdownFile_video_5fpopup_2eproto();

class GRICModelSelectionPara;
class ModelFittingPara;
class ModelFittingPara_GraphCutPara;
class NeighborhoodPara;
class OrthoFittingPara;
class OrthoReconstructionPara;
class PerspFittingPara;
class PerspReconstructionPara;
class ReconstructionPara;
class SegmentationPara;
class SubspaceFittingPara;

enum PerspFittingPara_FHFitting {
  PerspFittingPara_FHFitting_FONLY = 0,
  PerspFittingPara_FHFitting_HONLY = 1,
  PerspFittingPara_FHFitting_FANDH = 2
};
bool PerspFittingPara_FHFitting_IsValid(int value);
const PerspFittingPara_FHFitting PerspFittingPara_FHFitting_FHFitting_MIN = PerspFittingPara_FHFitting_FONLY;
const PerspFittingPara_FHFitting PerspFittingPara_FHFitting_FHFitting_MAX = PerspFittingPara_FHFitting_FANDH;
const int PerspFittingPara_FHFitting_FHFitting_ARRAYSIZE = PerspFittingPara_FHFitting_FHFitting_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerspFittingPara_FHFitting_descriptor();
inline const ::std::string& PerspFittingPara_FHFitting_Name(PerspFittingPara_FHFitting value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerspFittingPara_FHFitting_descriptor(), value);
}
inline bool PerspFittingPara_FHFitting_Parse(
    const ::std::string& name, PerspFittingPara_FHFitting* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerspFittingPara_FHFitting>(
    PerspFittingPara_FHFitting_descriptor(), name, value);
}
enum PerspFittingPara_FittingError {
  PerspFittingPara_FittingError_ALGEBRA = 0,
  PerspFittingPara_FittingError_SAMPSON = 1,
  PerspFittingPara_FittingError_GEOMETRIC = 2
};
bool PerspFittingPara_FittingError_IsValid(int value);
const PerspFittingPara_FittingError PerspFittingPara_FittingError_FittingError_MIN = PerspFittingPara_FittingError_ALGEBRA;
const PerspFittingPara_FittingError PerspFittingPara_FittingError_FittingError_MAX = PerspFittingPara_FittingError_GEOMETRIC;
const int PerspFittingPara_FittingError_FittingError_ARRAYSIZE = PerspFittingPara_FittingError_FittingError_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerspFittingPara_FittingError_descriptor();
inline const ::std::string& PerspFittingPara_FittingError_Name(PerspFittingPara_FittingError value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerspFittingPara_FittingError_descriptor(), value);
}
inline bool PerspFittingPara_FittingError_Parse(
    const ::std::string& name, PerspFittingPara_FittingError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerspFittingPara_FittingError>(
    PerspFittingPara_FittingError_descriptor(), name, value);
}
enum ModelFittingPara_GraphCutPara_Engine {
  ModelFittingPara_GraphCutPara_Engine_ALPHA = 0,
  ModelFittingPara_GraphCutPara_Engine_MULTI = 1,
  ModelFittingPara_GraphCutPara_Engine_ALLGC = 2
};
bool ModelFittingPara_GraphCutPara_Engine_IsValid(int value);
const ModelFittingPara_GraphCutPara_Engine ModelFittingPara_GraphCutPara_Engine_Engine_MIN = ModelFittingPara_GraphCutPara_Engine_ALPHA;
const ModelFittingPara_GraphCutPara_Engine ModelFittingPara_GraphCutPara_Engine_Engine_MAX = ModelFittingPara_GraphCutPara_Engine_ALLGC;
const int ModelFittingPara_GraphCutPara_Engine_Engine_ARRAYSIZE = ModelFittingPara_GraphCutPara_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModelFittingPara_GraphCutPara_Engine_descriptor();
inline const ::std::string& ModelFittingPara_GraphCutPara_Engine_Name(ModelFittingPara_GraphCutPara_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModelFittingPara_GraphCutPara_Engine_descriptor(), value);
}
inline bool ModelFittingPara_GraphCutPara_Engine_Parse(
    const ::std::string& name, ModelFittingPara_GraphCutPara_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModelFittingPara_GraphCutPara_Engine>(
    ModelFittingPara_GraphCutPara_Engine_descriptor(), name, value);
}
enum ModelFittingPara_FittingModel {
  ModelFittingPara_FittingModel_PERSP = 0,
  ModelFittingPara_FittingModel_ORTHO = 1,
  ModelFittingPara_FittingModel_SUBSPACE = 2
};
bool ModelFittingPara_FittingModel_IsValid(int value);
const ModelFittingPara_FittingModel ModelFittingPara_FittingModel_FittingModel_MIN = ModelFittingPara_FittingModel_PERSP;
const ModelFittingPara_FittingModel ModelFittingPara_FittingModel_FittingModel_MAX = ModelFittingPara_FittingModel_SUBSPACE;
const int ModelFittingPara_FittingModel_FittingModel_ARRAYSIZE = ModelFittingPara_FittingModel_FittingModel_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModelFittingPara_FittingModel_descriptor();
inline const ::std::string& ModelFittingPara_FittingModel_Name(ModelFittingPara_FittingModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModelFittingPara_FittingModel_descriptor(), value);
}
inline bool ModelFittingPara_FittingModel_Parse(
    const ::std::string& name, ModelFittingPara_FittingModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModelFittingPara_FittingModel>(
    ModelFittingPara_FittingModel_descriptor(), name, value);
}
enum ReconstructionPara_ReconstructionPipeline {
  ReconstructionPara_ReconstructionPipeline_ORTHO_PIECEWISE_STITCHING = 0,
  ReconstructionPara_ReconstructionPipeline_ORTHO_PIECEWISE_GLOBAL = 1,
  ReconstructionPara_ReconstructionPipeline_ORTHO_GLOBAL = 2,
  ReconstructionPara_ReconstructionPipeline_PERSP_PIECEWISE_STITCHING = 3,
  ReconstructionPara_ReconstructionPipeline_PERSP_PIECEWISE_GLOBAL = 4,
  ReconstructionPara_ReconstructionPipeline_PERSP_GLOBAL = 5
};
bool ReconstructionPara_ReconstructionPipeline_IsValid(int value);
const ReconstructionPara_ReconstructionPipeline ReconstructionPara_ReconstructionPipeline_ReconstructionPipeline_MIN = ReconstructionPara_ReconstructionPipeline_ORTHO_PIECEWISE_STITCHING;
const ReconstructionPara_ReconstructionPipeline ReconstructionPara_ReconstructionPipeline_ReconstructionPipeline_MAX = ReconstructionPara_ReconstructionPipeline_PERSP_GLOBAL;
const int ReconstructionPara_ReconstructionPipeline_ReconstructionPipeline_ARRAYSIZE = ReconstructionPara_ReconstructionPipeline_ReconstructionPipeline_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReconstructionPara_ReconstructionPipeline_descriptor();
inline const ::std::string& ReconstructionPara_ReconstructionPipeline_Name(ReconstructionPara_ReconstructionPipeline value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReconstructionPara_ReconstructionPipeline_descriptor(), value);
}
inline bool ReconstructionPara_ReconstructionPipeline_Parse(
    const ::std::string& name, ReconstructionPara_ReconstructionPipeline* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReconstructionPara_ReconstructionPipeline>(
    ReconstructionPara_ReconstructionPipeline_descriptor(), name, value);
}
// ===================================================================

class NeighborhoodPara : public ::google::protobuf::Message {
 public:
  NeighborhoodPara();
  virtual ~NeighborhoodPara();

  NeighborhoodPara(const NeighborhoodPara& from);

  inline NeighborhoodPara& operator=(const NeighborhoodPara& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NeighborhoodPara& default_instance();

  void Swap(NeighborhoodPara* other);

  // implements Message ----------------------------------------------

  inline NeighborhoodPara* New() const { return New(NULL); }

  NeighborhoodPara* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NeighborhoodPara& from);
  void MergeFrom(const NeighborhoodPara& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NeighborhoodPara* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float velocity_weight = 1 [default = 2000];
  bool has_velocity_weight() const;
  void clear_velocity_weight();
  static const int kVelocityWeightFieldNumber = 1;
  float velocity_weight() const;
  void set_velocity_weight(float value);

  // optional int32 top_frames_num = 2 [default = -1];
  bool has_top_frames_num() const;
  void clear_top_frames_num();
  static const int kTopFramesNumFieldNumber = 2;
  ::google::protobuf::int32 top_frames_num() const;
  void set_top_frames_num(::google::protobuf::int32 value);

  // optional float dist_threshold = 3 [default = 10000];
  bool has_dist_threshold() const;
  void clear_dist_threshold();
  static const int kDistThresholdFieldNumber = 3;
  float dist_threshold() const;
  void set_dist_threshold(float value);

  // optional float occlusion_penalty = 4 [default = 500];
  bool has_occlusion_penalty() const;
  void clear_occlusion_penalty();
  static const int kOcclusionPenaltyFieldNumber = 4;
  float occlusion_penalty() const;
  void set_occlusion_penalty(float value);

  // optional int32 max_occlusion_frames = 5 [default = 45];
  bool has_max_occlusion_frames() const;
  void clear_max_occlusion_frames();
  static const int kMaxOcclusionFramesFieldNumber = 5;
  ::google::protobuf::int32 max_occlusion_frames() const;
  void set_max_occlusion_frames(::google::protobuf::int32 value);

  // optional float color_weight = 6 [default = 2.5];
  bool has_color_weight() const;
  void clear_color_weight();
  static const int kColorWeightFieldNumber = 6;
  float color_weight() const;
  void set_color_weight(float value);

  // optional int32 neighbor_num = 7 [default = 10];
  bool has_neighbor_num() const;
  void clear_neighbor_num();
  static const int kNeighborNumFieldNumber = 7;
  ::google::protobuf::int32 neighbor_num() const;
  void set_neighbor_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:video_popup.NeighborhoodPara)
 private:
  inline void set_has_velocity_weight();
  inline void clear_has_velocity_weight();
  inline void set_has_top_frames_num();
  inline void clear_has_top_frames_num();
  inline void set_has_dist_threshold();
  inline void clear_has_dist_threshold();
  inline void set_has_occlusion_penalty();
  inline void clear_has_occlusion_penalty();
  inline void set_has_max_occlusion_frames();
  inline void clear_has_max_occlusion_frames();
  inline void set_has_color_weight();
  inline void clear_has_color_weight();
  inline void set_has_neighbor_num();
  inline void clear_has_neighbor_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float velocity_weight_;
  ::google::protobuf::int32 top_frames_num_;
  float dist_threshold_;
  float occlusion_penalty_;
  ::google::protobuf::int32 max_occlusion_frames_;
  float color_weight_;
  ::google::protobuf::int32 neighbor_num_;
  friend void  protobuf_AddDesc_video_5fpopup_2eproto();
  friend void protobuf_AssignDesc_video_5fpopup_2eproto();
  friend void protobuf_ShutdownFile_video_5fpopup_2eproto();

  void InitAsDefaultInstance();
  static NeighborhoodPara* default_instance_;
};
// -------------------------------------------------------------------

class GRICModelSelectionPara : public ::google::protobuf::Message {
 public:
  GRICModelSelectionPara();
  virtual ~GRICModelSelectionPara();

  GRICModelSelectionPara(const GRICModelSelectionPara& from);

  inline GRICModelSelectionPara& operator=(const GRICModelSelectionPara& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GRICModelSelectionPara& default_instance();

  void Swap(GRICModelSelectionPara* other);

  // implements Message ----------------------------------------------

  inline GRICModelSelectionPara* New() const { return New(NULL); }

  GRICModelSelectionPara* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GRICModelSelectionPara& from);
  void MergeFrom(const GRICModelSelectionPara& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GRICModelSelectionPara* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float noise = 1 [default = 0.05];
  bool has_noise() const;
  void clear_noise();
  static const int kNoiseFieldNumber = 1;
  float noise() const;
  void set_noise(float value);

  // optional float lambda1 = 2 [default = 1];
  bool has_lambda1() const;
  void clear_lambda1();
  static const int kLambda1FieldNumber = 2;
  float lambda1() const;
  void set_lambda1(float value);

  // optional float lamnda2 = 3 [default = 0.01];
  bool has_lamnda2() const;
  void clear_lamnda2();
  static const int kLamnda2FieldNumber = 3;
  float lamnda2() const;
  void set_lamnda2(float value);

  // @@protoc_insertion_point(class_scope:video_popup.GRICModelSelectionPara)
 private:
  inline void set_has_noise();
  inline void clear_has_noise();
  inline void set_has_lambda1();
  inline void clear_has_lambda1();
  inline void set_has_lamnda2();
  inline void clear_has_lamnda2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float noise_;
  float lambda1_;
  float lamnda2_;
  friend void  protobuf_AddDesc_video_5fpopup_2eproto();
  friend void protobuf_AssignDesc_video_5fpopup_2eproto();
  friend void protobuf_ShutdownFile_video_5fpopup_2eproto();

  void InitAsDefaultInstance();
  static GRICModelSelectionPara* default_instance_;
};
// -------------------------------------------------------------------

class PerspFittingPara : public ::google::protobuf::Message {
 public:
  PerspFittingPara();
  virtual ~PerspFittingPara();

  PerspFittingPara(const PerspFittingPara& from);

  inline PerspFittingPara& operator=(const PerspFittingPara& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerspFittingPara& default_instance();

  void Swap(PerspFittingPara* other);

  // implements Message ----------------------------------------------

  inline PerspFittingPara* New() const { return New(NULL); }

  PerspFittingPara* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PerspFittingPara& from);
  void MergeFrom(const PerspFittingPara& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerspFittingPara* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PerspFittingPara_FHFitting FHFitting;
  static const FHFitting FONLY = PerspFittingPara_FHFitting_FONLY;
  static const FHFitting HONLY = PerspFittingPara_FHFitting_HONLY;
  static const FHFitting FANDH = PerspFittingPara_FHFitting_FANDH;
  static inline bool FHFitting_IsValid(int value) {
    return PerspFittingPara_FHFitting_IsValid(value);
  }
  static const FHFitting FHFitting_MIN =
    PerspFittingPara_FHFitting_FHFitting_MIN;
  static const FHFitting FHFitting_MAX =
    PerspFittingPara_FHFitting_FHFitting_MAX;
  static const int FHFitting_ARRAYSIZE =
    PerspFittingPara_FHFitting_FHFitting_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FHFitting_descriptor() {
    return PerspFittingPara_FHFitting_descriptor();
  }
  static inline const ::std::string& FHFitting_Name(FHFitting value) {
    return PerspFittingPara_FHFitting_Name(value);
  }
  static inline bool FHFitting_Parse(const ::std::string& name,
      FHFitting* value) {
    return PerspFittingPara_FHFitting_Parse(name, value);
  }

  typedef PerspFittingPara_FittingError FittingError;
  static const FittingError ALGEBRA = PerspFittingPara_FittingError_ALGEBRA;
  static const FittingError SAMPSON = PerspFittingPara_FittingError_SAMPSON;
  static const FittingError GEOMETRIC = PerspFittingPara_FittingError_GEOMETRIC;
  static inline bool FittingError_IsValid(int value) {
    return PerspFittingPara_FittingError_IsValid(value);
  }
  static const FittingError FittingError_MIN =
    PerspFittingPara_FittingError_FittingError_MIN;
  static const FittingError FittingError_MAX =
    PerspFittingPara_FittingError_FittingError_MAX;
  static const int FittingError_ARRAYSIZE =
    PerspFittingPara_FittingError_FittingError_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FittingError_descriptor() {
    return PerspFittingPara_FittingError_descriptor();
  }
  static inline const ::std::string& FittingError_Name(FittingError value) {
    return PerspFittingPara_FittingError_Name(value);
  }
  static inline bool FittingError_Parse(const ::std::string& name,
      FittingError* value) {
    return PerspFittingPara_FittingError_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .video_popup.PerspFittingPara.FHFitting fh_fitting = 1 [default = FONLY];
  bool has_fh_fitting() const;
  void clear_fh_fitting();
  static const int kFhFittingFieldNumber = 1;
  ::video_popup::PerspFittingPara_FHFitting fh_fitting() const;
  void set_fh_fitting(::video_popup::PerspFittingPara_FHFitting value);

  // optional .video_popup.PerspFittingPara.FittingError fitting_error = 2 [default = ALGEBRA];
  bool has_fitting_error() const;
  void clear_fitting_error();
  static const int kFittingErrorFieldNumber = 2;
  ::video_popup::PerspFittingPara_FittingError fitting_error() const;
  void set_fitting_error(::video_popup::PerspFittingPara_FittingError value);

  // @@protoc_insertion_point(class_scope:video_popup.PerspFittingPara)
 private:
  inline void set_has_fh_fitting();
  inline void clear_has_fh_fitting();
  inline void set_has_fitting_error();
  inline void clear_has_fitting_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int fh_fitting_;
  int fitting_error_;
  friend void  protobuf_AddDesc_video_5fpopup_2eproto();
  friend void protobuf_AssignDesc_video_5fpopup_2eproto();
  friend void protobuf_ShutdownFile_video_5fpopup_2eproto();

  void InitAsDefaultInstance();
  static PerspFittingPara* default_instance_;
};
// -------------------------------------------------------------------

class OrthoFittingPara : public ::google::protobuf::Message {
 public:
  OrthoFittingPara();
  virtual ~OrthoFittingPara();

  OrthoFittingPara(const OrthoFittingPara& from);

  inline OrthoFittingPara& operator=(const OrthoFittingPara& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrthoFittingPara& default_instance();

  void Swap(OrthoFittingPara* other);

  // implements Message ----------------------------------------------

  inline OrthoFittingPara* New() const { return New(NULL); }

  OrthoFittingPara* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrthoFittingPara& from);
  void MergeFrom(const OrthoFittingPara& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OrthoFittingPara* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:video_popup.OrthoFittingPara)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_video_5fpopup_2eproto();
  friend void protobuf_AssignDesc_video_5fpopup_2eproto();
  friend void protobuf_ShutdownFile_video_5fpopup_2eproto();

  void InitAsDefaultInstance();
  static OrthoFittingPara* default_instance_;
};
// -------------------------------------------------------------------

class SubspaceFittingPara : public ::google::protobuf::Message {
 public:
  SubspaceFittingPara();
  virtual ~SubspaceFittingPara();

  SubspaceFittingPara(const SubspaceFittingPara& from);

  inline SubspaceFittingPara& operator=(const SubspaceFittingPara& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubspaceFittingPara& default_instance();

  void Swap(SubspaceFittingPara* other);

  // implements Message ----------------------------------------------

  inline SubspaceFittingPara* New() const { return New(NULL); }

  SubspaceFittingPara* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubspaceFittingPara& from);
  void MergeFrom(const SubspaceFittingPara& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubspaceFittingPara* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:video_popup.SubspaceFittingPara)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_video_5fpopup_2eproto();
  friend void protobuf_AssignDesc_video_5fpopup_2eproto();
  friend void protobuf_ShutdownFile_video_5fpopup_2eproto();

  void InitAsDefaultInstance();
  static SubspaceFittingPara* default_instance_;
};
// -------------------------------------------------------------------

class ModelFittingPara_GraphCutPara : public ::google::protobuf::Message {
 public:
  ModelFittingPara_GraphCutPara();
  virtual ~ModelFittingPara_GraphCutPara();

  ModelFittingPara_GraphCutPara(const ModelFittingPara_GraphCutPara& from);

  inline ModelFittingPara_GraphCutPara& operator=(const ModelFittingPara_GraphCutPara& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelFittingPara_GraphCutPara& default_instance();

  void Swap(ModelFittingPara_GraphCutPara* other);

  // implements Message ----------------------------------------------

  inline ModelFittingPara_GraphCutPara* New() const { return New(NULL); }

  ModelFittingPara_GraphCutPara* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelFittingPara_GraphCutPara& from);
  void MergeFrom(const ModelFittingPara_GraphCutPara& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelFittingPara_GraphCutPara* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ModelFittingPara_GraphCutPara_Engine Engine;
  static const Engine ALPHA = ModelFittingPara_GraphCutPara_Engine_ALPHA;
  static const Engine MULTI = ModelFittingPara_GraphCutPara_Engine_MULTI;
  static const Engine ALLGC = ModelFittingPara_GraphCutPara_Engine_ALLGC;
  static inline bool Engine_IsValid(int value) {
    return ModelFittingPara_GraphCutPara_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ModelFittingPara_GraphCutPara_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ModelFittingPara_GraphCutPara_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ModelFittingPara_GraphCutPara_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ModelFittingPara_GraphCutPara_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ModelFittingPara_GraphCutPara_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ModelFittingPara_GraphCutPara_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .video_popup.ModelFittingPara.GraphCutPara.Engine engine = 1 [default = ALLGC];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::video_popup::ModelFittingPara_GraphCutPara_Engine engine() const;
  void set_engine(::video_popup::ModelFittingPara_GraphCutPara_Engine value);

  // optional float overlap_cost = 2 [default = 1];
  bool has_overlap_cost() const;
  void clear_overlap_cost();
  static const int kOverlapCostFieldNumber = 2;
  float overlap_cost() const;
  void set_overlap_cost(float value);

  // optional float pointwise_breaking_lambda = 3 [default = 1];
  bool has_pointwise_breaking_lambda() const;
  void clear_pointwise_breaking_lambda();
  static const int kPointwiseBreakingLambdaFieldNumber = 3;
  float pointwise_breaking_lambda() const;
  void set_pointwise_breaking_lambda(float value);

  // optional float pointwise_outlier_lambda = 4 [default = 1];
  bool has_pointwise_outlier_lambda() const;
  void clear_pointwise_outlier_lambda();
  static const int kPointwiseOutlierLambdaFieldNumber = 4;
  float pointwise_outlier_lambda() const;
  void set_pointwise_outlier_lambda(float value);

  // optional float pairwise_breaking_ma = 5 [default = 100];
  bool has_pairwise_breaking_ma() const;
  void clear_pairwise_breaking_ma();
  static const int kPairwiseBreakingMaFieldNumber = 5;
  float pairwise_breaking_ma() const;
  void set_pairwise_breaking_ma(float value);

  // optional float pairwise_breaking_mb = 6 [default = 100];
  bool has_pairwise_breaking_mb() const;
  void clear_pairwise_breaking_mb();
  static const int kPairwiseBreakingMbFieldNumber = 6;
  float pairwise_breaking_mb() const;
  void set_pairwise_breaking_mb(float value);

  // optional float pairwise_breaking_mc = 7 [default = 30];
  bool has_pairwise_breaking_mc() const;
  void clear_pairwise_breaking_mc();
  static const int kPairwiseBreakingMcFieldNumber = 7;
  float pairwise_breaking_mc() const;
  void set_pairwise_breaking_mc(float value);

  // optional float pairwise_weight = 8 [default = 100];
  bool has_pairwise_weight() const;
  void clear_pairwise_weight();
  static const int kPairwiseWeightFieldNumber = 8;
  float pairwise_weight() const;
  void set_pairwise_weight(float value);

  // optional float pairwise_sigma = 9 [default = 10];
  bool has_pairwise_sigma() const;
  void clear_pairwise_sigma();
  static const int kPairwiseSigmaFieldNumber = 9;
  float pairwise_sigma() const;
  void set_pairwise_sigma(float value);

  // optional int32 neighbors_num = 10 [default = 5];
  bool has_neighbors_num() const;
  void clear_neighbors_num();
  static const int kNeighborsNumFieldNumber = 10;
  ::google::protobuf::int32 neighbors_num() const;
  void set_neighbors_num(::google::protobuf::int32 value);

  // optional int32 overlap_neighbor_num = 11 [default = 5];
  bool has_overlap_neighbor_num() const;
  void clear_overlap_neighbor_num();
  static const int kOverlapNeighborNumFieldNumber = 11;
  ::google::protobuf::int32 overlap_neighbor_num() const;
  void set_overlap_neighbor_num(::google::protobuf::int32 value);

  // optional float lambda_weight = 12 [default = 1];
  bool has_lambda_weight() const;
  void clear_lambda_weight();
  static const int kLambdaWeightFieldNumber = 12;
  float lambda_weight() const;
  void set_lambda_weight(float value);

  // @@protoc_insertion_point(class_scope:video_popup.ModelFittingPara.GraphCutPara)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_overlap_cost();
  inline void clear_has_overlap_cost();
  inline void set_has_pointwise_breaking_lambda();
  inline void clear_has_pointwise_breaking_lambda();
  inline void set_has_pointwise_outlier_lambda();
  inline void clear_has_pointwise_outlier_lambda();
  inline void set_has_pairwise_breaking_ma();
  inline void clear_has_pairwise_breaking_ma();
  inline void set_has_pairwise_breaking_mb();
  inline void clear_has_pairwise_breaking_mb();
  inline void set_has_pairwise_breaking_mc();
  inline void clear_has_pairwise_breaking_mc();
  inline void set_has_pairwise_weight();
  inline void clear_has_pairwise_weight();
  inline void set_has_pairwise_sigma();
  inline void clear_has_pairwise_sigma();
  inline void set_has_neighbors_num();
  inline void clear_has_neighbors_num();
  inline void set_has_overlap_neighbor_num();
  inline void clear_has_overlap_neighbor_num();
  inline void set_has_lambda_weight();
  inline void clear_has_lambda_weight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int engine_;
  float overlap_cost_;
  float pointwise_breaking_lambda_;
  float pointwise_outlier_lambda_;
  float pairwise_breaking_ma_;
  float pairwise_breaking_mb_;
  float pairwise_breaking_mc_;
  float pairwise_weight_;
  float pairwise_sigma_;
  ::google::protobuf::int32 neighbors_num_;
  ::google::protobuf::int32 overlap_neighbor_num_;
  float lambda_weight_;
  friend void  protobuf_AddDesc_video_5fpopup_2eproto();
  friend void protobuf_AssignDesc_video_5fpopup_2eproto();
  friend void protobuf_ShutdownFile_video_5fpopup_2eproto();

  void InitAsDefaultInstance();
  static ModelFittingPara_GraphCutPara* default_instance_;
};
// -------------------------------------------------------------------

class ModelFittingPara : public ::google::protobuf::Message {
 public:
  ModelFittingPara();
  virtual ~ModelFittingPara();

  ModelFittingPara(const ModelFittingPara& from);

  inline ModelFittingPara& operator=(const ModelFittingPara& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelFittingPara& default_instance();

  void Swap(ModelFittingPara* other);

  // implements Message ----------------------------------------------

  inline ModelFittingPara* New() const { return New(NULL); }

  ModelFittingPara* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelFittingPara& from);
  void MergeFrom(const ModelFittingPara& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelFittingPara* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ModelFittingPara_GraphCutPara GraphCutPara;

  typedef ModelFittingPara_FittingModel FittingModel;
  static const FittingModel PERSP = ModelFittingPara_FittingModel_PERSP;
  static const FittingModel ORTHO = ModelFittingPara_FittingModel_ORTHO;
  static const FittingModel SUBSPACE = ModelFittingPara_FittingModel_SUBSPACE;
  static inline bool FittingModel_IsValid(int value) {
    return ModelFittingPara_FittingModel_IsValid(value);
  }
  static const FittingModel FittingModel_MIN =
    ModelFittingPara_FittingModel_FittingModel_MIN;
  static const FittingModel FittingModel_MAX =
    ModelFittingPara_FittingModel_FittingModel_MAX;
  static const int FittingModel_ARRAYSIZE =
    ModelFittingPara_FittingModel_FittingModel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FittingModel_descriptor() {
    return ModelFittingPara_FittingModel_descriptor();
  }
  static inline const ::std::string& FittingModel_Name(FittingModel value) {
    return ModelFittingPara_FittingModel_Name(value);
  }
  static inline bool FittingModel_Parse(const ::std::string& name,
      FittingModel* value) {
    return ModelFittingPara_FittingModel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 init_proposal_num = 2 [default = 200];
  bool has_init_proposal_num() const;
  void clear_init_proposal_num();
  static const int kInitProposalNumFieldNumber = 2;
  ::google::protobuf::int32 init_proposal_num() const;
  void set_init_proposal_num(::google::protobuf::int32 value);

  // optional float mdl = 3 [default = 4000];
  bool has_mdl() const;
  void clear_mdl();
  static const int kMdlFieldNumber = 3;
  float mdl() const;
  void set_mdl(float value);

  // optional float iters_num = 4 [default = 5];
  bool has_iters_num() const;
  void clear_iters_num();
  static const int kItersNumFieldNumber = 4;
  float iters_num() const;
  void set_iters_num(float value);

  // optional .video_popup.PerspFittingPara persp_fitting_para = 101;
  bool has_persp_fitting_para() const;
  void clear_persp_fitting_para();
  static const int kPerspFittingParaFieldNumber = 101;
  const ::video_popup::PerspFittingPara& persp_fitting_para() const;
  ::video_popup::PerspFittingPara* mutable_persp_fitting_para();
  ::video_popup::PerspFittingPara* release_persp_fitting_para();
  void set_allocated_persp_fitting_para(::video_popup::PerspFittingPara* persp_fitting_para);

  // optional .video_popup.OrthoFittingPara ortho_fitting_para = 102;
  bool has_ortho_fitting_para() const;
  void clear_ortho_fitting_para();
  static const int kOrthoFittingParaFieldNumber = 102;
  const ::video_popup::OrthoFittingPara& ortho_fitting_para() const;
  ::video_popup::OrthoFittingPara* mutable_ortho_fitting_para();
  ::video_popup::OrthoFittingPara* release_ortho_fitting_para();
  void set_allocated_ortho_fitting_para(::video_popup::OrthoFittingPara* ortho_fitting_para);

  // optional .video_popup.SubspaceFittingPara subspace_fitting_para = 103;
  bool has_subspace_fitting_para() const;
  void clear_subspace_fitting_para();
  static const int kSubspaceFittingParaFieldNumber = 103;
  const ::video_popup::SubspaceFittingPara& subspace_fitting_para() const;
  ::video_popup::SubspaceFittingPara* mutable_subspace_fitting_para();
  ::video_popup::SubspaceFittingPara* release_subspace_fitting_para();
  void set_allocated_subspace_fitting_para(::video_popup::SubspaceFittingPara* subspace_fitting_para);

  // optional .video_popup.ModelFittingPara.FittingModel fitting_model = 104 [default = PERSP];
  bool has_fitting_model() const;
  void clear_fitting_model();
  static const int kFittingModelFieldNumber = 104;
  ::video_popup::ModelFittingPara_FittingModel fitting_model() const;
  void set_fitting_model(::video_popup::ModelFittingPara_FittingModel value);

  // optional bool use_gric_model_selection = 201 [default = false];
  bool has_use_gric_model_selection() const;
  void clear_use_gric_model_selection();
  static const int kUseGricModelSelectionFieldNumber = 201;
  bool use_gric_model_selection() const;
  void set_use_gric_model_selection(bool value);

  // optional .video_popup.GRICModelSelectionPara gric_model_selection_para = 202;
  bool has_gric_model_selection_para() const;
  void clear_gric_model_selection_para();
  static const int kGricModelSelectionParaFieldNumber = 202;
  const ::video_popup::GRICModelSelectionPara& gric_model_selection_para() const;
  ::video_popup::GRICModelSelectionPara* mutable_gric_model_selection_para();
  ::video_popup::GRICModelSelectionPara* release_gric_model_selection_para();
  void set_allocated_gric_model_selection_para(::video_popup::GRICModelSelectionPara* gric_model_selection_para);

  // optional .video_popup.ModelFittingPara.GraphCutPara graph_cut_para = 301;
  bool has_graph_cut_para() const;
  void clear_graph_cut_para();
  static const int kGraphCutParaFieldNumber = 301;
  const ::video_popup::ModelFittingPara_GraphCutPara& graph_cut_para() const;
  ::video_popup::ModelFittingPara_GraphCutPara* mutable_graph_cut_para();
  ::video_popup::ModelFittingPara_GraphCutPara* release_graph_cut_para();
  void set_allocated_graph_cut_para(::video_popup::ModelFittingPara_GraphCutPara* graph_cut_para);

  // @@protoc_insertion_point(class_scope:video_popup.ModelFittingPara)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_init_proposal_num();
  inline void clear_has_init_proposal_num();
  inline void set_has_mdl();
  inline void clear_has_mdl();
  inline void set_has_iters_num();
  inline void clear_has_iters_num();
  inline void set_has_persp_fitting_para();
  inline void clear_has_persp_fitting_para();
  inline void set_has_ortho_fitting_para();
  inline void clear_has_ortho_fitting_para();
  inline void set_has_subspace_fitting_para();
  inline void clear_has_subspace_fitting_para();
  inline void set_has_fitting_model();
  inline void clear_has_fitting_model();
  inline void set_has_use_gric_model_selection();
  inline void clear_has_use_gric_model_selection();
  inline void set_has_gric_model_selection_para();
  inline void clear_has_gric_model_selection_para();
  inline void set_has_graph_cut_para();
  inline void clear_has_graph_cut_para();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 init_proposal_num_;
  float mdl_;
  ::video_popup::PerspFittingPara* persp_fitting_para_;
  ::video_popup::OrthoFittingPara* ortho_fitting_para_;
  float iters_num_;
  int fitting_model_;
  ::video_popup::SubspaceFittingPara* subspace_fitting_para_;
  ::video_popup::GRICModelSelectionPara* gric_model_selection_para_;
  ::video_popup::ModelFittingPara_GraphCutPara* graph_cut_para_;
  bool use_gric_model_selection_;
  friend void  protobuf_AddDesc_video_5fpopup_2eproto();
  friend void protobuf_AssignDesc_video_5fpopup_2eproto();
  friend void protobuf_ShutdownFile_video_5fpopup_2eproto();

  void InitAsDefaultInstance();
  static ModelFittingPara* default_instance_;
};
// -------------------------------------------------------------------

class SegmentationPara : public ::google::protobuf::Message {
 public:
  SegmentationPara();
  virtual ~SegmentationPara();

  SegmentationPara(const SegmentationPara& from);

  inline SegmentationPara& operator=(const SegmentationPara& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SegmentationPara& default_instance();

  void Swap(SegmentationPara* other);

  // implements Message ----------------------------------------------

  inline SegmentationPara* New() const { return New(NULL); }

  SegmentationPara* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SegmentationPara& from);
  void MergeFrom(const SegmentationPara& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SegmentationPara* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tracks_path = 1;
  bool has_tracks_path() const;
  void clear_tracks_path();
  static const int kTracksPathFieldNumber = 1;
  const ::std::string& tracks_path() const;
  void set_tracks_path(const ::std::string& value);
  void set_tracks_path(const char* value);
  void set_tracks_path(const char* value, size_t size);
  ::std::string* mutable_tracks_path();
  ::std::string* release_tracks_path();
  void set_allocated_tracks_path(::std::string* tracks_path);

  // optional string images_path = 2;
  bool has_images_path() const;
  void clear_images_path();
  static const int kImagesPathFieldNumber = 2;
  const ::std::string& images_path() const;
  void set_images_path(const ::std::string& value);
  void set_images_path(const char* value);
  void set_images_path(const char* value, size_t size);
  ::std::string* mutable_images_path();
  ::std::string* release_images_path();
  void set_allocated_images_path(::std::string* images_path);

  // optional int32 min_vis_frames = 3 [default = 5];
  bool has_min_vis_frames() const;
  void clear_min_vis_frames();
  static const int kMinVisFramesFieldNumber = 3;
  ::google::protobuf::int32 min_vis_frames() const;
  void set_min_vis_frames(::google::protobuf::int32 value);

  // optional .video_popup.ModelFittingPara model_fitting_para = 101;
  bool has_model_fitting_para() const;
  void clear_model_fitting_para();
  static const int kModelFittingParaFieldNumber = 101;
  const ::video_popup::ModelFittingPara& model_fitting_para() const;
  ::video_popup::ModelFittingPara* mutable_model_fitting_para();
  ::video_popup::ModelFittingPara* release_model_fitting_para();
  void set_allocated_model_fitting_para(::video_popup::ModelFittingPara* model_fitting_para);

  // @@protoc_insertion_point(class_scope:video_popup.SegmentationPara)
 private:
  inline void set_has_tracks_path();
  inline void clear_has_tracks_path();
  inline void set_has_images_path();
  inline void clear_has_images_path();
  inline void set_has_min_vis_frames();
  inline void clear_has_min_vis_frames();
  inline void set_has_model_fitting_para();
  inline void clear_has_model_fitting_para();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tracks_path_;
  ::google::protobuf::internal::ArenaStringPtr images_path_;
  ::video_popup::ModelFittingPara* model_fitting_para_;
  ::google::protobuf::int32 min_vis_frames_;
  friend void  protobuf_AddDesc_video_5fpopup_2eproto();
  friend void protobuf_AssignDesc_video_5fpopup_2eproto();
  friend void protobuf_ShutdownFile_video_5fpopup_2eproto();

  void InitAsDefaultInstance();
  static SegmentationPara* default_instance_;
};
// -------------------------------------------------------------------

class OrthoReconstructionPara : public ::google::protobuf::Message {
 public:
  OrthoReconstructionPara();
  virtual ~OrthoReconstructionPara();

  OrthoReconstructionPara(const OrthoReconstructionPara& from);

  inline OrthoReconstructionPara& operator=(const OrthoReconstructionPara& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrthoReconstructionPara& default_instance();

  void Swap(OrthoReconstructionPara* other);

  // implements Message ----------------------------------------------

  inline OrthoReconstructionPara* New() const { return New(NULL); }

  OrthoReconstructionPara* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrthoReconstructionPara& from);
  void MergeFrom(const OrthoReconstructionPara& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OrthoReconstructionPara* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float MC1 = 1 [default = 0.001];
  bool has_mc1() const;
  void clear_mc1();
  static const int kMC1FieldNumber = 1;
  float mc1() const;
  void set_mc1(float value);

  // optional float MC2 = 2 [default = 20];
  bool has_mc2() const;
  void clear_mc2();
  static const int kMC2FieldNumber = 2;
  float mc2() const;
  void set_mc2(float value);

  // optional float MC3 = 3 [default = 10];
  bool has_mc3() const;
  void clear_mc3();
  static const int kMC3FieldNumber = 3;
  float mc3() const;
  void set_mc3(float value);

  // optional int32 ba_model = 4 [default = 0];
  bool has_ba_model() const;
  void clear_ba_model();
  static const int kBaModelFieldNumber = 4;
  ::google::protobuf::int32 ba_model() const;
  void set_ba_model(::google::protobuf::int32 value);

  // optional float alpha_s = 5 [default = 0.01];
  bool has_alpha_s() const;
  void clear_alpha_s();
  static const int kAlphaSFieldNumber = 5;
  float alpha_s() const;
  void set_alpha_s(float value);

  // optional float alpha_z = 6 [default = 0.01];
  bool has_alpha_z() const;
  void clear_alpha_z();
  static const int kAlphaZFieldNumber = 6;
  float alpha_z() const;
  void set_alpha_z(float value);

  // optional float alpha_prior = 7 [default = 10];
  bool has_alpha_prior() const;
  void clear_alpha_prior();
  static const int kAlphaPriorFieldNumber = 7;
  float alpha_prior() const;
  void set_alpha_prior(float value);

  // @@protoc_insertion_point(class_scope:video_popup.OrthoReconstructionPara)
 private:
  inline void set_has_mc1();
  inline void clear_has_mc1();
  inline void set_has_mc2();
  inline void clear_has_mc2();
  inline void set_has_mc3();
  inline void clear_has_mc3();
  inline void set_has_ba_model();
  inline void clear_has_ba_model();
  inline void set_has_alpha_s();
  inline void clear_has_alpha_s();
  inline void set_has_alpha_z();
  inline void clear_has_alpha_z();
  inline void set_has_alpha_prior();
  inline void clear_has_alpha_prior();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float mc1_;
  float mc2_;
  float mc3_;
  ::google::protobuf::int32 ba_model_;
  float alpha_s_;
  float alpha_z_;
  float alpha_prior_;
  friend void  protobuf_AddDesc_video_5fpopup_2eproto();
  friend void protobuf_AssignDesc_video_5fpopup_2eproto();
  friend void protobuf_ShutdownFile_video_5fpopup_2eproto();

  void InitAsDefaultInstance();
  static OrthoReconstructionPara* default_instance_;
};
// -------------------------------------------------------------------

class PerspReconstructionPara : public ::google::protobuf::Message {
 public:
  PerspReconstructionPara();
  virtual ~PerspReconstructionPara();

  PerspReconstructionPara(const PerspReconstructionPara& from);

  inline PerspReconstructionPara& operator=(const PerspReconstructionPara& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerspReconstructionPara& default_instance();

  void Swap(PerspReconstructionPara* other);

  // implements Message ----------------------------------------------

  inline PerspReconstructionPara* New() const { return New(NULL); }

  PerspReconstructionPara* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PerspReconstructionPara& from);
  void MergeFrom(const PerspReconstructionPara& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerspReconstructionPara* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float fx = 1 [default = 800];
  bool has_fx() const;
  void clear_fx();
  static const int kFxFieldNumber = 1;
  float fx() const;
  void set_fx(float value);

  // optional float fy = 2 [default = 800];
  bool has_fy() const;
  void clear_fy();
  static const int kFyFieldNumber = 2;
  float fy() const;
  void set_fy(float value);

  // optional float u0 = 3 [default = 640];
  bool has_u0() const;
  void clear_u0();
  static const int kU0FieldNumber = 3;
  float u0() const;
  void set_u0(float value);

  // optional float v0 = 4 [default = 360];
  bool has_v0() const;
  void clear_v0();
  static const int kV0FieldNumber = 4;
  float v0() const;
  void set_v0(float value);

  // @@protoc_insertion_point(class_scope:video_popup.PerspReconstructionPara)
 private:
  inline void set_has_fx();
  inline void clear_has_fx();
  inline void set_has_fy();
  inline void clear_has_fy();
  inline void set_has_u0();
  inline void clear_has_u0();
  inline void set_has_v0();
  inline void clear_has_v0();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float fx_;
  float fy_;
  float u0_;
  float v0_;
  friend void  protobuf_AddDesc_video_5fpopup_2eproto();
  friend void protobuf_AssignDesc_video_5fpopup_2eproto();
  friend void protobuf_ShutdownFile_video_5fpopup_2eproto();

  void InitAsDefaultInstance();
  static PerspReconstructionPara* default_instance_;
};
// -------------------------------------------------------------------

class ReconstructionPara : public ::google::protobuf::Message {
 public:
  ReconstructionPara();
  virtual ~ReconstructionPara();

  ReconstructionPara(const ReconstructionPara& from);

  inline ReconstructionPara& operator=(const ReconstructionPara& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReconstructionPara& default_instance();

  void Swap(ReconstructionPara* other);

  // implements Message ----------------------------------------------

  inline ReconstructionPara* New() const { return New(NULL); }

  ReconstructionPara* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReconstructionPara& from);
  void MergeFrom(const ReconstructionPara& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReconstructionPara* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReconstructionPara_ReconstructionPipeline ReconstructionPipeline;
  static const ReconstructionPipeline ORTHO_PIECEWISE_STITCHING = ReconstructionPara_ReconstructionPipeline_ORTHO_PIECEWISE_STITCHING;
  static const ReconstructionPipeline ORTHO_PIECEWISE_GLOBAL = ReconstructionPara_ReconstructionPipeline_ORTHO_PIECEWISE_GLOBAL;
  static const ReconstructionPipeline ORTHO_GLOBAL = ReconstructionPara_ReconstructionPipeline_ORTHO_GLOBAL;
  static const ReconstructionPipeline PERSP_PIECEWISE_STITCHING = ReconstructionPara_ReconstructionPipeline_PERSP_PIECEWISE_STITCHING;
  static const ReconstructionPipeline PERSP_PIECEWISE_GLOBAL = ReconstructionPara_ReconstructionPipeline_PERSP_PIECEWISE_GLOBAL;
  static const ReconstructionPipeline PERSP_GLOBAL = ReconstructionPara_ReconstructionPipeline_PERSP_GLOBAL;
  static inline bool ReconstructionPipeline_IsValid(int value) {
    return ReconstructionPara_ReconstructionPipeline_IsValid(value);
  }
  static const ReconstructionPipeline ReconstructionPipeline_MIN =
    ReconstructionPara_ReconstructionPipeline_ReconstructionPipeline_MIN;
  static const ReconstructionPipeline ReconstructionPipeline_MAX =
    ReconstructionPara_ReconstructionPipeline_ReconstructionPipeline_MAX;
  static const int ReconstructionPipeline_ARRAYSIZE =
    ReconstructionPara_ReconstructionPipeline_ReconstructionPipeline_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReconstructionPipeline_descriptor() {
    return ReconstructionPara_ReconstructionPipeline_descriptor();
  }
  static inline const ::std::string& ReconstructionPipeline_Name(ReconstructionPipeline value) {
    return ReconstructionPara_ReconstructionPipeline_Name(value);
  }
  static inline bool ReconstructionPipeline_Parse(const ::std::string& name,
      ReconstructionPipeline* value) {
    return ReconstructionPara_ReconstructionPipeline_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .video_popup.ReconstructionPara.ReconstructionPipeline method = 1 [default = ORTHO_PIECEWISE_STITCHING];
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  ::video_popup::ReconstructionPara_ReconstructionPipeline method() const;
  void set_method(::video_popup::ReconstructionPara_ReconstructionPipeline value);

  // optional .video_popup.OrthoReconstructionPara ortho_reconstruction_para = 2;
  bool has_ortho_reconstruction_para() const;
  void clear_ortho_reconstruction_para();
  static const int kOrthoReconstructionParaFieldNumber = 2;
  const ::video_popup::OrthoReconstructionPara& ortho_reconstruction_para() const;
  ::video_popup::OrthoReconstructionPara* mutable_ortho_reconstruction_para();
  ::video_popup::OrthoReconstructionPara* release_ortho_reconstruction_para();
  void set_allocated_ortho_reconstruction_para(::video_popup::OrthoReconstructionPara* ortho_reconstruction_para);

  // optional .video_popup.PerspReconstructionPara persp_reconstruction_para = 3;
  bool has_persp_reconstruction_para() const;
  void clear_persp_reconstruction_para();
  static const int kPerspReconstructionParaFieldNumber = 3;
  const ::video_popup::PerspReconstructionPara& persp_reconstruction_para() const;
  ::video_popup::PerspReconstructionPara* mutable_persp_reconstruction_para();
  ::video_popup::PerspReconstructionPara* release_persp_reconstruction_para();
  void set_allocated_persp_reconstruction_para(::video_popup::PerspReconstructionPara* persp_reconstruction_para);

  // optional int32 thresh = 101 [default = 50];
  bool has_thresh() const;
  void clear_thresh();
  static const int kThreshFieldNumber = 101;
  ::google::protobuf::int32 thresh() const;
  void set_thresh(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:video_popup.ReconstructionPara)
 private:
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_ortho_reconstruction_para();
  inline void clear_has_ortho_reconstruction_para();
  inline void set_has_persp_reconstruction_para();
  inline void clear_has_persp_reconstruction_para();
  inline void set_has_thresh();
  inline void clear_has_thresh();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::video_popup::OrthoReconstructionPara* ortho_reconstruction_para_;
  int method_;
  ::google::protobuf::int32 thresh_;
  ::video_popup::PerspReconstructionPara* persp_reconstruction_para_;
  friend void  protobuf_AddDesc_video_5fpopup_2eproto();
  friend void protobuf_AssignDesc_video_5fpopup_2eproto();
  friend void protobuf_ShutdownFile_video_5fpopup_2eproto();

  void InitAsDefaultInstance();
  static ReconstructionPara* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NeighborhoodPara

// optional float velocity_weight = 1 [default = 2000];
inline bool NeighborhoodPara::has_velocity_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NeighborhoodPara::set_has_velocity_weight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NeighborhoodPara::clear_has_velocity_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NeighborhoodPara::clear_velocity_weight() {
  velocity_weight_ = 2000;
  clear_has_velocity_weight();
}
inline float NeighborhoodPara::velocity_weight() const {
  // @@protoc_insertion_point(field_get:video_popup.NeighborhoodPara.velocity_weight)
  return velocity_weight_;
}
inline void NeighborhoodPara::set_velocity_weight(float value) {
  set_has_velocity_weight();
  velocity_weight_ = value;
  // @@protoc_insertion_point(field_set:video_popup.NeighborhoodPara.velocity_weight)
}

// optional int32 top_frames_num = 2 [default = -1];
inline bool NeighborhoodPara::has_top_frames_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NeighborhoodPara::set_has_top_frames_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NeighborhoodPara::clear_has_top_frames_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NeighborhoodPara::clear_top_frames_num() {
  top_frames_num_ = -1;
  clear_has_top_frames_num();
}
inline ::google::protobuf::int32 NeighborhoodPara::top_frames_num() const {
  // @@protoc_insertion_point(field_get:video_popup.NeighborhoodPara.top_frames_num)
  return top_frames_num_;
}
inline void NeighborhoodPara::set_top_frames_num(::google::protobuf::int32 value) {
  set_has_top_frames_num();
  top_frames_num_ = value;
  // @@protoc_insertion_point(field_set:video_popup.NeighborhoodPara.top_frames_num)
}

// optional float dist_threshold = 3 [default = 10000];
inline bool NeighborhoodPara::has_dist_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NeighborhoodPara::set_has_dist_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NeighborhoodPara::clear_has_dist_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NeighborhoodPara::clear_dist_threshold() {
  dist_threshold_ = 10000;
  clear_has_dist_threshold();
}
inline float NeighborhoodPara::dist_threshold() const {
  // @@protoc_insertion_point(field_get:video_popup.NeighborhoodPara.dist_threshold)
  return dist_threshold_;
}
inline void NeighborhoodPara::set_dist_threshold(float value) {
  set_has_dist_threshold();
  dist_threshold_ = value;
  // @@protoc_insertion_point(field_set:video_popup.NeighborhoodPara.dist_threshold)
}

// optional float occlusion_penalty = 4 [default = 500];
inline bool NeighborhoodPara::has_occlusion_penalty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NeighborhoodPara::set_has_occlusion_penalty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NeighborhoodPara::clear_has_occlusion_penalty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NeighborhoodPara::clear_occlusion_penalty() {
  occlusion_penalty_ = 500;
  clear_has_occlusion_penalty();
}
inline float NeighborhoodPara::occlusion_penalty() const {
  // @@protoc_insertion_point(field_get:video_popup.NeighborhoodPara.occlusion_penalty)
  return occlusion_penalty_;
}
inline void NeighborhoodPara::set_occlusion_penalty(float value) {
  set_has_occlusion_penalty();
  occlusion_penalty_ = value;
  // @@protoc_insertion_point(field_set:video_popup.NeighborhoodPara.occlusion_penalty)
}

// optional int32 max_occlusion_frames = 5 [default = 45];
inline bool NeighborhoodPara::has_max_occlusion_frames() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NeighborhoodPara::set_has_max_occlusion_frames() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NeighborhoodPara::clear_has_max_occlusion_frames() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NeighborhoodPara::clear_max_occlusion_frames() {
  max_occlusion_frames_ = 45;
  clear_has_max_occlusion_frames();
}
inline ::google::protobuf::int32 NeighborhoodPara::max_occlusion_frames() const {
  // @@protoc_insertion_point(field_get:video_popup.NeighborhoodPara.max_occlusion_frames)
  return max_occlusion_frames_;
}
inline void NeighborhoodPara::set_max_occlusion_frames(::google::protobuf::int32 value) {
  set_has_max_occlusion_frames();
  max_occlusion_frames_ = value;
  // @@protoc_insertion_point(field_set:video_popup.NeighborhoodPara.max_occlusion_frames)
}

// optional float color_weight = 6 [default = 2.5];
inline bool NeighborhoodPara::has_color_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NeighborhoodPara::set_has_color_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NeighborhoodPara::clear_has_color_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NeighborhoodPara::clear_color_weight() {
  color_weight_ = 2.5f;
  clear_has_color_weight();
}
inline float NeighborhoodPara::color_weight() const {
  // @@protoc_insertion_point(field_get:video_popup.NeighborhoodPara.color_weight)
  return color_weight_;
}
inline void NeighborhoodPara::set_color_weight(float value) {
  set_has_color_weight();
  color_weight_ = value;
  // @@protoc_insertion_point(field_set:video_popup.NeighborhoodPara.color_weight)
}

// optional int32 neighbor_num = 7 [default = 10];
inline bool NeighborhoodPara::has_neighbor_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NeighborhoodPara::set_has_neighbor_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NeighborhoodPara::clear_has_neighbor_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NeighborhoodPara::clear_neighbor_num() {
  neighbor_num_ = 10;
  clear_has_neighbor_num();
}
inline ::google::protobuf::int32 NeighborhoodPara::neighbor_num() const {
  // @@protoc_insertion_point(field_get:video_popup.NeighborhoodPara.neighbor_num)
  return neighbor_num_;
}
inline void NeighborhoodPara::set_neighbor_num(::google::protobuf::int32 value) {
  set_has_neighbor_num();
  neighbor_num_ = value;
  // @@protoc_insertion_point(field_set:video_popup.NeighborhoodPara.neighbor_num)
}

// -------------------------------------------------------------------

// GRICModelSelectionPara

// optional float noise = 1 [default = 0.05];
inline bool GRICModelSelectionPara::has_noise() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GRICModelSelectionPara::set_has_noise() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GRICModelSelectionPara::clear_has_noise() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GRICModelSelectionPara::clear_noise() {
  noise_ = 0.05f;
  clear_has_noise();
}
inline float GRICModelSelectionPara::noise() const {
  // @@protoc_insertion_point(field_get:video_popup.GRICModelSelectionPara.noise)
  return noise_;
}
inline void GRICModelSelectionPara::set_noise(float value) {
  set_has_noise();
  noise_ = value;
  // @@protoc_insertion_point(field_set:video_popup.GRICModelSelectionPara.noise)
}

// optional float lambda1 = 2 [default = 1];
inline bool GRICModelSelectionPara::has_lambda1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GRICModelSelectionPara::set_has_lambda1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GRICModelSelectionPara::clear_has_lambda1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GRICModelSelectionPara::clear_lambda1() {
  lambda1_ = 1;
  clear_has_lambda1();
}
inline float GRICModelSelectionPara::lambda1() const {
  // @@protoc_insertion_point(field_get:video_popup.GRICModelSelectionPara.lambda1)
  return lambda1_;
}
inline void GRICModelSelectionPara::set_lambda1(float value) {
  set_has_lambda1();
  lambda1_ = value;
  // @@protoc_insertion_point(field_set:video_popup.GRICModelSelectionPara.lambda1)
}

// optional float lamnda2 = 3 [default = 0.01];
inline bool GRICModelSelectionPara::has_lamnda2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GRICModelSelectionPara::set_has_lamnda2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GRICModelSelectionPara::clear_has_lamnda2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GRICModelSelectionPara::clear_lamnda2() {
  lamnda2_ = 0.01f;
  clear_has_lamnda2();
}
inline float GRICModelSelectionPara::lamnda2() const {
  // @@protoc_insertion_point(field_get:video_popup.GRICModelSelectionPara.lamnda2)
  return lamnda2_;
}
inline void GRICModelSelectionPara::set_lamnda2(float value) {
  set_has_lamnda2();
  lamnda2_ = value;
  // @@protoc_insertion_point(field_set:video_popup.GRICModelSelectionPara.lamnda2)
}

// -------------------------------------------------------------------

// PerspFittingPara

// optional .video_popup.PerspFittingPara.FHFitting fh_fitting = 1 [default = FONLY];
inline bool PerspFittingPara::has_fh_fitting() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerspFittingPara::set_has_fh_fitting() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerspFittingPara::clear_has_fh_fitting() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerspFittingPara::clear_fh_fitting() {
  fh_fitting_ = 0;
  clear_has_fh_fitting();
}
inline ::video_popup::PerspFittingPara_FHFitting PerspFittingPara::fh_fitting() const {
  // @@protoc_insertion_point(field_get:video_popup.PerspFittingPara.fh_fitting)
  return static_cast< ::video_popup::PerspFittingPara_FHFitting >(fh_fitting_);
}
inline void PerspFittingPara::set_fh_fitting(::video_popup::PerspFittingPara_FHFitting value) {
  assert(::video_popup::PerspFittingPara_FHFitting_IsValid(value));
  set_has_fh_fitting();
  fh_fitting_ = value;
  // @@protoc_insertion_point(field_set:video_popup.PerspFittingPara.fh_fitting)
}

// optional .video_popup.PerspFittingPara.FittingError fitting_error = 2 [default = ALGEBRA];
inline bool PerspFittingPara::has_fitting_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerspFittingPara::set_has_fitting_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerspFittingPara::clear_has_fitting_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerspFittingPara::clear_fitting_error() {
  fitting_error_ = 0;
  clear_has_fitting_error();
}
inline ::video_popup::PerspFittingPara_FittingError PerspFittingPara::fitting_error() const {
  // @@protoc_insertion_point(field_get:video_popup.PerspFittingPara.fitting_error)
  return static_cast< ::video_popup::PerspFittingPara_FittingError >(fitting_error_);
}
inline void PerspFittingPara::set_fitting_error(::video_popup::PerspFittingPara_FittingError value) {
  assert(::video_popup::PerspFittingPara_FittingError_IsValid(value));
  set_has_fitting_error();
  fitting_error_ = value;
  // @@protoc_insertion_point(field_set:video_popup.PerspFittingPara.fitting_error)
}

// -------------------------------------------------------------------

// OrthoFittingPara

// -------------------------------------------------------------------

// SubspaceFittingPara

// -------------------------------------------------------------------

// ModelFittingPara_GraphCutPara

// optional .video_popup.ModelFittingPara.GraphCutPara.Engine engine = 1 [default = ALLGC];
inline bool ModelFittingPara_GraphCutPara::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelFittingPara_GraphCutPara::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelFittingPara_GraphCutPara::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelFittingPara_GraphCutPara::clear_engine() {
  engine_ = 2;
  clear_has_engine();
}
inline ::video_popup::ModelFittingPara_GraphCutPara_Engine ModelFittingPara_GraphCutPara::engine() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.engine)
  return static_cast< ::video_popup::ModelFittingPara_GraphCutPara_Engine >(engine_);
}
inline void ModelFittingPara_GraphCutPara::set_engine(::video_popup::ModelFittingPara_GraphCutPara_Engine value) {
  assert(::video_popup::ModelFittingPara_GraphCutPara_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.engine)
}

// optional float overlap_cost = 2 [default = 1];
inline bool ModelFittingPara_GraphCutPara::has_overlap_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelFittingPara_GraphCutPara::set_has_overlap_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelFittingPara_GraphCutPara::clear_has_overlap_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelFittingPara_GraphCutPara::clear_overlap_cost() {
  overlap_cost_ = 1;
  clear_has_overlap_cost();
}
inline float ModelFittingPara_GraphCutPara::overlap_cost() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.overlap_cost)
  return overlap_cost_;
}
inline void ModelFittingPara_GraphCutPara::set_overlap_cost(float value) {
  set_has_overlap_cost();
  overlap_cost_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.overlap_cost)
}

// optional float pointwise_breaking_lambda = 3 [default = 1];
inline bool ModelFittingPara_GraphCutPara::has_pointwise_breaking_lambda() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelFittingPara_GraphCutPara::set_has_pointwise_breaking_lambda() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelFittingPara_GraphCutPara::clear_has_pointwise_breaking_lambda() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelFittingPara_GraphCutPara::clear_pointwise_breaking_lambda() {
  pointwise_breaking_lambda_ = 1;
  clear_has_pointwise_breaking_lambda();
}
inline float ModelFittingPara_GraphCutPara::pointwise_breaking_lambda() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.pointwise_breaking_lambda)
  return pointwise_breaking_lambda_;
}
inline void ModelFittingPara_GraphCutPara::set_pointwise_breaking_lambda(float value) {
  set_has_pointwise_breaking_lambda();
  pointwise_breaking_lambda_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.pointwise_breaking_lambda)
}

// optional float pointwise_outlier_lambda = 4 [default = 1];
inline bool ModelFittingPara_GraphCutPara::has_pointwise_outlier_lambda() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelFittingPara_GraphCutPara::set_has_pointwise_outlier_lambda() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelFittingPara_GraphCutPara::clear_has_pointwise_outlier_lambda() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelFittingPara_GraphCutPara::clear_pointwise_outlier_lambda() {
  pointwise_outlier_lambda_ = 1;
  clear_has_pointwise_outlier_lambda();
}
inline float ModelFittingPara_GraphCutPara::pointwise_outlier_lambda() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.pointwise_outlier_lambda)
  return pointwise_outlier_lambda_;
}
inline void ModelFittingPara_GraphCutPara::set_pointwise_outlier_lambda(float value) {
  set_has_pointwise_outlier_lambda();
  pointwise_outlier_lambda_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.pointwise_outlier_lambda)
}

// optional float pairwise_breaking_ma = 5 [default = 100];
inline bool ModelFittingPara_GraphCutPara::has_pairwise_breaking_ma() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModelFittingPara_GraphCutPara::set_has_pairwise_breaking_ma() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModelFittingPara_GraphCutPara::clear_has_pairwise_breaking_ma() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModelFittingPara_GraphCutPara::clear_pairwise_breaking_ma() {
  pairwise_breaking_ma_ = 100;
  clear_has_pairwise_breaking_ma();
}
inline float ModelFittingPara_GraphCutPara::pairwise_breaking_ma() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.pairwise_breaking_ma)
  return pairwise_breaking_ma_;
}
inline void ModelFittingPara_GraphCutPara::set_pairwise_breaking_ma(float value) {
  set_has_pairwise_breaking_ma();
  pairwise_breaking_ma_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.pairwise_breaking_ma)
}

// optional float pairwise_breaking_mb = 6 [default = 100];
inline bool ModelFittingPara_GraphCutPara::has_pairwise_breaking_mb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModelFittingPara_GraphCutPara::set_has_pairwise_breaking_mb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModelFittingPara_GraphCutPara::clear_has_pairwise_breaking_mb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModelFittingPara_GraphCutPara::clear_pairwise_breaking_mb() {
  pairwise_breaking_mb_ = 100;
  clear_has_pairwise_breaking_mb();
}
inline float ModelFittingPara_GraphCutPara::pairwise_breaking_mb() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.pairwise_breaking_mb)
  return pairwise_breaking_mb_;
}
inline void ModelFittingPara_GraphCutPara::set_pairwise_breaking_mb(float value) {
  set_has_pairwise_breaking_mb();
  pairwise_breaking_mb_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.pairwise_breaking_mb)
}

// optional float pairwise_breaking_mc = 7 [default = 30];
inline bool ModelFittingPara_GraphCutPara::has_pairwise_breaking_mc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ModelFittingPara_GraphCutPara::set_has_pairwise_breaking_mc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ModelFittingPara_GraphCutPara::clear_has_pairwise_breaking_mc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ModelFittingPara_GraphCutPara::clear_pairwise_breaking_mc() {
  pairwise_breaking_mc_ = 30;
  clear_has_pairwise_breaking_mc();
}
inline float ModelFittingPara_GraphCutPara::pairwise_breaking_mc() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.pairwise_breaking_mc)
  return pairwise_breaking_mc_;
}
inline void ModelFittingPara_GraphCutPara::set_pairwise_breaking_mc(float value) {
  set_has_pairwise_breaking_mc();
  pairwise_breaking_mc_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.pairwise_breaking_mc)
}

// optional float pairwise_weight = 8 [default = 100];
inline bool ModelFittingPara_GraphCutPara::has_pairwise_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ModelFittingPara_GraphCutPara::set_has_pairwise_weight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ModelFittingPara_GraphCutPara::clear_has_pairwise_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ModelFittingPara_GraphCutPara::clear_pairwise_weight() {
  pairwise_weight_ = 100;
  clear_has_pairwise_weight();
}
inline float ModelFittingPara_GraphCutPara::pairwise_weight() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.pairwise_weight)
  return pairwise_weight_;
}
inline void ModelFittingPara_GraphCutPara::set_pairwise_weight(float value) {
  set_has_pairwise_weight();
  pairwise_weight_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.pairwise_weight)
}

// optional float pairwise_sigma = 9 [default = 10];
inline bool ModelFittingPara_GraphCutPara::has_pairwise_sigma() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ModelFittingPara_GraphCutPara::set_has_pairwise_sigma() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ModelFittingPara_GraphCutPara::clear_has_pairwise_sigma() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ModelFittingPara_GraphCutPara::clear_pairwise_sigma() {
  pairwise_sigma_ = 10;
  clear_has_pairwise_sigma();
}
inline float ModelFittingPara_GraphCutPara::pairwise_sigma() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.pairwise_sigma)
  return pairwise_sigma_;
}
inline void ModelFittingPara_GraphCutPara::set_pairwise_sigma(float value) {
  set_has_pairwise_sigma();
  pairwise_sigma_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.pairwise_sigma)
}

// optional int32 neighbors_num = 10 [default = 5];
inline bool ModelFittingPara_GraphCutPara::has_neighbors_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ModelFittingPara_GraphCutPara::set_has_neighbors_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ModelFittingPara_GraphCutPara::clear_has_neighbors_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ModelFittingPara_GraphCutPara::clear_neighbors_num() {
  neighbors_num_ = 5;
  clear_has_neighbors_num();
}
inline ::google::protobuf::int32 ModelFittingPara_GraphCutPara::neighbors_num() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.neighbors_num)
  return neighbors_num_;
}
inline void ModelFittingPara_GraphCutPara::set_neighbors_num(::google::protobuf::int32 value) {
  set_has_neighbors_num();
  neighbors_num_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.neighbors_num)
}

// optional int32 overlap_neighbor_num = 11 [default = 5];
inline bool ModelFittingPara_GraphCutPara::has_overlap_neighbor_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ModelFittingPara_GraphCutPara::set_has_overlap_neighbor_num() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ModelFittingPara_GraphCutPara::clear_has_overlap_neighbor_num() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ModelFittingPara_GraphCutPara::clear_overlap_neighbor_num() {
  overlap_neighbor_num_ = 5;
  clear_has_overlap_neighbor_num();
}
inline ::google::protobuf::int32 ModelFittingPara_GraphCutPara::overlap_neighbor_num() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.overlap_neighbor_num)
  return overlap_neighbor_num_;
}
inline void ModelFittingPara_GraphCutPara::set_overlap_neighbor_num(::google::protobuf::int32 value) {
  set_has_overlap_neighbor_num();
  overlap_neighbor_num_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.overlap_neighbor_num)
}

// optional float lambda_weight = 12 [default = 1];
inline bool ModelFittingPara_GraphCutPara::has_lambda_weight() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ModelFittingPara_GraphCutPara::set_has_lambda_weight() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ModelFittingPara_GraphCutPara::clear_has_lambda_weight() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ModelFittingPara_GraphCutPara::clear_lambda_weight() {
  lambda_weight_ = 1;
  clear_has_lambda_weight();
}
inline float ModelFittingPara_GraphCutPara::lambda_weight() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.GraphCutPara.lambda_weight)
  return lambda_weight_;
}
inline void ModelFittingPara_GraphCutPara::set_lambda_weight(float value) {
  set_has_lambda_weight();
  lambda_weight_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.GraphCutPara.lambda_weight)
}

// -------------------------------------------------------------------

// ModelFittingPara

// optional string name = 1;
inline bool ModelFittingPara::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelFittingPara::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelFittingPara::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelFittingPara::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ModelFittingPara::name() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelFittingPara::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.name)
}
inline void ModelFittingPara::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_popup.ModelFittingPara.name)
}
inline void ModelFittingPara::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_popup.ModelFittingPara.name)
}
inline ::std::string* ModelFittingPara::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:video_popup.ModelFittingPara.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelFittingPara::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelFittingPara::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:video_popup.ModelFittingPara.name)
}

// optional int32 init_proposal_num = 2 [default = 200];
inline bool ModelFittingPara::has_init_proposal_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelFittingPara::set_has_init_proposal_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelFittingPara::clear_has_init_proposal_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelFittingPara::clear_init_proposal_num() {
  init_proposal_num_ = 200;
  clear_has_init_proposal_num();
}
inline ::google::protobuf::int32 ModelFittingPara::init_proposal_num() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.init_proposal_num)
  return init_proposal_num_;
}
inline void ModelFittingPara::set_init_proposal_num(::google::protobuf::int32 value) {
  set_has_init_proposal_num();
  init_proposal_num_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.init_proposal_num)
}

// optional float mdl = 3 [default = 4000];
inline bool ModelFittingPara::has_mdl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelFittingPara::set_has_mdl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelFittingPara::clear_has_mdl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelFittingPara::clear_mdl() {
  mdl_ = 4000;
  clear_has_mdl();
}
inline float ModelFittingPara::mdl() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.mdl)
  return mdl_;
}
inline void ModelFittingPara::set_mdl(float value) {
  set_has_mdl();
  mdl_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.mdl)
}

// optional float iters_num = 4 [default = 5];
inline bool ModelFittingPara::has_iters_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelFittingPara::set_has_iters_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelFittingPara::clear_has_iters_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelFittingPara::clear_iters_num() {
  iters_num_ = 5;
  clear_has_iters_num();
}
inline float ModelFittingPara::iters_num() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.iters_num)
  return iters_num_;
}
inline void ModelFittingPara::set_iters_num(float value) {
  set_has_iters_num();
  iters_num_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.iters_num)
}

// optional .video_popup.PerspFittingPara persp_fitting_para = 101;
inline bool ModelFittingPara::has_persp_fitting_para() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModelFittingPara::set_has_persp_fitting_para() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModelFittingPara::clear_has_persp_fitting_para() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModelFittingPara::clear_persp_fitting_para() {
  if (persp_fitting_para_ != NULL) persp_fitting_para_->::video_popup::PerspFittingPara::Clear();
  clear_has_persp_fitting_para();
}
inline const ::video_popup::PerspFittingPara& ModelFittingPara::persp_fitting_para() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.persp_fitting_para)
  return persp_fitting_para_ != NULL ? *persp_fitting_para_ : *default_instance_->persp_fitting_para_;
}
inline ::video_popup::PerspFittingPara* ModelFittingPara::mutable_persp_fitting_para() {
  set_has_persp_fitting_para();
  if (persp_fitting_para_ == NULL) {
    persp_fitting_para_ = new ::video_popup::PerspFittingPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.ModelFittingPara.persp_fitting_para)
  return persp_fitting_para_;
}
inline ::video_popup::PerspFittingPara* ModelFittingPara::release_persp_fitting_para() {
  clear_has_persp_fitting_para();
  ::video_popup::PerspFittingPara* temp = persp_fitting_para_;
  persp_fitting_para_ = NULL;
  return temp;
}
inline void ModelFittingPara::set_allocated_persp_fitting_para(::video_popup::PerspFittingPara* persp_fitting_para) {
  delete persp_fitting_para_;
  persp_fitting_para_ = persp_fitting_para;
  if (persp_fitting_para) {
    set_has_persp_fitting_para();
  } else {
    clear_has_persp_fitting_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.ModelFittingPara.persp_fitting_para)
}

// optional .video_popup.OrthoFittingPara ortho_fitting_para = 102;
inline bool ModelFittingPara::has_ortho_fitting_para() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModelFittingPara::set_has_ortho_fitting_para() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModelFittingPara::clear_has_ortho_fitting_para() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModelFittingPara::clear_ortho_fitting_para() {
  if (ortho_fitting_para_ != NULL) ortho_fitting_para_->::video_popup::OrthoFittingPara::Clear();
  clear_has_ortho_fitting_para();
}
inline const ::video_popup::OrthoFittingPara& ModelFittingPara::ortho_fitting_para() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.ortho_fitting_para)
  return ortho_fitting_para_ != NULL ? *ortho_fitting_para_ : *default_instance_->ortho_fitting_para_;
}
inline ::video_popup::OrthoFittingPara* ModelFittingPara::mutable_ortho_fitting_para() {
  set_has_ortho_fitting_para();
  if (ortho_fitting_para_ == NULL) {
    ortho_fitting_para_ = new ::video_popup::OrthoFittingPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.ModelFittingPara.ortho_fitting_para)
  return ortho_fitting_para_;
}
inline ::video_popup::OrthoFittingPara* ModelFittingPara::release_ortho_fitting_para() {
  clear_has_ortho_fitting_para();
  ::video_popup::OrthoFittingPara* temp = ortho_fitting_para_;
  ortho_fitting_para_ = NULL;
  return temp;
}
inline void ModelFittingPara::set_allocated_ortho_fitting_para(::video_popup::OrthoFittingPara* ortho_fitting_para) {
  delete ortho_fitting_para_;
  ortho_fitting_para_ = ortho_fitting_para;
  if (ortho_fitting_para) {
    set_has_ortho_fitting_para();
  } else {
    clear_has_ortho_fitting_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.ModelFittingPara.ortho_fitting_para)
}

// optional .video_popup.SubspaceFittingPara subspace_fitting_para = 103;
inline bool ModelFittingPara::has_subspace_fitting_para() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ModelFittingPara::set_has_subspace_fitting_para() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ModelFittingPara::clear_has_subspace_fitting_para() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ModelFittingPara::clear_subspace_fitting_para() {
  if (subspace_fitting_para_ != NULL) subspace_fitting_para_->::video_popup::SubspaceFittingPara::Clear();
  clear_has_subspace_fitting_para();
}
inline const ::video_popup::SubspaceFittingPara& ModelFittingPara::subspace_fitting_para() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.subspace_fitting_para)
  return subspace_fitting_para_ != NULL ? *subspace_fitting_para_ : *default_instance_->subspace_fitting_para_;
}
inline ::video_popup::SubspaceFittingPara* ModelFittingPara::mutable_subspace_fitting_para() {
  set_has_subspace_fitting_para();
  if (subspace_fitting_para_ == NULL) {
    subspace_fitting_para_ = new ::video_popup::SubspaceFittingPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.ModelFittingPara.subspace_fitting_para)
  return subspace_fitting_para_;
}
inline ::video_popup::SubspaceFittingPara* ModelFittingPara::release_subspace_fitting_para() {
  clear_has_subspace_fitting_para();
  ::video_popup::SubspaceFittingPara* temp = subspace_fitting_para_;
  subspace_fitting_para_ = NULL;
  return temp;
}
inline void ModelFittingPara::set_allocated_subspace_fitting_para(::video_popup::SubspaceFittingPara* subspace_fitting_para) {
  delete subspace_fitting_para_;
  subspace_fitting_para_ = subspace_fitting_para;
  if (subspace_fitting_para) {
    set_has_subspace_fitting_para();
  } else {
    clear_has_subspace_fitting_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.ModelFittingPara.subspace_fitting_para)
}

// optional .video_popup.ModelFittingPara.FittingModel fitting_model = 104 [default = PERSP];
inline bool ModelFittingPara::has_fitting_model() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ModelFittingPara::set_has_fitting_model() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ModelFittingPara::clear_has_fitting_model() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ModelFittingPara::clear_fitting_model() {
  fitting_model_ = 0;
  clear_has_fitting_model();
}
inline ::video_popup::ModelFittingPara_FittingModel ModelFittingPara::fitting_model() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.fitting_model)
  return static_cast< ::video_popup::ModelFittingPara_FittingModel >(fitting_model_);
}
inline void ModelFittingPara::set_fitting_model(::video_popup::ModelFittingPara_FittingModel value) {
  assert(::video_popup::ModelFittingPara_FittingModel_IsValid(value));
  set_has_fitting_model();
  fitting_model_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.fitting_model)
}

// optional bool use_gric_model_selection = 201 [default = false];
inline bool ModelFittingPara::has_use_gric_model_selection() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ModelFittingPara::set_has_use_gric_model_selection() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ModelFittingPara::clear_has_use_gric_model_selection() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ModelFittingPara::clear_use_gric_model_selection() {
  use_gric_model_selection_ = false;
  clear_has_use_gric_model_selection();
}
inline bool ModelFittingPara::use_gric_model_selection() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.use_gric_model_selection)
  return use_gric_model_selection_;
}
inline void ModelFittingPara::set_use_gric_model_selection(bool value) {
  set_has_use_gric_model_selection();
  use_gric_model_selection_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ModelFittingPara.use_gric_model_selection)
}

// optional .video_popup.GRICModelSelectionPara gric_model_selection_para = 202;
inline bool ModelFittingPara::has_gric_model_selection_para() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ModelFittingPara::set_has_gric_model_selection_para() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ModelFittingPara::clear_has_gric_model_selection_para() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ModelFittingPara::clear_gric_model_selection_para() {
  if (gric_model_selection_para_ != NULL) gric_model_selection_para_->::video_popup::GRICModelSelectionPara::Clear();
  clear_has_gric_model_selection_para();
}
inline const ::video_popup::GRICModelSelectionPara& ModelFittingPara::gric_model_selection_para() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.gric_model_selection_para)
  return gric_model_selection_para_ != NULL ? *gric_model_selection_para_ : *default_instance_->gric_model_selection_para_;
}
inline ::video_popup::GRICModelSelectionPara* ModelFittingPara::mutable_gric_model_selection_para() {
  set_has_gric_model_selection_para();
  if (gric_model_selection_para_ == NULL) {
    gric_model_selection_para_ = new ::video_popup::GRICModelSelectionPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.ModelFittingPara.gric_model_selection_para)
  return gric_model_selection_para_;
}
inline ::video_popup::GRICModelSelectionPara* ModelFittingPara::release_gric_model_selection_para() {
  clear_has_gric_model_selection_para();
  ::video_popup::GRICModelSelectionPara* temp = gric_model_selection_para_;
  gric_model_selection_para_ = NULL;
  return temp;
}
inline void ModelFittingPara::set_allocated_gric_model_selection_para(::video_popup::GRICModelSelectionPara* gric_model_selection_para) {
  delete gric_model_selection_para_;
  gric_model_selection_para_ = gric_model_selection_para;
  if (gric_model_selection_para) {
    set_has_gric_model_selection_para();
  } else {
    clear_has_gric_model_selection_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.ModelFittingPara.gric_model_selection_para)
}

// optional .video_popup.ModelFittingPara.GraphCutPara graph_cut_para = 301;
inline bool ModelFittingPara::has_graph_cut_para() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ModelFittingPara::set_has_graph_cut_para() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ModelFittingPara::clear_has_graph_cut_para() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ModelFittingPara::clear_graph_cut_para() {
  if (graph_cut_para_ != NULL) graph_cut_para_->::video_popup::ModelFittingPara_GraphCutPara::Clear();
  clear_has_graph_cut_para();
}
inline const ::video_popup::ModelFittingPara_GraphCutPara& ModelFittingPara::graph_cut_para() const {
  // @@protoc_insertion_point(field_get:video_popup.ModelFittingPara.graph_cut_para)
  return graph_cut_para_ != NULL ? *graph_cut_para_ : *default_instance_->graph_cut_para_;
}
inline ::video_popup::ModelFittingPara_GraphCutPara* ModelFittingPara::mutable_graph_cut_para() {
  set_has_graph_cut_para();
  if (graph_cut_para_ == NULL) {
    graph_cut_para_ = new ::video_popup::ModelFittingPara_GraphCutPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.ModelFittingPara.graph_cut_para)
  return graph_cut_para_;
}
inline ::video_popup::ModelFittingPara_GraphCutPara* ModelFittingPara::release_graph_cut_para() {
  clear_has_graph_cut_para();
  ::video_popup::ModelFittingPara_GraphCutPara* temp = graph_cut_para_;
  graph_cut_para_ = NULL;
  return temp;
}
inline void ModelFittingPara::set_allocated_graph_cut_para(::video_popup::ModelFittingPara_GraphCutPara* graph_cut_para) {
  delete graph_cut_para_;
  graph_cut_para_ = graph_cut_para;
  if (graph_cut_para) {
    set_has_graph_cut_para();
  } else {
    clear_has_graph_cut_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.ModelFittingPara.graph_cut_para)
}

// -------------------------------------------------------------------

// SegmentationPara

// optional string tracks_path = 1;
inline bool SegmentationPara::has_tracks_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SegmentationPara::set_has_tracks_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SegmentationPara::clear_has_tracks_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SegmentationPara::clear_tracks_path() {
  tracks_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tracks_path();
}
inline const ::std::string& SegmentationPara::tracks_path() const {
  // @@protoc_insertion_point(field_get:video_popup.SegmentationPara.tracks_path)
  return tracks_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentationPara::set_tracks_path(const ::std::string& value) {
  set_has_tracks_path();
  tracks_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_popup.SegmentationPara.tracks_path)
}
inline void SegmentationPara::set_tracks_path(const char* value) {
  set_has_tracks_path();
  tracks_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_popup.SegmentationPara.tracks_path)
}
inline void SegmentationPara::set_tracks_path(const char* value, size_t size) {
  set_has_tracks_path();
  tracks_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_popup.SegmentationPara.tracks_path)
}
inline ::std::string* SegmentationPara::mutable_tracks_path() {
  set_has_tracks_path();
  // @@protoc_insertion_point(field_mutable:video_popup.SegmentationPara.tracks_path)
  return tracks_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SegmentationPara::release_tracks_path() {
  clear_has_tracks_path();
  return tracks_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentationPara::set_allocated_tracks_path(::std::string* tracks_path) {
  if (tracks_path != NULL) {
    set_has_tracks_path();
  } else {
    clear_has_tracks_path();
  }
  tracks_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracks_path);
  // @@protoc_insertion_point(field_set_allocated:video_popup.SegmentationPara.tracks_path)
}

// optional string images_path = 2;
inline bool SegmentationPara::has_images_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SegmentationPara::set_has_images_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SegmentationPara::clear_has_images_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SegmentationPara::clear_images_path() {
  images_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_images_path();
}
inline const ::std::string& SegmentationPara::images_path() const {
  // @@protoc_insertion_point(field_get:video_popup.SegmentationPara.images_path)
  return images_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentationPara::set_images_path(const ::std::string& value) {
  set_has_images_path();
  images_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:video_popup.SegmentationPara.images_path)
}
inline void SegmentationPara::set_images_path(const char* value) {
  set_has_images_path();
  images_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:video_popup.SegmentationPara.images_path)
}
inline void SegmentationPara::set_images_path(const char* value, size_t size) {
  set_has_images_path();
  images_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:video_popup.SegmentationPara.images_path)
}
inline ::std::string* SegmentationPara::mutable_images_path() {
  set_has_images_path();
  // @@protoc_insertion_point(field_mutable:video_popup.SegmentationPara.images_path)
  return images_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SegmentationPara::release_images_path() {
  clear_has_images_path();
  return images_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentationPara::set_allocated_images_path(::std::string* images_path) {
  if (images_path != NULL) {
    set_has_images_path();
  } else {
    clear_has_images_path();
  }
  images_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), images_path);
  // @@protoc_insertion_point(field_set_allocated:video_popup.SegmentationPara.images_path)
}

// optional int32 min_vis_frames = 3 [default = 5];
inline bool SegmentationPara::has_min_vis_frames() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SegmentationPara::set_has_min_vis_frames() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SegmentationPara::clear_has_min_vis_frames() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SegmentationPara::clear_min_vis_frames() {
  min_vis_frames_ = 5;
  clear_has_min_vis_frames();
}
inline ::google::protobuf::int32 SegmentationPara::min_vis_frames() const {
  // @@protoc_insertion_point(field_get:video_popup.SegmentationPara.min_vis_frames)
  return min_vis_frames_;
}
inline void SegmentationPara::set_min_vis_frames(::google::protobuf::int32 value) {
  set_has_min_vis_frames();
  min_vis_frames_ = value;
  // @@protoc_insertion_point(field_set:video_popup.SegmentationPara.min_vis_frames)
}

// optional .video_popup.ModelFittingPara model_fitting_para = 101;
inline bool SegmentationPara::has_model_fitting_para() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SegmentationPara::set_has_model_fitting_para() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SegmentationPara::clear_has_model_fitting_para() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SegmentationPara::clear_model_fitting_para() {
  if (model_fitting_para_ != NULL) model_fitting_para_->::video_popup::ModelFittingPara::Clear();
  clear_has_model_fitting_para();
}
inline const ::video_popup::ModelFittingPara& SegmentationPara::model_fitting_para() const {
  // @@protoc_insertion_point(field_get:video_popup.SegmentationPara.model_fitting_para)
  return model_fitting_para_ != NULL ? *model_fitting_para_ : *default_instance_->model_fitting_para_;
}
inline ::video_popup::ModelFittingPara* SegmentationPara::mutable_model_fitting_para() {
  set_has_model_fitting_para();
  if (model_fitting_para_ == NULL) {
    model_fitting_para_ = new ::video_popup::ModelFittingPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.SegmentationPara.model_fitting_para)
  return model_fitting_para_;
}
inline ::video_popup::ModelFittingPara* SegmentationPara::release_model_fitting_para() {
  clear_has_model_fitting_para();
  ::video_popup::ModelFittingPara* temp = model_fitting_para_;
  model_fitting_para_ = NULL;
  return temp;
}
inline void SegmentationPara::set_allocated_model_fitting_para(::video_popup::ModelFittingPara* model_fitting_para) {
  delete model_fitting_para_;
  model_fitting_para_ = model_fitting_para;
  if (model_fitting_para) {
    set_has_model_fitting_para();
  } else {
    clear_has_model_fitting_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.SegmentationPara.model_fitting_para)
}

// -------------------------------------------------------------------

// OrthoReconstructionPara

// optional float MC1 = 1 [default = 0.001];
inline bool OrthoReconstructionPara::has_mc1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrthoReconstructionPara::set_has_mc1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrthoReconstructionPara::clear_has_mc1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrthoReconstructionPara::clear_mc1() {
  mc1_ = 0.001f;
  clear_has_mc1();
}
inline float OrthoReconstructionPara::mc1() const {
  // @@protoc_insertion_point(field_get:video_popup.OrthoReconstructionPara.MC1)
  return mc1_;
}
inline void OrthoReconstructionPara::set_mc1(float value) {
  set_has_mc1();
  mc1_ = value;
  // @@protoc_insertion_point(field_set:video_popup.OrthoReconstructionPara.MC1)
}

// optional float MC2 = 2 [default = 20];
inline bool OrthoReconstructionPara::has_mc2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrthoReconstructionPara::set_has_mc2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrthoReconstructionPara::clear_has_mc2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrthoReconstructionPara::clear_mc2() {
  mc2_ = 20;
  clear_has_mc2();
}
inline float OrthoReconstructionPara::mc2() const {
  // @@protoc_insertion_point(field_get:video_popup.OrthoReconstructionPara.MC2)
  return mc2_;
}
inline void OrthoReconstructionPara::set_mc2(float value) {
  set_has_mc2();
  mc2_ = value;
  // @@protoc_insertion_point(field_set:video_popup.OrthoReconstructionPara.MC2)
}

// optional float MC3 = 3 [default = 10];
inline bool OrthoReconstructionPara::has_mc3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrthoReconstructionPara::set_has_mc3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrthoReconstructionPara::clear_has_mc3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrthoReconstructionPara::clear_mc3() {
  mc3_ = 10;
  clear_has_mc3();
}
inline float OrthoReconstructionPara::mc3() const {
  // @@protoc_insertion_point(field_get:video_popup.OrthoReconstructionPara.MC3)
  return mc3_;
}
inline void OrthoReconstructionPara::set_mc3(float value) {
  set_has_mc3();
  mc3_ = value;
  // @@protoc_insertion_point(field_set:video_popup.OrthoReconstructionPara.MC3)
}

// optional int32 ba_model = 4 [default = 0];
inline bool OrthoReconstructionPara::has_ba_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrthoReconstructionPara::set_has_ba_model() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrthoReconstructionPara::clear_has_ba_model() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrthoReconstructionPara::clear_ba_model() {
  ba_model_ = 0;
  clear_has_ba_model();
}
inline ::google::protobuf::int32 OrthoReconstructionPara::ba_model() const {
  // @@protoc_insertion_point(field_get:video_popup.OrthoReconstructionPara.ba_model)
  return ba_model_;
}
inline void OrthoReconstructionPara::set_ba_model(::google::protobuf::int32 value) {
  set_has_ba_model();
  ba_model_ = value;
  // @@protoc_insertion_point(field_set:video_popup.OrthoReconstructionPara.ba_model)
}

// optional float alpha_s = 5 [default = 0.01];
inline bool OrthoReconstructionPara::has_alpha_s() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OrthoReconstructionPara::set_has_alpha_s() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OrthoReconstructionPara::clear_has_alpha_s() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OrthoReconstructionPara::clear_alpha_s() {
  alpha_s_ = 0.01f;
  clear_has_alpha_s();
}
inline float OrthoReconstructionPara::alpha_s() const {
  // @@protoc_insertion_point(field_get:video_popup.OrthoReconstructionPara.alpha_s)
  return alpha_s_;
}
inline void OrthoReconstructionPara::set_alpha_s(float value) {
  set_has_alpha_s();
  alpha_s_ = value;
  // @@protoc_insertion_point(field_set:video_popup.OrthoReconstructionPara.alpha_s)
}

// optional float alpha_z = 6 [default = 0.01];
inline bool OrthoReconstructionPara::has_alpha_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OrthoReconstructionPara::set_has_alpha_z() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OrthoReconstructionPara::clear_has_alpha_z() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OrthoReconstructionPara::clear_alpha_z() {
  alpha_z_ = 0.01f;
  clear_has_alpha_z();
}
inline float OrthoReconstructionPara::alpha_z() const {
  // @@protoc_insertion_point(field_get:video_popup.OrthoReconstructionPara.alpha_z)
  return alpha_z_;
}
inline void OrthoReconstructionPara::set_alpha_z(float value) {
  set_has_alpha_z();
  alpha_z_ = value;
  // @@protoc_insertion_point(field_set:video_popup.OrthoReconstructionPara.alpha_z)
}

// optional float alpha_prior = 7 [default = 10];
inline bool OrthoReconstructionPara::has_alpha_prior() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OrthoReconstructionPara::set_has_alpha_prior() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OrthoReconstructionPara::clear_has_alpha_prior() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OrthoReconstructionPara::clear_alpha_prior() {
  alpha_prior_ = 10;
  clear_has_alpha_prior();
}
inline float OrthoReconstructionPara::alpha_prior() const {
  // @@protoc_insertion_point(field_get:video_popup.OrthoReconstructionPara.alpha_prior)
  return alpha_prior_;
}
inline void OrthoReconstructionPara::set_alpha_prior(float value) {
  set_has_alpha_prior();
  alpha_prior_ = value;
  // @@protoc_insertion_point(field_set:video_popup.OrthoReconstructionPara.alpha_prior)
}

// -------------------------------------------------------------------

// PerspReconstructionPara

// optional float fx = 1 [default = 800];
inline bool PerspReconstructionPara::has_fx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerspReconstructionPara::set_has_fx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerspReconstructionPara::clear_has_fx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerspReconstructionPara::clear_fx() {
  fx_ = 800;
  clear_has_fx();
}
inline float PerspReconstructionPara::fx() const {
  // @@protoc_insertion_point(field_get:video_popup.PerspReconstructionPara.fx)
  return fx_;
}
inline void PerspReconstructionPara::set_fx(float value) {
  set_has_fx();
  fx_ = value;
  // @@protoc_insertion_point(field_set:video_popup.PerspReconstructionPara.fx)
}

// optional float fy = 2 [default = 800];
inline bool PerspReconstructionPara::has_fy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerspReconstructionPara::set_has_fy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerspReconstructionPara::clear_has_fy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerspReconstructionPara::clear_fy() {
  fy_ = 800;
  clear_has_fy();
}
inline float PerspReconstructionPara::fy() const {
  // @@protoc_insertion_point(field_get:video_popup.PerspReconstructionPara.fy)
  return fy_;
}
inline void PerspReconstructionPara::set_fy(float value) {
  set_has_fy();
  fy_ = value;
  // @@protoc_insertion_point(field_set:video_popup.PerspReconstructionPara.fy)
}

// optional float u0 = 3 [default = 640];
inline bool PerspReconstructionPara::has_u0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerspReconstructionPara::set_has_u0() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PerspReconstructionPara::clear_has_u0() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PerspReconstructionPara::clear_u0() {
  u0_ = 640;
  clear_has_u0();
}
inline float PerspReconstructionPara::u0() const {
  // @@protoc_insertion_point(field_get:video_popup.PerspReconstructionPara.u0)
  return u0_;
}
inline void PerspReconstructionPara::set_u0(float value) {
  set_has_u0();
  u0_ = value;
  // @@protoc_insertion_point(field_set:video_popup.PerspReconstructionPara.u0)
}

// optional float v0 = 4 [default = 360];
inline bool PerspReconstructionPara::has_v0() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerspReconstructionPara::set_has_v0() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PerspReconstructionPara::clear_has_v0() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PerspReconstructionPara::clear_v0() {
  v0_ = 360;
  clear_has_v0();
}
inline float PerspReconstructionPara::v0() const {
  // @@protoc_insertion_point(field_get:video_popup.PerspReconstructionPara.v0)
  return v0_;
}
inline void PerspReconstructionPara::set_v0(float value) {
  set_has_v0();
  v0_ = value;
  // @@protoc_insertion_point(field_set:video_popup.PerspReconstructionPara.v0)
}

// -------------------------------------------------------------------

// ReconstructionPara

// optional .video_popup.ReconstructionPara.ReconstructionPipeline method = 1 [default = ORTHO_PIECEWISE_STITCHING];
inline bool ReconstructionPara::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReconstructionPara::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReconstructionPara::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReconstructionPara::clear_method() {
  method_ = 0;
  clear_has_method();
}
inline ::video_popup::ReconstructionPara_ReconstructionPipeline ReconstructionPara::method() const {
  // @@protoc_insertion_point(field_get:video_popup.ReconstructionPara.method)
  return static_cast< ::video_popup::ReconstructionPara_ReconstructionPipeline >(method_);
}
inline void ReconstructionPara::set_method(::video_popup::ReconstructionPara_ReconstructionPipeline value) {
  assert(::video_popup::ReconstructionPara_ReconstructionPipeline_IsValid(value));
  set_has_method();
  method_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ReconstructionPara.method)
}

// optional .video_popup.OrthoReconstructionPara ortho_reconstruction_para = 2;
inline bool ReconstructionPara::has_ortho_reconstruction_para() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReconstructionPara::set_has_ortho_reconstruction_para() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReconstructionPara::clear_has_ortho_reconstruction_para() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReconstructionPara::clear_ortho_reconstruction_para() {
  if (ortho_reconstruction_para_ != NULL) ortho_reconstruction_para_->::video_popup::OrthoReconstructionPara::Clear();
  clear_has_ortho_reconstruction_para();
}
inline const ::video_popup::OrthoReconstructionPara& ReconstructionPara::ortho_reconstruction_para() const {
  // @@protoc_insertion_point(field_get:video_popup.ReconstructionPara.ortho_reconstruction_para)
  return ortho_reconstruction_para_ != NULL ? *ortho_reconstruction_para_ : *default_instance_->ortho_reconstruction_para_;
}
inline ::video_popup::OrthoReconstructionPara* ReconstructionPara::mutable_ortho_reconstruction_para() {
  set_has_ortho_reconstruction_para();
  if (ortho_reconstruction_para_ == NULL) {
    ortho_reconstruction_para_ = new ::video_popup::OrthoReconstructionPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.ReconstructionPara.ortho_reconstruction_para)
  return ortho_reconstruction_para_;
}
inline ::video_popup::OrthoReconstructionPara* ReconstructionPara::release_ortho_reconstruction_para() {
  clear_has_ortho_reconstruction_para();
  ::video_popup::OrthoReconstructionPara* temp = ortho_reconstruction_para_;
  ortho_reconstruction_para_ = NULL;
  return temp;
}
inline void ReconstructionPara::set_allocated_ortho_reconstruction_para(::video_popup::OrthoReconstructionPara* ortho_reconstruction_para) {
  delete ortho_reconstruction_para_;
  ortho_reconstruction_para_ = ortho_reconstruction_para;
  if (ortho_reconstruction_para) {
    set_has_ortho_reconstruction_para();
  } else {
    clear_has_ortho_reconstruction_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.ReconstructionPara.ortho_reconstruction_para)
}

// optional .video_popup.PerspReconstructionPara persp_reconstruction_para = 3;
inline bool ReconstructionPara::has_persp_reconstruction_para() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReconstructionPara::set_has_persp_reconstruction_para() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReconstructionPara::clear_has_persp_reconstruction_para() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReconstructionPara::clear_persp_reconstruction_para() {
  if (persp_reconstruction_para_ != NULL) persp_reconstruction_para_->::video_popup::PerspReconstructionPara::Clear();
  clear_has_persp_reconstruction_para();
}
inline const ::video_popup::PerspReconstructionPara& ReconstructionPara::persp_reconstruction_para() const {
  // @@protoc_insertion_point(field_get:video_popup.ReconstructionPara.persp_reconstruction_para)
  return persp_reconstruction_para_ != NULL ? *persp_reconstruction_para_ : *default_instance_->persp_reconstruction_para_;
}
inline ::video_popup::PerspReconstructionPara* ReconstructionPara::mutable_persp_reconstruction_para() {
  set_has_persp_reconstruction_para();
  if (persp_reconstruction_para_ == NULL) {
    persp_reconstruction_para_ = new ::video_popup::PerspReconstructionPara;
  }
  // @@protoc_insertion_point(field_mutable:video_popup.ReconstructionPara.persp_reconstruction_para)
  return persp_reconstruction_para_;
}
inline ::video_popup::PerspReconstructionPara* ReconstructionPara::release_persp_reconstruction_para() {
  clear_has_persp_reconstruction_para();
  ::video_popup::PerspReconstructionPara* temp = persp_reconstruction_para_;
  persp_reconstruction_para_ = NULL;
  return temp;
}
inline void ReconstructionPara::set_allocated_persp_reconstruction_para(::video_popup::PerspReconstructionPara* persp_reconstruction_para) {
  delete persp_reconstruction_para_;
  persp_reconstruction_para_ = persp_reconstruction_para;
  if (persp_reconstruction_para) {
    set_has_persp_reconstruction_para();
  } else {
    clear_has_persp_reconstruction_para();
  }
  // @@protoc_insertion_point(field_set_allocated:video_popup.ReconstructionPara.persp_reconstruction_para)
}

// optional int32 thresh = 101 [default = 50];
inline bool ReconstructionPara::has_thresh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReconstructionPara::set_has_thresh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReconstructionPara::clear_has_thresh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReconstructionPara::clear_thresh() {
  thresh_ = 50;
  clear_has_thresh();
}
inline ::google::protobuf::int32 ReconstructionPara::thresh() const {
  // @@protoc_insertion_point(field_get:video_popup.ReconstructionPara.thresh)
  return thresh_;
}
inline void ReconstructionPara::set_thresh(::google::protobuf::int32 value) {
  set_has_thresh();
  thresh_ = value;
  // @@protoc_insertion_point(field_set:video_popup.ReconstructionPara.thresh)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace video_popup

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::video_popup::PerspFittingPara_FHFitting> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::video_popup::PerspFittingPara_FHFitting>() {
  return ::video_popup::PerspFittingPara_FHFitting_descriptor();
}
template <> struct is_proto_enum< ::video_popup::PerspFittingPara_FittingError> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::video_popup::PerspFittingPara_FittingError>() {
  return ::video_popup::PerspFittingPara_FittingError_descriptor();
}
template <> struct is_proto_enum< ::video_popup::ModelFittingPara_GraphCutPara_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::video_popup::ModelFittingPara_GraphCutPara_Engine>() {
  return ::video_popup::ModelFittingPara_GraphCutPara_Engine_descriptor();
}
template <> struct is_proto_enum< ::video_popup::ModelFittingPara_FittingModel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::video_popup::ModelFittingPara_FittingModel>() {
  return ::video_popup::ModelFittingPara_FittingModel_descriptor();
}
template <> struct is_proto_enum< ::video_popup::ReconstructionPara_ReconstructionPipeline> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::video_popup::ReconstructionPara_ReconstructionPipeline>() {
  return ::video_popup::ReconstructionPara_ReconstructionPipeline_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_video_5fpopup_2eproto__INCLUDED
