# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cs_ba_python', [dirname(__file__)])
        except ImportError:
            import _cs_ba_python
            return _cs_ba_python
        if fp is not None:
            try:
                _mod = imp.load_module('_cs_ba_python', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cs_ba_python = swig_import_helper()
    del swig_import_helper
else:
    import _cs_ba_python
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import numpy as np

def cs_ba_python(n, ncon, m, mcon, vmask, p0, cnp, pnp, x, errorType, sfmCase,
                 verbose, knum, kmask, prior_model, prior_para, mprior_mask,
                 cconst_mask):

  """same interface in python as the one used in matlab, refer to cs_ba.m for details"""

  vmask = np.reshape(vmask, (-1), order='F').astype(np.double)
  p0 = p0.astype(np.double)
  x = x.astype(np.double)
  kmask = kmask.astype(np.double)
  prior_para = prior_para.astype(np.double)
  mprior_mask = mprior_mask.astype(np.double)
  cconst_mask = cconst_mask.astype(np.double)

  pOut = np.copy(p0)

  _cs_ba(pOut, n, ncon, m, mcon, vmask,
         p0, cnp, pnp, x, errorType, sfmCase,
         verbose, knum, kmask, prior_model, prior_para, mprior_mask,
         cconst_mask)

  return pOut



def add_ortho_prior(*args):
  return _cs_ba_python.add_ortho_prior(*args)
add_ortho_prior = _cs_ba_python.add_ortho_prior

def add_persp_prior(*args):
  return _cs_ba_python.add_persp_prior(*args)
add_persp_prior = _cs_ba_python.add_persp_prior

def set_const_camera(*args):
  return _cs_ba_python.set_const_camera(*args)
set_const_camera = _cs_ba_python.set_const_camera

def add_const_mask(*args):
  return _cs_ba_python.add_const_mask(*args)
add_const_mask = _cs_ba_python.add_const_mask

def _cs_ba(*args):
  return _cs_ba_python._cs_ba(*args)
_cs_ba = _cs_ba_python._cs_ba
# This file is compatible with both classic and new-style classes.


